<?xml version="1.0" encoding="UTF-8"?>

<!--
 * This file is subject to the terms and conditions defined in file LICENSE,
 * which is part of this source code package.
 *
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
-->

<xwikidoc version="1.1">
  <web>data</web>
  <name>SharePatients</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>data</parent>
  <creationDate>1503095991000</creationDate>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1503348143000</date>
  <contentUpdateDate>1503348143000</contentUpdateDate>
  <version>1.1</version>
  <title>Share Patients</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>{{velocity}}
$xwiki.jsx.use('PhenoTips.PatientAccessRightsManagement')##
$xwiki.ssx.use('PhenoTips.PatientAccessRightsManagement')##
$xwiki.jsx.use('data.SharePatients')##
$xwiki.ssfx.use('icons/font-awesome/css/font-awesome.min.css')##
$xwiki.ssx.use('PhenoTips.FontAwesomeIcons')##
##
#set ($serviceDocName = 'PhenoTips.PatientAccessRightsManagement')
#set ($serviceDoc = $xwiki.getDocument($serviceDocName))
#set ($_service = $services.permissions)
{{html wiki='true' clean='false'}}
&lt;script type="text/html" id="access-rights-summary-template"&gt;
(% class="hidden" %)(((
  &lt;input type="hidden" name="serviceURL" value="$serviceDoc.getURL('get', 'outputSyntax=plain')"/&gt;
  #foreach ($l in $_service.listAccessLevels())
    &lt;input type="hidden" name="access-level" value="${l.name}" alt="$!{l.description}" /&gt;
  #end
  #foreach ($l in $_service.listVisibilityOptions())
    &lt;input type="hidden" name="visibility" value="${l.name}" alt="$!{l.label}" title="$!{l.description}" /&gt;{{icon name="${l.name}" /}}
  #end
  &lt;input type="hidden" name="pii-access-level" value="none" alt="Cannot view PII" /&gt;
  &lt;input type="text" name="user" class="suggestUsers" value="" placeholder="$services.localization.render('phenotips.patientAccessRightsManagement.newCollaborator')" id="new-collaborator-input" /&gt;
  &lt;input type="text" name="group" class="suggestWorkgroups" value="" placeholder="$services.localization.render('phenotips.patientAccessRightsManagement.newGroupCollaborator')" id="new-group-input" /&gt;
  &lt;div id="new-owner-input"&gt;&lt;input type="text" name="owner" id="new-owner-user-select" class="suggestUsers" value="" placeholder="$services.localization.render('phenotips.patientAccessRightsManagement.newOwner')" /&gt;&lt;/div&gt;
  #set ($toProcess = $collectionstool.queue)
  #set ($discard = $toProcess.add($xcontext.userReference.toString()))
  #set ($groups = $collectionstool.sortedMap)
  #if ($hasAdmin)
    #set ($groupClassName = 'PhenoTips.PhenoTipsGroupClass')
    #set ($groupTemplateName = 'PhenoTips.PhenoTipsGroupTemplate')
    #set ($query = $services.query.xwql("from doc.object(${groupClassName}) as grp where doc.fullName &lt;&gt; :template").bindValue('template', $groupTemplateName))
    #set ($groupDocs = $xwiki.wrapDocs($query.execute()))
    #foreach ($groupDoc in $groupDocs)
      #set ($discard = $groups.put($groupDoc.documentReference, $groupDoc.plainTitle))
    #end
  #else
    #foreach ($iteration in [0..1000])
      #if ($toProcess.empty)
        #break
      #end
      #set ($item = $toProcess.poll())
      #foreach ($group in $xwiki.wrapDocs($xwiki.rightsmanager.getAllGroupsNamesForMember($item)))
        #set ($groupObj = $group.getObject('PhenoTips.PhenoTipsGroupClass'))
        #if (!$groupObj &amp;&amp; $group.documentReference.name.endsWith(' Administrators'))
          #set ($group = $xwiki.getDocument($services.model.resolveDocument($stringtool.removeEnd($group.documentReference.name, ' Administrators'), $group.documentReference.parent)))
          #set ($groupObj = $group.getObject('PhenoTips.PhenoTipsGroupClass'))
        #end
        #if ($groupObj &amp;&amp; !$groups.containsKey($group.documentReference))
          #set ($discard = $toProcess.add($group.documentReference.toString()))
          #if ("$group.plainTitle" != '')
            #set ($discard = $groups.put($group.documentReference, $group.plainTitle))
          #else
            #set ($discard = $groups.put($group.documentReference, $group.documentReference.name))
          #end
        #end
      #end
    #end
  #end
  #if (!$groups.isEmpty())
  &lt;select name="owner" id="new-owner-group-select"&gt;
    &lt;option value="" selected="selected" class="hidden"&gt;$services.localization.render('phenotips.patientAccessRightsManagement.newOwnerGroup')&lt;/option&gt;
    &lt;optgroup label="$services.localization.render('phenotips.patientAccessRightsManagement.newOwnerGroup')"&gt;
    #foreach ($g in $groups.entrySet())
      &lt;option value="${escapetool.xml($services.rendering.escape($services.model.serialize($g.key), $doc.syntax))}"#if ("$!{ownerReference}" == "$g.key") selected="selected"#end&gt;${escapetool.xml($services.rendering.escape($g.value, $doc.syntax))}&lt;/option&gt;
    #end
    &lt;/optgroup&gt;
  &lt;/select&gt;
  #end
&lt;/script&gt;
{{/html}}
{{/velocity}}

{{velocity output=false}}
#set ($activeFields = $services.recordConfiguration.activeConfiguration.enabledFieldNames)
#set ($dateFormat = "MM/dd/yyyy")
#set ($patientClass = $xwiki.getDocument('PhenoTips.PatientClass').getxWikiClass())
##
#macro (__document_access_rights $class_arg)
{{html clean=false}}
#if ($isGuest)
   &lt;input type="hidden" name="owner/class@${class_arg}~(or#0)" value="PhenoTips.OwnerClass"/&gt;
   &lt;input type="hidden" name="owner/@${class_arg}~(or#0)" value="''"/&gt;
   &lt;input type="hidden" name="owner/null_value@${class_arg}~(or#0)" value="true"/&gt;
#elseif (!$hasAdmin)
  #set ($groups = [])
  #set ($toProcess = $collectionstool.queue)
  #if ($xcontext.userReference)
    #set ($discard = $groups.add($xcontext.userReference))
    #set ($discard = $toProcess.add($xcontext.userReference.toString()))
  #end
  #foreach ($iteration in [0..1000])
    #if ($toProcess.empty)
      #break
    #end
    #set ($item = $toProcess.poll())
    #foreach ($group in $xwiki.wrapDocs($xwiki.rightsmanager.getAllGroupsNamesForMember($item)))
      #set ($groupObj = $group.getObject('PhenoTips.PhenoTipsGroupClass'))
      #if (!$groupObj &amp;&amp; $group.documentReference.name.endsWith(' Administrators'))
        #set ($group = $xwiki.getDocument($services.model.resolveDocument($stringtool.removeEnd($group.documentReference.name, ' Administrators'), $group.documentReference.parent)))
        #set ($groupObj = $group.getObject('PhenoTips.PhenoTipsGroupClass'))
      #end
      #if ($groupObj &amp;&amp; !$groups.contains($group.documentReference.toString()))
        #set ($discard = $toProcess.add($group.documentReference.toString()))
        #set ($discard = $groups.add($escapetool.sql($group.documentReference.toString())))
      #end
    #end
  #end
   &lt;input type="hidden" name="owner/class@${class_arg}~(or#0)" value="PhenoTips.OwnerClass"/&gt;
   &lt;input type="hidden" name="owner/match@${class_arg}~(or#0)" value="exact"/&gt;
   #foreach ($group in $groups)
       &lt;input type="hidden" name="owner/@${class_arg}~(or#0)" value="$group"/&gt;
   #end
   &lt;input type="hidden" name="collaborator/class@${class_arg}~(or#0)~(and#0)" value="PhenoTips.CollaboratorClass"/&gt;
   &lt;input type="hidden" name="collaborator/match@${class_arg}~(or#0)~(and#0)" value="exact"/&gt;
   #foreach ($group in $groups)
       &lt;input type="hidden" name="collaborator/@${class_arg}~(or#0)~(and#0)" value="$group"/&gt;
   #end
   &lt;input type="hidden" name="access/class@${class_arg}~(or#0)~(and#0)" value="PhenoTips.CollaboratorClass"/&gt;
   &lt;input type="hidden" name="access/match@${class_arg}~(or#0)~(and#0)" value="exact"/&gt;
   &lt;input type="hidden" name="access/@${class_arg}~(or#0)~(and#0)" value="manage"/&gt;
#end
{{/html}}
#end
##
#macro(__filters_display $cssClass)
(% class="filters $!cssClass" %)
#__document_access_rights("PhenoTips.PatientClass")
#end
{{/velocity}}

{{velocity}}
$xwiki.ssfx.use('uicomponents/suggest/suggestPicker.css', true)##
$xwiki.jsfx.use('uicomponents/suggest/suggestPicker.js', true)##
$xwiki.ssfx.use('uicomponents/widgets/userpicker/userPicker.css', true)##
$xwiki.jsfx.use('uicomponents/widgets/userpicker/userPicker.js', true)##
$xwiki.ssx.use('PhenoTips.DatabaseFilters')##
$xwiki.ssx.use('PhenoTips.Skin', {'colorTheme' : "$xwiki.getSpacePreference('colorTheme')"})##
$xwiki.jsx.use('PhenoTips.DBWebHomeSheet')##
$xwiki.ssx.use('PhenoTips.DBWebHomeSheet')##
$xwiki.jsfx.use('uicomponents/widgets/exportData.js', true)####
$xwiki.ssfx.use('uicomponents/widgets/exportData.css', true)####
$xwiki.ssx.use('PhenoTips.Widgets')##
$xwiki.jsx.use('PhenoTips.Widgets')##
$xwiki.jsx.use('XWiki.DateTimePicker')##
$xwiki.ssx.use('XWiki.DateTimePicker')##
$xwiki.jsfx.use('js/scriptaculous/dragdrop.js')##
$xwiki.jsx.use('PhenoTips.PushPatient')##
$xwiki.ssx.use('PhenoTips.PushPatient')##
$xwiki.jsx.use('PhenoTips.PatientConsent')##
$xwiki.ssx.use('PhenoTips.PatientConsent')##
$xwiki.jsx.use('PhenoTips.FamilyDataTableCode')##
$xwiki.ssx.use('PhenoTips.FamilyDataTableCode')##
#set ($config = $xwiki.getDocument('data.WebHome').getObject('PhenoTips.DBConfigurationClass'))
#set ($patientClassName = 'PhenoTips.PatientClass')
#if ($config)
#set ($configuredColumns = [ 'reference/PhenoTips.FamilyReferenceClass', 'doc.name', 'first_name', 'last_name', 'collaborator', 'collaboratorGroups', 'owner/PhenoTips.OwnerClass'])
#if (!$configuredColumns &amp;&amp; !($configuredColumns.length &gt; 0))
  #set ($configuredColumns = 'doc.name')
#end
#set ($columns = [])
#set ($columnFilters = {})
#foreach($c in $configuredColumns)
  #set($pieces = $c.split('/', 2))
  #set ($discard = $columns.add($pieces[0]))
  #if ($pieces.size() &gt; 1 &amp;&amp; $pieces[1] != $patientClassName)
    #set ($discard = $columnFilters.put("${pieces[0]}/class", $pieces[1]))
  #end
#end
#set ($columnsProperties = {
  '_actions' : {'actions': ['edit']}
})
#set($columnFiltersContent = '')
#foreach ($f in $columnFilters.keySet())
  #set($columnFiltersContent = "${columnFiltersContent}&lt;input type='hidden' name='$escapetool.xml($f)' value='$escapetool.xml($columnFilters.get($f))'/&gt;")
#end
#foreach ($column in $columns)
  #set ($isFilterable = ($column.toLowerCase().indexOf('date') &lt; 0) &amp;&amp; ($column != 'doc.creator') &amp;&amp; ($column != 'doc.author'))
  #set ($discard = $columnsProperties.put($column, { 'type' : 'text', 'link' : 'field', 'size' : 7, 'filterable' : $isFilterable, 'sortable': true}))
#end
#set ($discard = $columnsProperties.put('collaborator', { 'displayName': 'Collaborators', 'class': 'PhenoTips.CollaboratorClass', 'type' : 'text', 'link' : 'field', 'size' : 7, 'filterable' : false, 'sortable': false }))
#set ($discard = $columnsProperties.put('collaboratorGroups', { 'propertyName': 'collaborator', 'displayName': 'Collaborator Groups', 'class': 'PhenoTips.CollaboratorClass', 'type' : 'text', 'link' : 'field', 'size' : 7, 'filterable' : false, 'sortable': false }))
#set ($discard = $columnsProperties.get('doc.name').put('link', 'view'))
#set ($discard = $columnsProperties.get('doc.name').put('sortable', false))
#set ($discard = $columnsProperties.external_id.put('link', 'view'))
#set ($discard = $columnsProperties.last_name.put('filterable', false))
#set ($discard = $columnsProperties.last_name.put('sortable', false))
#set ($discard = $columnsProperties.last_name.put('class', 'PhenoTips.EncryptedPatientDataClass'))
#set ($discard = $columnsProperties.first_name.put('filterable', false))
#set ($discard = $columnsProperties.first_name.put('sortable', false))
#set ($discard = $columnsProperties.first_name.put('class', 'PhenoTips.EncryptedPatientDataClass'))
#set ($discard = $columnsProperties.owner.put('type', 'hidden'))
##  toggle-filters
#set ($topFilters = $doc.getRenderedContent("(% class='xform' %)((( {{html clean='false'}}&lt;span class='buttonwrapper'&gt;&lt;a class='button toggle-filters' href='#'&gt;$services.localization.render('phenotips.allData.filterButton')&lt;/a&gt;&lt;/span&gt;{{/html}}
{{velocity}}#__filters_display('xform'){{/velocity}})))", "xwiki/2.1"))
#set ($discard = $columns.add('_actions'))
##
#set ($options = {
  'className'         : $patientClassName,
  'translationPrefix' : 'patient.livetable.',
  'rowCount'          : 25,
  'maxPages'          : 10,
  'selectedColumn'    : 'reference',
  'defaultOrder'      : 'asc',
  'topFilters'        : "${topFilters}${columnFiltersContent}",
  'resultPage'        : '/rest/entities'
})
### WAS HERE
#if ("$!config.getProperty('livetableRows').value" != '' &amp;&amp; $config.getProperty('livetableRows').value &gt; 0)
  #set ($options.rowCount = $config.getProperty('livetableRows').value)
#end
#livetable('patients' $columns $columnsProperties $options)
$xwiki.ssfx.use('js/xwiki/table/livetable.css', {'colorTheme' : "$xwiki.getSpacePreference('colorTheme')", 'forceSkinAction' : true})##
#else
{{warning}}$services.localization.render('phenotips.configurationMissing'){{/warning}}
#end
{{/velocity}}

{{velocity}}
{{html wiki='true' clean='false'}}
&lt;div id="bulk-permissions-manager"&gt;
  &lt;h3&gt;Bulk permission change&lt;/h3&gt;
  &lt;strong&gt;Choose collaborators and permissions:&lt;/strong&gt;
  &lt;div class="hidden"&gt;&lt;input type="text" name="user" class="suggestUsers" value="" placeholder="New collaborator" id="bulk-new-collaborator-input" /&gt;&lt;/div&gt;
  &lt;div class="hidden"&gt;&lt;input type="text" name="group" class="suggestWorkgroups" value="" placeholder="New collaborating group" id="bulk-new-group-input" /&gt;&lt;/div&gt;
  &lt;span class="buttonwrapper save"&gt;&lt;input value="Save" class="button" type="button" id="bulk-save-button"&gt;&lt;/span&gt;
  &lt;p class="save-note"&gt;Clicking "Save" will apply these collaborator settings to all patients selected above.&lt;/p&gt;
&lt;/div&gt;
{{/html}}
{{/velocity}}</content>
  <object>
    <name>data.SharePatients</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>bd025b89-4422-4f9a-b9e9-d9ff2fefd2be</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>(function() {
  function init() {
    // Hide "Advanced Filters" section
    $$('.tipfilters')[0].hide();

    initSelectAllButtons();
    initSelectedPatientCount();
    document.observe('xwiki:livetable:patients:displayComplete', renderSelectedPatientsCount);
  }

  (XWiki &amp;&amp; XWiki.domIsLoaded &amp;&amp; init()) || document.observe("xwiki:dom:loaded", init);

  // Object to store the list of currently selected patients
  var selectedPatients = {};

  /* Functions for initialization */
  function initSelectAllButtons() {
    // Set up de/select all buttons
    var selectAllBtn = new Element('span', {class: 'buttonwrapper tool edit'});
    selectAllBtn.update('&lt;span class="wikiinternallink"&gt;&lt;a class="button" href="#"&gt;&amp;nbsp;&lt;span class="fa fa-check-square"&gt;&amp;nbsp;&lt;/span&gt; Select all displayed&lt;/a&gt;&lt;/span&gt;');
    var deselectAllBtn = new Element('span', {class: 'buttonwrapper tool edit'});
    deselectAllBtn.update('&lt;span class="wikiinternallink"&gt;&lt;a class="button" href="#"&gt;&amp;nbsp;&lt;span class="fa fa-square"&gt;&amp;nbsp;&lt;/span&gt; Deselect all displayed&lt;/a&gt;&lt;/span&gt;');
    selectAllBtn.observe('click', function(e) { e.preventDefault(); toggleAllPatientsSelected($('patients'), true) });
    deselectAllBtn.observe('click', function(e) { e.preventDefault(); toggleAllPatientsSelected($('patients'), false)});

    $('patients').insert({ before: selectAllBtn });
    $('patients').insert({ before: deselectAllBtn });
  }

  function initSelectedPatientCount() {
    var countEl = new Element('span', { id: 'selected-patients-count' });
    $('patients').insert({
      after: countEl
    });
    renderSelectedPatientsCount();
  }
  /***/

  /* Functions to make row content dynamic */
  function attachCheckboxes(e) {
    // Set up checkboxes
    if (e.memo.data.reference !== '-' &amp;&amp; isNewFamilyRow(e.memo.row)) {
      var famCheckbox = new Element('input', { type: 'checkbox' });
      e.memo.row.down('td.reference').insert({
        top: famCheckbox
      });
      famCheckbox.observe('click',  function(e) { handleFamilyCheckboxToggled(e.target); });
    } else if (!isNewFamilyRow(e.memo.row)) {
      e.memo.row.down('td.reference a').hide();
    }
    e.memo.row.store('familyId', e.memo.data.reference);

    var patientCheckbox = new Element('input', { type: 'checkbox' });
    e.memo.row.down('td.doc_name').insert({
      top: patientCheckbox
    });
    if (selectedPatients[e.memo.data.doc_name]) {
      patientCheckbox.checked = true;
      handlePatientCheckboxToggled(patientCheckbox);
    }
    patientCheckbox.observe('click', function(e) { handlePatientCheckboxToggled(e.target); } );
  }
  function handleFamilyCheckboxToggled(inputEl) {
    var firstFamilyRowEl = inputEl.up('tr');
    var familyRowEls = getFamilySubRows(firstFamilyRowEl);
    familyRowEls.push(firstFamilyRowEl);
    familyRowEls.each(function(rowEl) {
      var patientInputEl = rowEl.down('td.doc_name input[type=checkbox]');
      patientInputEl.checked = inputEl.checked;
      syncSelectedPatientsObj(patientInputEl);
    });
  }
  function handlePatientCheckboxToggled(inputEl) {
    syncSelectedPatientsObj(inputEl);
    syncFamilyCheckbox(inputEl);
  }
  function syncSelectedPatientsObj(inputEl) {
    var patientId = inputEl.next('a').innerHTML;
    if (inputEl.checked) {
      selectedPatients[patientId] = true;
      renderSelectedPatientsCount()
    } else {
      (patientId in selectedPatients) &amp;&amp; delete selectedPatients[patientId];
      renderSelectedPatientsCount()
    }
  }
  function renderSelectedPatientsCount() {
    var patientCount = getSelectedPatientIdsInCurrPage().length;
    $('selected-patients-count').update(patientCount + (patientCount === 1 ? ' patient' : ' patients') + ' selected');
  }
  function syncFamilyCheckbox(inputEl) {
    var thisFamilyId = inputEl.up('tr').retrieve('familyId');
    if (thisFamilyId) {
      var familyRows = inputEl.up('tbody').childElements().filter(function(rowEl) {
        return rowEl.retrieve('familyId') === thisFamilyId;
      });
      var allChecked = true;
      for (var i = 0; i &lt; familyRows.length; i++) {
        if (!familyRows[i].down('td.doc_name input').checked) {
          allChecked = false;
          break;
        }
      }
      var firstRow = familyRows[0];
      firstRow.down('td.reference input').checked = allChecked;
    }
  }

  function attachExpanders(e) {
    // Set up expand/collapse control
    if (e.memo.data.reference &amp;&amp; isNewFamilyRow(e.memo.row)) {
      var firstFamilyRowEl = e.memo.row;
      // Wrap the cell contents in spans so that they can be properly hidden
      firstFamilyRowEl.select('td.first_name, td.last_name, td.collaborator, td.collaboratorGroups, td.actions').each(function(tdEl) {
        var wrapperSpanEl = new Element('span');
        wrapperSpanEl.innerHTML = tdEl.innerHTML;
        tdEl.update(wrapperSpanEl);
      });
      var expandCollapseEl = new Element('span', { class: 'expand-tool expanded' }).update('▼');
      expandCollapseEl.observe('click', function() {
        var familySubRows = getFamilySubRows(firstFamilyRowEl);
        var isExpanded = this.hasClassName('expanded');
        this.update(isExpanded ? '►' : '▼');
        var numPatients = getFamilySubRows(firstFamilyRowEl).length + 1;
        familySummaryEl.update(numPatients + (numPatients === 1 ? ' patient' : ' patients'));
        familySubRows.invoke(isExpanded ? 'hide' : 'show');
        this.toggleClassName('expanded', !isExpanded);
        firstFamilyRowEl.toggleClassName('summary-mode', isExpanded);
        familySummaryEl.toggle(isExpanded);
      });
      firstFamilyRowEl.down('td.reference').insert({
        top: expandCollapseEl
      });
      var familySummaryEl = new Element('span', { class: 'family-summary' });
      firstFamilyRowEl.down('td.doc_name').insert({
        top: familySummaryEl
      });
      familySummaryEl.hide();
    }
  }

  function attachModifyButtons(e) {
    // Add "Modify" button
    var modifyBtn = new Element('span', {class: 'buttonwrapper tool edit'});
    modifyBtn.update('&lt;span class="wikiinternallink"&gt;&lt;a class="button" href="#"&gt;&amp;nbsp;&lt;span class="fa fa-wrench" title="Modify visibility and collaborations"&gt;&amp;nbsp;&lt;/span&gt; Modify permissions&lt;/a&gt;&lt;/span&gt;');
    e.memo.row.down('td.actions').insert(modifyBtn);
    modifyBtn.observe('click', function(event) {
      modifyBtn._mgr = modifyBtn._mgr || new PhenoTips.widgets.SharePatientsAccessRightsManager(e.memo.data.doc_name, modifyBtn, e.memo.data);
      modifyBtn._mgr.handleLauncherClick(event);
    });
    // Hide "Edit" button
    e.memo.row.down('td.actions .actionedit').hide();
  }

  function splitCollaboratorsCols(e){
    // Split up collaborators
    var collabVals = e.memo.data.collaborator_value.split('|');
    var collabNames = e.memo.data.collaborator.split('|');
    var collabUrls = e.memo.data.collaborator_url.split('|');

    var collabsColContents = [], collabGroupsContents = [];
    for (var i = 0; i &lt; collabVals.length; i++) {
      if (collabVals[i]) {
        var resolved = XWiki.Model.resolve(collabVals[i], XWiki.EntityType.DOCUMENT);
        var linkEl = (new Element('a', { href: collabUrls[i] }).update(collabNames[i])).outerHTML;
        (resolved.parent.name === 'Groups' ? collabGroupsContents : collabsColContents).push(linkEl);
      }
    }
    e.memo.row.down('td.collaborator').update(collabsColContents.join(', '));
    e.memo.row.down('td.collaboratorGroups').update(collabGroupsContents.join(', '));
  }

  function toggleAllPatientsSelected(tableEl, selected) {
    tableEl.select('td.doc_name input').each(function(inputEl) {
      inputEl.checked = selected;
      handlePatientCheckboxToggled(inputEl);
    })
  }
  /***/

  /* Utils */
  function getFamilySubRows(thisRow) {
    var rows = thisRow.siblings();
    return rows.filter(function(row) {
      return row != thisRow &amp;&amp; row.down('td.reference a').innerHTML === thisRow.down('td.reference a').innerHTML;
    });
  }

  function isNewFamilyRow(thisRow) {
    var prevRow = thisRow.previous('tr');
    var prevRowFamName = (prevRow &amp;&amp; prevRow.down('td.reference a') &amp;&amp; prevRow.down('td.reference a').innerHTML) || null;
    var thisRowFamName = (thisRow &amp;&amp; thisRow.down('td.reference a') &amp;&amp; thisRow.down('td.reference a').innerHTML) || null;
    return prevRowFamName !== thisRowFamName;
  }

  function refreshDisplayedTableRows() {
    var table = window.livetable_patients;
    var start = Math.max(table.lastOffset, 1);
    var end   = table.limit;
    table.clearCache();
    table.getRows(start, end, start, end);
  }

  function getSelectedPatientIdsInCurrPage() {
    var curPagePatientIds = [];
    $$('#patients-display tr td.doc_name a').each(function(anchorEl) {
      curPagePatientIds.push(anchorEl.innerHTML);
    });
    return curPagePatientIds.intersect(Object.keys(selectedPatients));
  }
  /***/

  /* Set up bulk collaborator manager section */
  function initBulkCollaboratorsManager() {
    var _this = this;
    var table = new Element('table', {id : 'bulk-collaborators'});
    // Body: collaborators
    this._collaboratorsList = new Element('tbody');
    // Foot: input for adding a new collaborator
    var newCollaborator = new Element('tfoot');
    var newCollaboratorInput = $('new-collaborator-input') || '';
    var newGroupInput = $('new-group-input') || '';
    newCollaborator.insert(new Element('td', {'colspan' : 4}).insert(newCollaboratorInput).insert('&lt;br/&gt;').insert(newGroupInput));
    // Add the two sections
    this._collaboratorsManager.insert(table.insert(newCollaborator).insert(this._collaboratorsList));
    // Capture selection events
    newCollaborator.select('input').invoke('observe', "xwiki:suggest:selected", function(event) {
       if (event.memo) {
         var id = event.memo.value;
         var existingCollaborator = _this._collaboratorsList.down('tr input[value="' + id.replace('"', '\\"') + '"]');
         if (existingCollaborator) {
           existingCollaborator.up('tr').addClassName('highlight');
           // remove highlight after a while
           new PeriodicalExecuter(function(pe) {
              existingCollaborator.up('tr').removeClassName('highlight');
              pe.stop();
           }, 5);
         } else {
           var name = event.memo.info;
           var type = event.findElement('input').name;
           var newCollaborator = {'id' : id , 'name' : name , 'type' : type};
           _this._addCollaborator(newCollaborator, true);
           event.findElement().value = '';
         }
       }
    });
  }

  function addBulkCollaborator(c, highlight) {
    var row = new Element('tr', {'class' : (highlight === true ? 'new' : '')});
    row.insert(new Element('td').insert(new Element('span', {'class' : 'fa fa-' + c.type}).update(' ')));
    row.insert(new Element('td')
            .insert(c.name)
            .insert(new Element('input', {'type': 'hidden', 'name' : 'collaborator', 'value' : c.id}))
    );
    var rights = this._generateCollaborationOptions('accessLevel', c.accessLevel)
    row.insert(rights.wrap('td'));
    var deleteTool = new Element('span', {'class' : 'tool delete fa fa-times', title : "$services.localization.render('phenotips.patientAccessRightsManagement.modifyRemoveCollaborator')"});
    row.insert(deleteTool.wrap('td'));
    deleteTool.observe('click', function(event) {
      event.findElement('tr').remove();
    });
    this._collaboratorsList.insert(row);
  }
  /***/

  Event.observe(document, 'xwiki:livetable:patients:newrow', function(e) {
    splitCollaboratorsCols(e);
    attachCheckboxes(e);
    attachExpanders(e);
    attachModifyButtons(e);
  });

  (function (PhenoTips) {
    var widgets = PhenoTips.widgets = PhenoTips.widgets || {};
    widgets.SharePatientsAccessRightsManager = Class.create(widgets.AccessRightsManager, {
      initialize : function (patientId, triggerEl, rowData) {
        this.patientId = patientId;
        this._editorLauncher = triggerEl;
        this._rowData = rowData;
        this._addFakeSummaryEl();

        this._element = $('access-rights-summary');
        if (!this._element) { return; }
        this._serviceURL = this._element.down('input[name="serviceURL"]');
        if (this._serviceURL) {
          this._serviceURL = this._serviceURL.value;
        } else {
          return;
        }

        // ---------------------------------------------------------------------
        // Initialize the manager UI
        // ---------------------------------------------------------------------
        this._initAccessLevels();
        this._initManagerUI();
        // Override default dialog behaviour -- we want to remove on close in order
        // to prevent issues with duplicate DOM IDs
        var _this = this;
        this._dialog = new PhenoTips.widgets.ModalPopup(this._container, false, {
          'title': "$services.localization.render('phenotips.patientAccessRightsManagement.heading')".replace("__patientID__", this.patientId),
          'verticalPosition': 'top',
          'removeOnClose': true,
          'onClose': function() {
            _this._removeFakeSummaryEl();
            refreshDisplayedTableRows();
          }
        });

        // ---------------------------------------------------------------------
        // Attach manager launcher behavior:
        // ---------------------------------------------------------------------
        // ---------------------------------------------------------------------
        // Initialization done
        // ---------------------------------------------------------------------
      },
      _addFakeSummaryEl: function() {
        var fakeSummaryElHtml = $('access-rights-summary-template').innerHTML;
        var fakeSummaryEl = new Element('div', {id: 'access-rights-summary'}).update(fakeSummaryElHtml);
        fakeSummaryEl.hide();
        this._editorLauncher.insert({ before: fakeSummaryEl });
        document.fire('xwiki:dom:updated', { elements: [fakeSummaryEl] });

        // Fill owner element
        var ownerContainerEl = new Element('span', { 'class': 'access-rights-info' });

        var ownerEl = new Element('a', { 'class': 'owner' });

        var ownerResolved = XWiki.Model.resolve(this._rowData.owner_value, XWiki.EntityType.DOCUMENT);
        var ownerUrl = new XWiki.Document(ownerResolved.name, ownerResolved.parent.name).getURL();
        var ownerIcon = new Element('span', {class: 'fa fa-' + (ownerResolved.parent.name === 'Groups' ? 'users' : 'user')});

        ownerEl.update(this._rowData.owner);
        ownerEl.insert({top: ownerIcon});
        ownerEl.href = ownerUrl;
        ownerContainerEl.insert(ownerEl);

        fakeSummaryEl.insert(ownerContainerEl);
      },
      _removeFakeSummaryEl: function() {
        $('access-rights-summary').remove();
      },
      handleLauncherClick: function(event) {
        event.stop();
        event.findElement().blur();
        this._dialog &amp;&amp; this._dialog.createDialog();
        this._launchEditor();
      }
    });

    widgets.SharePatientsBulkAccessRightsManager = Class.create({
      initialize: function() {
        this._initAccessLevels();

        this._collaboratorsManager = new Element('div');
        $('bulk-permissions-manager').down('.buttonwrapper.save').insert({ before: this._collaboratorsManager });

        this._initCollaboratorsManager();
        this._initSubmitButton();
      },

      _initAccessLevels : function() {
        var levels = {'access-level' : [], 'pii-access-level' : []};
        // Create a temporary element for extracting the access levels and visibility
        var fakeSummaryElHtml = $('access-rights-summary-template').innerHTML;
        var fakeSummaryEl = new Element('div').update(fakeSummaryElHtml);

        fakeSummaryEl.select('input[name="access-level"], input[name="pii-access-level"]').each(function (item) {
          levels[item.name].push({id : item.value, name : item.alt, title : item.title, icon: item.next('span.fa') || ''});
        });
        this.ACCESS_LEVELS = levels['access-level'];
        this.PII_ACCESS_LEVELS = levels['pii-access-level'];
      },

      _initCollaboratorsManager : function () {
        var _this = this;
        var table = new Element('table', {id : 'bulk-collaborators'});
        // Body: collaborators
        this._collaboratorsList = new Element('tbody');
        // Foot: input for adding a new collaborator
        var newCollaborator = new Element('tfoot');
        var newCollaboratorInput = $('bulk-new-collaborator-input') || '';
        var newGroupInput = $('bulk-new-group-input') || '';
        newCollaborator.insert(new Element('td', {'colspan' : 5}).insert(newCollaboratorInput).insert('&lt;br/&gt;').insert(newGroupInput));
        // Add the two sections
        this._collaboratorsManager.insert(table.insert(newCollaborator).insert(this._collaboratorsList));
        // Capture selection events
        newCollaborator.select('input').invoke('observe', "xwiki:suggest:selected", function(event) {
           if (event.memo) {
             var id = event.memo.value;
             var existingCollaborator = _this._collaboratorsList.down('tr input[value="' + id.replace('"', '\\"') + '"]');
             if (existingCollaborator) {
               existingCollaborator.up('tr').addClassName('highlight');
               // remove highlight after a while
               new PeriodicalExecuter(function(pe) {
                  existingCollaborator.up('tr').removeClassName('highlight');
                  pe.stop();
               }, 5);
             } else {
               var name = event.memo.info;
               var type = event.findElement('input').name;
               var newCollaborator = {'id' : id , 'name' : name , 'type' : type};
               _this._addCollaborator(newCollaborator, true);
               event.findElement().value = '';
             }
           }
        });
      },

      /* Expected format for the collaborator object c : {id : 'string', 'type' : 'string', name : 'string', 'accessLevel' : 'string' } */
      _addCollaborator : function (c, highlight) {
        var row = new Element('tr', {'class' : (highlight === true ? 'new' : '')});
        row.insert(new Element('td').insert(new Element('span', {'class' : 'fa fa-' + c.type}).update(' ')));
        row.insert(new Element('td')
                .insert(c.name)
                .insert(new Element('input', {'type': 'hidden', 'name' : 'collaborator', 'value' : c.id}))
        );
        var rights = this._generateCollaborationOptions('accessLevel', c.accessLevel, 'ACCESS_LEVELS');
        var piiRights = this._generateCollaborationOptions('piiAccessLevel', c.piiAccessLevel, 'PII_ACCESS_LEVELS');
        row.insert(rights.wrap('td'));
        row.insert(piiRights.wrap('td'));
        var deleteTool = new Element('span', {'class' : 'tool delete fa fa-times', title : "$services.localization.render('phenotips.patientAccessRightsManagement.modifyRemoveCollaborator')"});
        row.insert(deleteTool.wrap('td'));
        deleteTool.observe('click', function(event) {
          event.findElement('tr').remove();
        });
        this._collaboratorsList.insert(row);
      },

      _generateCollaborationOptions : function (name, value, collabType) {
        var selected = value || this[collabType][0].id;
        var result = new Element('select', {name : name});
        this[collabType].each(function (l) {
              var o = new Element('option', {value : l.id}).update(l.name);
              result.insert(o);
        });
        for (var i = 0; i &lt; result.options.length; i++ ) {
          if (result.options[i].value == value) {
            result.options[i].selected = true;
            break;
          }
        }
        return result;
      },

      _initSubmitButton: function() {
        $('bulk-save-button').observe('click', this._handleSubmitButtonClick);
      },

      _handleSubmitButtonClick: function() {
        var selectedPatientIds = getSelectedPatientIdsInCurrPage();
        if (selectedPatientIds.length === 0) {
          new XWiki.widgets.Notification("No patients are selected, nothing to save", "error");
          return;
        }

        // Assemble request object
        var req = {
          data: []
        };

        var collabsObj = {collaborators: []};
        var collabsRows = $('bulk-collaborators').select('tr.new');
        for (var i = 0; i &lt; collabsRows.length; i++) {
          collabsObj.collaborators.push({
            id: collabsRows[i].down('input[name=collaborator]').value,
            level: collabsRows[i].down('select[name=accessLevel]').getValue(),
            piiLevel: collabsRows[i].down('select[name=piiAccessLevel]').getValue(),
          });
        }

        
        for (var i = 0; i &lt; selectedPatientIds.length; i++) {
          req.data.push({
            id: selectedPatientIds[i],
            type: 'patient',
            collaborators: collabsObj
          });
        }

        var savingNotification = new XWiki.widgets.Notification("Saving", "inprogress");
        new Ajax.Request('/rest/permissions?method=PATCH', {
          method: 'post',
          postBody: JSON.stringify(req),
          contentType: 'application/json',
          onSuccess: function() {
            savingNotification.replace(new XWiki.widgets.Notification("Saved", 'done'));
            refreshDisplayedTableRows();
          },
          onFailure: function() {
            savingNotification.replace(new XWiki.widgets.Notification('Saving permissions failed', 'error'));
          },
        });
      }
    });
  }(PhenoTips || {}));

  document.observe("xwiki:dom:loaded", function() {
    new PhenoTips.widgets.SharePatientsBulkAccessRightsManager();
  });
})();</code>
    </property>
    <property>
      <name>LiveTable modifications</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>data.SharePatients</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>1f6e4eb4-7590-4f4c-98b1-2e29bb995a87</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#template("colorThemeInit.vm")

#patients tr.summary-mode td.first_name &gt; span,
#patients tr.summary-mode td.last_name &gt; span,
#patients tr.summary-mode td.collaborator &gt; span,
#patients tr.summary-mode td.collaboratorGroups &gt; span,
#patients tr.summary-mode td.actions &gt; span,
#patients tr.summary-mode td.doc_name a,
#patients tr.summary-mode td.doc_name input {
  visibility: hidden;
}
#patients .family-summary {
  font-style: italic;
}
#selected-patients-count {
  font-weight: bold;
}

#bulk-permissions-manager {
  overflow: auto;
}
#bulk-permissions-manager .save, 
#bulk-permissions-manager .save-note {
  float: left;
} 
#bulk-permissions-manager .save-note {
  font-size: 90%;
  font-style: italic;
  color: #777;
}
#bulk-permissions-manager h4 {
  margin-bottom: 0;
}

#bulk-collaborators tbody td {
  border-bottom: 1px solid $theme.borderColor;
}
#bulk-collaborators tfoot td {
  border-top: 3px solid $theme.borderColor;
}
#bulk-collaborators .tool.delete {
  color: $theme.notificationErrorColor;
  cursor: pointer;
}
#bulk-collaborators .highlight {
  background-color: $theme.highlightColor !important;
  color: $theme.notificationErrorColor;
}

#bulk-collaborators .new {
  background-color: $theme.highlightColor;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>Bulk permissions manager</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>data.SharePatients</name>
    <number>0</number>
    <className>XWiki.XWikiRights</className>
    <guid>56a40392-4596-4769-8418-9cba018de2b8</guid>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <property>
      <allow>1</allow>
    </property>
    <property>
      <groups>XWiki.XWikiAdminGroup,</groups>
    </property>
    <property>
      <levels>edit,comment</levels>
    </property>
    <property>
      <users/>
    </property>
  </object>
</xwikidoc>
