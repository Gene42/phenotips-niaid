/*
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
package edu.toronto.cs.phenotips.ctakes;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.ctakes.chunker.ae.Chunker;
import org.apache.ctakes.chunker.ae.adjuster.ChunkAdjuster;
import org.apache.ctakes.contexttokenizer.ae.ContextDependentTokenizerAnnotator;
import org.apache.ctakes.core.ae.CopyAnnotator;
import org.apache.ctakes.core.ae.OverlapAnnotator;
import org.apache.ctakes.core.ae.SentenceDetector;
import org.apache.ctakes.core.ae.SimpleSegmentAnnotator;
import org.apache.ctakes.core.ae.TokenizerAnnotatorPTB;
import org.apache.ctakes.dictionary.lookup.ae.DictionaryLookupAnnotator;
import org.apache.ctakes.postagger.POSTagger;
import org.apache.uima.analysis_engine.AnalysisEngine;
import org.apache.uima.analysis_engine.AnalysisEngineDescription;
import org.apache.uima.resource.ExternalResourceDependency;
import org.apache.uima.resource.ExternalResourceDescription;
import org.apache.uima.resource.impl.ExternalResourceDependency_impl;
import org.apache.uima.resource.metadata.ConfigurationParameter;
import org.apache.uima.resource.metadata.TypeSystemDescription;
import org.apache.uima.resource.metadata.impl.TypeSystemDescription_impl;
import org.uimafit.factory.AnalysisEngineFactory;
import org.uimafit.factory.ConfigurationParameterFactory;
import org.uimafit.factory.ExternalResourceFactory;
import org.uimafit.factory.ResourceCreationSpecifierFactory;
import org.uimafit.factory.TypeSystemDescriptionFactory;
import org.xwiki.component.phase.Initializable;
import org.xwiki.component.phase.InitializationException;
import org.xwiki.script.service.ScriptService;


public abstract class AbstractScriptService implements ScriptService, Initializable
{
    /**Analysis Engine Used. */
    protected AnalysisEngine analysisEngine;

    public void initialize() throws InitializationException
    {
        TypeSystemDescription maintypeSystem  =  TypeSystemDescriptionFactory.createTypeSystemDescription("org.apache.ctakes.typesystem.types.TypeSystem");

        try{
            //Segmentation 
            AnalysisEngineDescription simpleSegmentDesc  =  AnalysisEngineFactory.createPrimitiveDescription(SimpleSegmentAnnotator.class);       


            //Tokenizer 
            AnalysisEngineDescription tokenizerDesc  =  AnalysisEngineFactory.createPrimitiveDescription(TokenizerAnnotatorPTB.class, maintypeSystem);

            
            
            //Sentence Detection
            String url = this.getClass().getResource("/ctakes-resources/cTAKES/SentenceDetection/sdmed.mod").toString();
           // url = url.substring(4);
            System.out.println(url);
            ExternalResourceDescription erd  =  ExternalResourceFactory.createExternalResourceDescription("MaxentModelFile", org.apache.ctakes.core.resource.SuffixMaxentModelResourceImpl.class, url);     
            AnalysisEngineDescription sentenceDetectorDesc  =  AnalysisEngineFactory.createPrimitiveDescription(SentenceDetector.class, "MaxentModel", erd);
            ExternalResourceFactory.createDependency(sentenceDetectorDesc, "MaxentModel", org.apache.ctakes.core.resource.MaxentModelResource.class);


            //context dependent tokenizer 
            AnalysisEngineDescription contextDependentTokenizerDesc  =  AnalysisEngineFactory.createPrimitiveDescription(ContextDependentTokenizerAnnotator.class);


            //POS Tagger
            AnalysisEngineDescription posTaggerdesc  =  AnalysisEngineFactory.createPrimitiveDescription(POSTagger.class,maintypeSystem,POSTagger.POS_MODEL_FILE_PARAM, "ctakes-resources/cTAKES/POSTagger/mayo-pos.zip", POSTagger.CASE_SENSITIVE_PARAM, true);


           //Chunker
            url = this.getClass().getResource("/ctakes-resources/cTAKES/Chunker/chunk-model.claims-1.5.zip").toString();
            //url = url.substring(4);
            System.out.println(url);
            ExternalResourceDescription chunkererd  =  ExternalResourceFactory.createExternalResourceDescription("ChunkerModelFile", org.apache.ctakes.core.resource.FileResourceImpl.class, url);     
            AnalysisEngineDescription chunkerDesc  =  AnalysisEngineFactory.createPrimitiveDescription(Chunker.class, maintypeSystem,Chunker.CHUNKER_MODEL_FILE_PARAM,"ctakes-resources/cTAKES/Chunker/chunk-model.claims-1.5.zip",Chunker.CHUNKER_CREATOR_CLASS_PARAM,"org.apache.ctakes.chunker.ae.DefaultChunkCreator","ChunkerModel",chunkererd);
            ExternalResourceFactory.createDependency(chunkerDesc, "ChunkerModel", org.apache.ctakes.core.resource.FileResource.class);


            //Chunk Adjuster NN
            String[] chunk_pattern  =  new String[2];
            chunk_pattern[0] = "NN";
            chunk_pattern[1] = "NN";
            AnalysisEngineDescription chunkAdjusterDesc  =  AnalysisEngineFactory.createPrimitiveDescription(ChunkAdjuster.class, null,ChunkAdjuster.PARAM_CHUNK_PATTERN, chunk_pattern, ChunkAdjuster.PARAM_EXTEND_TO_INCLUDE_TOKEN, 1);


            //chunk adjuster PN
            String[] chunk_patternPN  =  new String[3];
            chunk_patternPN[0] = "NN";
            chunk_patternPN[1] = "PN";
            chunk_patternPN[2] = "NN";
            AnalysisEngineDescription chunkAdjusterPNDesc  =  AnalysisEngineFactory.createPrimitiveDescription(ChunkAdjuster.class, null, ChunkAdjuster.PARAM_EXTEND_TO_INCLUDE_TOKEN, 2, ChunkAdjuster.PARAM_CHUNK_PATTERN, chunk_patternPN);



            //Lookup Annotators
            //Overlap Annotators        
            ConfigurationParameter[] configurationParameters  =  new ConfigurationParameter[5];
            ConfigurationParameter actionType  =  ConfigurationParameterFactory.createPrimitiveParameter("ActionType", String.class, "desc", true);
            ConfigurationParameter A_OBJECT_CLASS  =  ConfigurationParameterFactory.createPrimitiveParameter("A_ObjectClass", String.class, "desc", true);
            ConfigurationParameter B_OBJECT_CLASS  =  ConfigurationParameterFactory.createPrimitiveParameter("B_ObjectClass", String.class, "desc", true);
            ConfigurationParameter Overlaptype  =  ConfigurationParameterFactory.createPrimitiveParameter("OverlapType", String.class, "desc", true);
            ConfigurationParameter Deleteaction  =  ConfigurationParameterFactory.createPrimitiveParameter("DeleteAction", String.class, "desc", true);      
            Deleteaction.setMultiValued(true);
            configurationParameters[3] = actionType;
            configurationParameters[0] = A_OBJECT_CLASS;
            configurationParameters[1] = B_OBJECT_CLASS;
            configurationParameters[2] = Overlaptype;
            configurationParameters[4] = Deleteaction;

            Object[] configVals  =  new Object[5];
            configVals[3] = "DELETE";
            configVals[0] = "org.apache.ctakes.typesystem.type.textspan.LookupWindowAnnotation";
            configVals[1] = "org.apache.ctakes.typesystem.type.textspan.LookupWindowAnnotation";
            configVals[2] = "A_ENV_B";
            String[] deleteActionArray  =  new String[1];
            deleteActionArray[0] = "selector = B";
            configVals[4] = deleteActionArray;
            AnalysisEngineDescription overlapdesc  =  AnalysisEngineFactory.createPrimitiveDescription(OverlapAnnotator.class, null, null, null, null, configurationParameters, configVals);


            //Copy Annotator - Lookup 
            TypeSystemDescription copyAnnotatorTypeSystemDesc  =  new TypeSystemDescription_impl();
            copyAnnotatorTypeSystemDesc.addType("org.apache.ctakes.typesystem.type.CopySrcAnnotation", null, "uima.tcas.Annotation");
            copyAnnotatorTypeSystemDesc.addType("org.apache.ctakes.typesystem.type.CopyDestAnnotation", null, "uima.tcas.Annotation");
            ConfigurationParameter[] copyAnnotatorconfigurationParameters  =  new ConfigurationParameter[3];
            ConfigurationParameter srcObjClass  =  ConfigurationParameterFactory.createPrimitiveParameter("srcObjClass", String.class, "desc", true);
            ConfigurationParameter destObjClass  =  ConfigurationParameterFactory.createPrimitiveParameter("destObjClass", String.class, "desc", true);
            ConfigurationParameter dataBindMap  =  ConfigurationParameterFactory.createPrimitiveParameter("dataBindMap", String.class, "desc", true);
            dataBindMap.setMultiValued(true);
            copyAnnotatorconfigurationParameters[0] = srcObjClass;
            copyAnnotatorconfigurationParameters[1] = destObjClass;
            copyAnnotatorconfigurationParameters[2] = dataBindMap;

            Object[] copyAnnotatorconfigVals  =  new Object[3];
            copyAnnotatorconfigVals[0] = "org.apache.ctakes.typesystem.type.syntax.NP";
            copyAnnotatorconfigVals[1] = "org.apache.ctakes.typesystem.type.textspan.LookupWindowAnnotation";
            String[] dataBindArray  =  new String[2];
            dataBindArray[0] = "getBegin|setBegin";
            dataBindArray[1] = "getEnd|setEnd";
            copyAnnotatorconfigVals[2] = dataBindArray;

            AnalysisEngineDescription copyAnnotatorDesc  =  AnalysisEngineFactory.createPrimitiveDescription(CopyAnnotator.class, copyAnnotatorTypeSystemDesc,null,null,null, copyAnnotatorconfigurationParameters,copyAnnotatorconfigVals);


            //Dictionary Lookup
            ConfigurationParameter[] dictionaryconfigurationParameters  =  new ConfigurationParameter[1];
            ConfigurationParameter maxListSize  =  ConfigurationParameterFactory.createPrimitiveParameter("maxListSize", Integer.class, "desc", false);
            dictionaryconfigurationParameters[0] = maxListSize;

            Object[] dictionaryconfigVals  =  new Object[1];
            dictionaryconfigVals[0] = 2147483647;
            
            url = this.getClass().getResource("/ctakes-resources/cTAKES/DictionaryLookup/LookupDesc_csv_sample.xml").toString();
            
            System.out.println(url);
            ExternalResourceDescription dictionaryERD1  =  ExternalResourceFactory.createExternalResourceDescription("LookupDescriptorFile", org.apache.ctakes.core.resource.FileResourceImpl.class, url);
            url = this.getClass().getResource("/ctakes-resources/cTAKES/DictionaryLookup/dictionary1.csv").toString();
            
            System.out.println(url);
            ExternalResourceDescription dictionaryERD2  =  ExternalResourceFactory.createExternalResourceDescription("DictionaryFileResource", org.apache.ctakes.core.resource.FileResourceImpl.class, url);
            ExternalResourceDescription dictionaryERD3  =  ExternalResourceFactory.createExternalResourceDescription("RxnormIndex", org.apache.ctakes.core.resource.LuceneIndexReaderResourceImpl.class,"", "UseMemoryIndex",true,"IndexDirectory","ctakes-resources/cTAKES/DictionaryLookup/drug_index");
            ExternalResourceDescription dictionaryERD4  =  ExternalResourceFactory.createExternalResourceDescription("OrangeBookIndex", org.apache.ctakes.core.resource.LuceneIndexReaderResourceImpl.class,"" ,"UseMemoryIndex",true,"IndexDirectory","ctakes-resources/cTAKES/DictionaryLookup/OrangeBook");
            Map<String,ExternalResourceDescription> dictionaryMap  =  new HashMap<String, ExternalResourceDescription>();
            dictionaryMap.put("LookupDescriptor", dictionaryERD1);dictionaryMap.put("DictionaryFile", dictionaryERD2);
            dictionaryMap.put("RxnormIndexReader", dictionaryERD3);dictionaryMap.put("OrangeBookIndexReader", dictionaryERD4);

            AnalysisEngineDescription dictionarylookupDesc  =  AnalysisEngineFactory.createPrimitiveDescription(DictionaryLookupAnnotator.class,null,null,null,null,dictionaryconfigurationParameters,dictionaryconfigVals,dictionaryMap);

            ExternalResourceDependency[] dictDependencies  =  new ExternalResourceDependency[4];
            ExternalResourceDependency dicterd1 =  new ExternalResourceDependency_impl();
            dicterd1.setKey("LookupDescriptor");dicterd1.setOptional(false);dicterd1.setInterfaceName("org.apache.ctakes.core.resource.FileResource");
            ExternalResourceDependency dicterd2 =  new ExternalResourceDependency_impl();
            dicterd2.setKey("DictionaryFile");dicterd2.setOptional(false);dicterd2.setInterfaceName("org.apache.ctakes.core.resource.FileResource");
            ExternalResourceDependency dicterd3 =  new ExternalResourceDependency_impl();
            dicterd3.setKey("RxnormIndexReader");dicterd3.setOptional(false);dicterd3.setInterfaceName("org.apache.ctakes.core.resource.LuceneIndexReaderResource");
            ExternalResourceDependency dicterd4 =  new ExternalResourceDependency_impl();
            dicterd4.setKey("OrangeBookIndexReader");dicterd4.setOptional(false);dicterd4.setInterfaceName("org.apache.ctakes.core.resource.LuceneIndexReaderResource");
            dictDependencies[0] = dicterd1;dictDependencies[1] = dicterd2;dictDependencies[2] = dicterd3;dictDependencies[3] = dicterd4;
            dictionarylookupDesc.setExternalResourceDependencies(dictDependencies);


            /*//Dependency Parser
            Capability[] dependencyCapabilities  =  new Capability[1];
            Capability dependencyCapability_1  =  new Capability_impl();
            dependencyCapability_1.addInputType("org.apache.ctakes.typesystem.type.syntax.BaseToken:partOfSpeech", true);
            dependencyCapability_1.addInputType("org.apache.ctakes.typesystem.type.syntax.BaseToken:normalizedForm", true);
            dependencyCapability_1.addInputType("org.apache.ctakes.typesystem.type.syntax.BaseToken:tokenNumber",true);
            dependencyCapability_1.addInputType("org.apache.ctakes.typesystem.type.syntax.BaseToken:end",true);
            dependencyCapability_1.addInputType("org.apache.ctakes.typesystem.type.syntax.BaseToken:begin",true);
            dependencyCapabilities[0] = dependencyCapability_1;

            ConfigurationParameter[] dependencyconfigurationParameters  =  new ConfigurationParameter[4];
            ConfigurationParameter parserAlgorithmName  =  ConfigurationParameterFactory.createPrimitiveParameter("ParserAlgorithmName", String.class, "desc", true);
            ConfigurationParameter useLemmatizer  =  ConfigurationParameterFactory.createPrimitiveParameter("UseLemmatizer", Boolean.class, "desc", true);
            ConfigurationParameter parserModelFileName  =  ConfigurationParameterFactory.createPrimitiveParameter("ParserModelFileName", String.class, "desc", true);
            ConfigurationParameter lemmatizerDataFile  =  ConfigurationParameterFactory.createPrimitiveParameter("LemmatizerDataFile", String.class, "desc", true);
            dependencyconfigurationParameters[0] = parserAlgorithmName;
            dependencyconfigurationParameters[1] = useLemmatizer;
            dependencyconfigurationParameters[2] = parserModelFileName;
            dependencyconfigurationParameters[3] = lemmatizerDataFile;

            Object[] dependencyconfigVals  =  new Object[4];
            dependencyconfigVals[0] = "shift-pop";
            dependencyconfigVals[1] = true;
            dependencyconfigVals[2] = "cTAKES/DependencyParser/conll-2009-dev-shift-pop.jar";
            dependencyconfigVals[3] = "cTAKES/DependencyParser/wordnet-3.0-lemma-data.jar";

            AnalysisEngineDescription dependencyParserDesc  =  AnalysisEngineFactory.createPrimitiveDescription(ClearParserDependencyParserAE.class,maintypeSystem,null,null,dependencyCapabilities,dependencyconfigurationParameters,dependencyconfigVals);



            //Concept converter
            TypeSystemDescription conceptConverterTSD  =  TypeSystemDescriptionFactory.createTypeSystemDescription("org.apache.ctakes.assertion.types.TypeSystem","org.apache.ctakes.typesystem.types.TypeSystem");
            Capability[] conceptConverterCapabilities  =  new Capability[1];
            Capability conceptConverterCapability_1  =  new Capability_impl();
            conceptConverterCapability_1.addInputType("org.apache.ctakes.typesystem.type.refsem.UmlsConcept", true);
            conceptConverterCapability_1.addOutputType("org.apache.ctakes.assertion.medfacts.types.Concept",true);
            conceptConverterCapability_1.addInputType("org.apache.ctakes.typesystem.type.refsem.OntologyConcept", true);
            conceptConverterCapability_1.addInputType("org.apache.ctakes.typesystem.type.textsem.EntityMention", true);
            conceptConverterCapability_1.addInputType("org.apache.ctakes.typesystem.type.syntax.BaseToken", true);
            conceptConverterCapabilities[0] = conceptConverterCapability_1;

            ExternalResourceDescription conceptConverterd1  =  ExternalResourceFactory.createExternalResourceDescription("assertionModelResourceImpl", new File("cTAKES/Assertion/i2b2.model").toString());
            ExternalResourceDescription conceptConverterd2  =  ExternalResourceFactory.createExternalResourceDescription("scopeModelResourceImpl", new File("cTAKES/Assertion/scope.model").toString());
            ExternalResourceDescription conceptConverterd3  =  ExternalResourceFactory.createExternalResourceDescription("cueModelResourceImpl", new File("cTAKES/Assertion/cue.model").toString());
            ExternalResourceDescription conceptConverterd4  =  ExternalResourceFactory.createExternalResourceDescription("enabledFeaturesResourceImpl", new File("cTAKES/Assertion/featureFile11b").toString());

            AnalysisEngineDescription conceptConverterDesc  =  AnalysisEngineFactory.createPrimitiveDescription(ConceptConverterAnalysisEngine.class, conceptConverterTSD,null,null,conceptConverterCapabilities,"assertionModelResource",conceptConverterd1,"scopeModelResource",conceptConverterd2,"cueModelResource",conceptConverterd3,"enabledFeaturesResource",conceptConverterd4);
            ExternalResourceDependency[] aDependencies  =  new ExternalResourceDependency[4];
            ExternalResourceDependency erd1 =  new ExternalResourceDependency_impl();
            erd1.setKey("assertionModelResource");erd1.setOptional(false);
            ExternalResourceDependency erd2 =  new ExternalResourceDependency_impl();
            erd2.setKey("scopeModelResource");erd2.setOptional(false);
            ExternalResourceDependency erd3 =  new ExternalResourceDependency_impl();
            erd3.setKey("cueModelResource");erd3.setOptional(false);
            ExternalResourceDependency erd4 =  new ExternalResourceDependency_impl();
            erd4.setKey("enabledFeaturesResource");erd4.setOptional(false);
            aDependencies[0] = erd1;aDependencies[1] = erd2;aDependencies[2] = erd3;aDependencies[3] = erd4;
            conceptConverterDesc.setExternalResourceDependencies(aDependencies);


            //Assertion Analysis done
            TypeSystemDescription assertionAnalysisTSD  =  TypeSystemDescriptionFactory.createTypeSystemDescription("org.apache.ctakes.assertion.types.TypeSystem","org.apache.ctakes.typesystem.types.TypeSystem");
            Capability[] assertionAnalysisCapabilities  =  new Capability[1];
            Capability assertionAnalysisCapability_1  =  new Capability_impl();
            assertionAnalysisCapability_1.addInputType("org.apache.ctakes.typesystem.type.textsem.EntityMention", true);
            assertionAnalysisCapability_1.addOutputType("org.apache.ctakes.typesystem.type.textsem.EntityMention",true);
            assertionAnalysisCapability_1.addInputType("org.apache.ctakes.assertion.medfacts.types.Concept", true);
            assertionAnalysisCapability_1.addInputType("org.apache.ctakes.typesystem.type.syntax.BaseToken", true);
            assertionAnalysisCapabilities[0] = conceptConverterCapability_1;

            ExternalResourceDescription assertionAnalysis1  =  ExternalResourceFactory.createExternalResourceDescription("assertionModelResourceImpl", new File("cTAKES/Assertion/i2b2.model").toString());
            ExternalResourceDescription assertionAnalysis2  =  ExternalResourceFactory.createExternalResourceDescription("scopeModelResourceImpl", new File("cTAKES/Assertion/scope.model").toString());
            ExternalResourceDescription assertionAnalysis3  =  ExternalResourceFactory.createExternalResourceDescription("cueModelResourceImpl", new File("cTAKES/Assertion/cue.model").toString());
            ExternalResourceDescription assertionAnalysis4  =  ExternalResourceFactory.createExternalResourceDescription("enabledFeaturesResourceImpl", new File("cTAKES/Assertion/featureFile11b").toString());
            ExternalResourceDescription assertionAnalysis5  =  ExternalResourceFactory.createExternalResourceDescription("posModelResourceImpl", new File("cTAKES/Assertion/pos.model").toString());
            Map<String,ExternalResourceDescription> assertionAnalysisMap  =  new HashMap<String, ExternalResourceDescription>();
            assertionAnalysisMap.put("assertionModelResource",assertionAnalysis1);
            assertionAnalysisMap.put("scopeModelResource",assertionAnalysis2);
            assertionAnalysisMap.put("cueModelResource",assertionAnalysis3);
            assertionAnalysisMap.put("enabledFeaturesResource",assertionAnalysis4); 
            assertionAnalysisMap.put("posModelResource",assertionAnalysis5);

            AnalysisEngineDescription assertionAnalysisEnginedesc  =  AnalysisEngineFactory.createPrimitiveDescription(AssertionAnalysisEngine.class,assertionAnalysisTSD,null,null,assertionAnalysisCapabilities,null,null,assertionAnalysisMap);
            ExternalResourceDependency[] assertionDependencies  =  new ExternalResourceDependency[5];
            ExternalResourceDependency assertionerd1 =  new ExternalResourceDependency_impl();
            assertionerd1.setKey("assertionModelResource");assertionerd1.setOptional(false);
            ExternalResourceDependency assertionerd2 =  new ExternalResourceDependency_impl();
            assertionerd2.setKey("scopeModelResource");assertionerd2.setOptional(false);
            ExternalResourceDependency assertionerd3 =  new ExternalResourceDependency_impl();
            assertionerd3.setKey("cueModelResource");assertionerd3.setOptional(false);
            ExternalResourceDependency assertionerd4 =  new ExternalResourceDependency_impl();
            assertionerd4.setKey("enabledFeaturesResource");assertionerd4.setOptional(false);
            ExternalResourceDependency assertionerd5 =  new ExternalResourceDependency_impl();
            assertionerd5.setKey("posModelResource");assertionerd5.setOptional(false);
            assertionDependencies[0] = assertionerd1;assertionDependencies[1] = assertionerd2;
            assertionDependencies[2] = assertionerd3;assertionDependencies[3] = assertionerd4;
            assertionDependencies[4] = assertionerd5;
            assertionAnalysisEnginedesc.setExternalResourceDependencies(assertionDependencies);


            //Generic Attribute 
            Capability[] genericsubjectAttributeCapabilities  =  new Capability[1];
            Capability genericsubjectAttributeCapability_1  =  new Capability_impl();
            genericsubjectAttributeCapability_1.addInputType("org.apache.ctakes.typesystem.type.textsem.EntityMention", true);
            genericsubjectAttributeCapability_1.addInputType("org.apache.ctakes.typesystem.type.syntax.BaseToken", true);
            genericsubjectAttributeCapability_1.addOutputType("org.apache.ctakes.typesystem.type.textsem.EntityMention", true);
            genericsubjectAttributeCapabilities[0] = genericsubjectAttributeCapability_1;
            AnalysisEngineDescription genericAtrributedesc  =  AnalysisEngineFactory.createPrimitiveDescription(GenericAttributeAnalysisEngine.class,maintypeSystem,null,null, genericsubjectAttributeCapabilities);


            //Subject Attribute
            AnalysisEngineDescription subjectAttributeAnalysisEngine  =  AnalysisEngineFactory.createPrimitiveDescription(SubjectAttributeAnalysisEngine.class, maintypeSystem,null,null,genericsubjectAttributeCapabilities);



            //Extraction Prep Done
            ConfigurationParameter[] extractionPrepconfigurationParameters  =  new ConfigurationParameter[2];
            ConfigurationParameter AnnotationVersion  =  ConfigurationParameterFactory.createPrimitiveParameter("AnnotationVersion", Integer.class, "desc", true);
            ConfigurationParameter AnnotationVersionPropKey  =  ConfigurationParameterFactory.createPrimitiveParameter("AnnotationVersionPropKey", String.class, "desc", true);

            extractionPrepconfigurationParameters[0] = AnnotationVersion;
            extractionPrepconfigurationParameters[1] = AnnotationVersionPropKey;

            Object[] extractionPrepconfigVals  =  new Object[2];
            extractionPrepconfigVals[0] = 1;
            extractionPrepconfigVals[1] = "ANNOTATION_VERSION";

            AnalysisEngineDescription extractionPrepDesc  =  AnalysisEngineFactory.createPrimitiveDescription(ExtractionPrepAnnotator.class,maintypeSystem,null,null,null ,extractionPrepconfigurationParameters, extractionPrepconfigVals);

*/
            //Final Analysis Engine Description
            List<AnalysisEngineDescription> analysisEngineDescription  =  new ArrayList<AnalysisEngineDescription>();
            List<String> componentNames  =  new ArrayList<String>();

            analysisEngineDescription.add(simpleSegmentDesc);
            componentNames.add("SimpleSegmentAnnotator");
            analysisEngineDescription.add(sentenceDetectorDesc);
            componentNames.add("SentenceDetector");
            analysisEngineDescription.add(tokenizerDesc);
            componentNames.add("TokenizerAnnotator");
            analysisEngineDescription.add(contextDependentTokenizerDesc);
            componentNames.add("ContextDependentTokenizer");
            analysisEngineDescription.add(posTaggerdesc);
            componentNames.add("POSTagger");
            analysisEngineDescription.add(chunkerDesc);
            componentNames.add("Chunker");
            analysisEngineDescription.add(chunkAdjusterDesc);
            componentNames.add("AdjustNounPhraseToIncludeFollowingNP");
            analysisEngineDescription.add(chunkAdjusterPNDesc);
            componentNames.add("AdjustNounPhraseToIncludeFollowingPPNP");
            analysisEngineDescription.add(overlapdesc);
            componentNames.add("OverlapAnnotator-Lookup");
            analysisEngineDescription.add(copyAnnotatorDesc);
            componentNames.add("CopyAnnotator-Lookup"); 
            analysisEngineDescription.add(dictionarylookupDesc);
            componentNames.add("Dictionary Lookup");
           /* analysisEngineDescription.add(dependencyParserDesc);
            componentNames.add("Dependency Parser");
            analysisEngineDescription.add(conceptConverterDesc);
            componentNames.add("Concept Converter-Assertion");
            analysisEngineDescription.add(assertionAnalysisEnginedesc);
            componentNames.add("AssertionAnalysisEngine - Assertion");
            analysisEngineDescription.add(genericAtrributedesc);
            componentNames.add("Generic Attribute - Assertion");
            analysisEngineDescription.add(subjectAttributeAnalysisEngine);
            componentNames.add("Subject Attribute - Assertion");
            analysisEngineDescription.add(extractionPrepDesc);
            componentNames.add("Extraction Prep Annotator");*/


            AnalysisEngineDescription analysisEnginedesc  =  AnalysisEngineFactory.createAggregateDescription(analysisEngineDescription,componentNames, null, null, null, null);

            ConfigurationParameter[] finalDescConfigurationParameters  =  new ConfigurationParameter[1];
            ConfigurationParameter ChunkCreatorClass  =  ConfigurationParameterFactory.createPrimitiveParameter("ChunkCreatorClass", String.class, "desc", true);
            finalDescConfigurationParameters[0] = ChunkCreatorClass;
            Object[] finalDescConfigVals  =  new Object[1];
            finalDescConfigVals[0] = "org.apache.ctakes.chunker.ae.PhraseTypeChunkCreator";


            ResourceCreationSpecifierFactory.setConfigurationParameters(analysisEnginedesc, finalDescConfigurationParameters, finalDescConfigVals);

            // Create the Analysis Engine
            this.analysisEngine = AnalysisEngineFactory.createAggregate(analysisEnginedesc);
        }catch(Exception e){
            System.out.println("Error Initialising Analysis Engine");
            e.printStackTrace();
            System.out.print(e.getMessage());
            
        }
    }

}
