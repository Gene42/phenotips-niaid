/*
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/
 */
package org.phenotips.studies.family;

import org.phenotips.data.Patient;
import org.phenotips.studies.family.internal.SvgUpdater;

import java.util.LinkedList;
import java.util.List;

import org.apache.commons.lang3.StringUtils;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

/**
 * Holds data and image (SVG string) for pedigree.
 *
 * @version $Id$
 */
public class Pedigree
{
    /**
     * Code for data.
     */
    public static final String DATA = "data";

    /**
     * Code for image.
     */
    public static final String IMAGE = "image";

    /** The name under which the linked patient id resides under in the JSON generated by the pedigree. */
    private static final String PATIENT_LINK_JSON_KEY = "phenotipsId";

    private JSONObject data;

    private String image = "";

    /**
     * Create a new empty pedigree.
     */
    public Pedigree()
    {

    }

    /**
     * Create a new pedigree with data and image.
     *
     * @param data pedigree data
     * @param image SVG 'image'
     */
    public Pedigree(JSONObject data, String image)
    {
        this.data = data;
        this.image = image;
    }

    /**
     * Checks if the `data` field is empty.
     *
     * @return true if data is {@link null} or if {@link JSONObject#isEmpty()} returns true
     */
    public boolean isEmpty()
    {
        return this.data == null || this.data.isEmpty();
    }

    /**
     * Getter for `data` which holds all of a pedigree's JSON.
     *
     * @return could be null
     */
    public JSONObject getData()
    {
        return this.data;
    }

    /**
     * Setter for 'data' which holds all of a pedigree's JSON.
     *
     * @param data the JSON data
     */
    public void setData(JSONObject data)
    {
        this.data = data;
    }

    /**
     * Getter for `image` string (SVG).
     *
     * @return can not be null
     */
    public String getImage()
    {
        return this.image;
    }

    /**
     * Setter for 'image' string (SVG).
     *
     * @param image SVG image
     */
    public void setImage(String image)
    {
        this.image = image;
    }

    /**
     * Remove a member from the pedigree.
     *
     * @param patientId id of the patient to remove
     */
    public void removeMember(String patientId)
    {
        stripIdsFromPedigree(patientId);
        String newImage = SvgUpdater.removeLinks(this.getImage(), patientId);
        this.setImage(newImage);
    }

    /*
     * Strips out all linked ids from a pedigree.
     */
    private void stripIdsFromPedigree(String patientId)
    {
        List<JSONObject> patientProperties = this.extractPatientJSONProperties();
        for (JSONObject properties : patientProperties) {
            Object patientLink = properties.get(Pedigree.PATIENT_LINK_JSON_KEY);
            if (patientLink != null && !StringUtils.equalsIgnoreCase(patientLink.toString(), patientId)) {
                properties.remove(Pedigree.PATIENT_LINK_JSON_KEY);
            }
        }
    }

    /**
     * Extracts and returns all PhenoTips patient ids.
     *
     * @return all PhenoTips ids from pedigree nodes that have internal ids
     */
    public List<String> extractIds()
    {
        List<String> extractedIds = new LinkedList<>();
        for (JSONObject properties : this.extractPatientJSONProperties()) {
            Object id = properties.get(Pedigree.PATIENT_LINK_JSON_KEY);
            if (id != null && StringUtils.isNotBlank(id.toString())) {
                extractedIds.add(id.toString());
            }
        }
        return extractedIds;
    }

    /**
     * Patients are representing in a list within the structure of a pedigree. Extracts JSON objects that belong to
     * patients.
     *
     * @return non-null and non-empty patient properties in JSON objects.
     */
    public List<JSONObject> extractPatientJSONProperties()
    {
        List<JSONObject> extractedObjects = new LinkedList<>();
        JSONArray gg = (JSONArray) this.data.get("GG");
        // letting it throw a null exception on purpose
        for (Object nodeObj : gg) {
            JSONObject node = (JSONObject) nodeObj;
            JSONObject properties = (JSONObject) node.get("prop");
            if (properties == null || properties.isEmpty()) {
                continue;
            }
            extractedObjects.add(properties);
        }
        return extractedObjects;
    }

    /**
     * Highlight proband in pedigree's image.
     *
     * @param proband of the family
     */
    public void highlightProband(Patient proband)
    {
        if (this.image != null) {
            this.image = SvgUpdater.setPatientStylesInSvg(this.image, proband.getId());
        }
    }

}
