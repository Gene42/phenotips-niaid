<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.1">
  <web>PhenoTips</web>
  <name>FormDesigner</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1401822218000</creationDate>
  <parent>PhenoTips.DBWebHomeSheet</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1401822218000</date>
  <contentUpdateDate>1401822218000</contentUpdateDate>
  <version>1.1</version>
  <title>Patient form designer</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output=false}}
## =====================================================================
## INITIALIZE VARIABLES AND DEFINE MACROS FOR ACCESSING EXTENSIONS
## =====================================================================
## ----------------------------------------------------------------------
## Initialize widely used constants
## ----------------------------------------------------------------------
#set ($uixSpace = 'PhenoTips')
#set ($uixClass = 'XWiki.UIExtensionClass')
#set ($uixNamePrefix = 'UIX_')
#set ($fieldUixNamePrefix = "${uixNamePrefix}Field__")
#set ($sectionUixNamePrefix = "${uixNamePrefix}Section__")

#set ($sectionExtensionPointId = 'org.phenotips.patientSheet.content')
#set ($sectionExtensionIdPrefix = 'org.phenotips.patientSheet.section.')
#set ($fieldExtensionPointIdPrefix = $sectionExtensionIdPrefix)
#set ($fieldExtensionIdPrefix = 'org.phenotips.patientSheet.field.')

## ----------------------------------------------------------------------
## General query for extensions
## ----------------------------------------------------------------------
#set ($extensionsQuery = ", BaseObject obj, StringProperty prop where doc.fullName = obj.name and obj.className = ? and prop.id.id = obj.id and prop.name = ? and prop.value = ?")

## ----------------------------------------------------------------------
## Retrieve and organize the data corresponding to a specific subset of extensions
## Place the data in $result
## ----------------------------------------------------------------------
#macro(_formDesigner__getExtensionsData $type $filterPropertyName, $filterPropertyValue, $extensionPointId, $selectionOverride, $results)
  ## Get extension objects
  #set ($uixs = $services.uix.getExtensions($extensionPointId, {'sortByParameter' : 'order'}))
  ## Get uix documents
  #set ($uixDocs = $xwiki.wrapDocs($services.query.hql($extensionsQuery).bindValues([$uixClass, $filterPropertyName, $filterPropertyValue]).execute()))
  ## Map extension id to document for easy access
  #set ($uixDocsMap = {})
  #foreach ($uixDoc in $uixDocs)
    #set ($uixObj = $uixDoc.getObject($uixClass))
    #set ($discard = $uixDocsMap.put($uixObj.getProperty('name').value, $uixDoc))
  #end
  ## If another configuration overrides the order/enabled status, reorder and re-mark:
  #if ("$!{selectionOverride}" != '' &amp;&amp; $selectionOverride.size() &gt; 0)
    #set ($uixMap = {})
    #foreach ($uix in $uixs)
      #set ($discard = $uixMap.put($uix.id, $uix))
    #end
    #set ($tmpUixs = [])
    #foreach ($uixId in $selectionOverride)
      #set ($exists = $uixMap.get($uixId))
      #if ($exists)
        #set ($discard = $tmpUixs.add($exists))
        #set ($discard = $uixs.remove($exists))
      #end
    #end
    #set ($disabledUixs = {})
    #foreach ($uix in $uixs)
      #set ($discard = $tmpUixs.add($uix))
      #set ($discard = $disabledUixs.put($uix.id, true))
    #end
    #set ($uixs = $tmpUixs)
  #elseif("$!{selectionOverride}" != '' &amp;&amp; $selectionOverride.size() == 0)
    #set ($tempList = [])
    #foreach($uix in $uixs)
      #set ($enabled = $uix.getParameters().get("enabled"))
      #if ("$!{enabled}" == "false" || "$!{enabled}" == "0" || "$!{enabled}" == "no")
          #set ($enabled = false)
      #else
          #set ($enabled = true)
      #end
      #if ($enabled)
          #set($discard = $tempList.add($uix))
      #end
    #end
    #set ($uixs = $tempList)
  #end
  #foreach ($uix in $uixs)
    #set ($title = $uix.getParameters().get("title"))
    #set ($uixDoc = $uixDocsMap.get($uix.id))
    #if ($uixDoc)
      #if ("$!{title}" == '')
        #set ($title = $uixDoc.title)
      #end
      #set ($enabled = $uix.getParameters().get("enabled"))
      #if ("$!{enabled}" == "false" || "$!{enabled}" == "0" || "$!{enabled}" == "no")
        #set ($enabled = false)
      #else
        #set ($enabled = true)
      #end
      #if ("$!{disabledUixs}" != '')
        #set ($hide = !$enabled)
        #set ($enabled = $enabled &amp;&amp; !("$!{disabledUixs.get($uix.id)}" == "true"))
      #end
      #set ($required = $uix.getParameters().get("required"))
      #if ("$!{required}" == "true" || "$!{required}" == "1" || "$!{required}" == "yes")
        #set ($required = true)
      #else
        #set ($required = false)
      #end
      #if (!$hide)
        #set ($r = {
          'id'      : $uix.id,
          'type'    : $type,
          'title'   : $title,
          'enabled' : $enabled,
          'required': $required,
          'doc'     : $uixDoc,
          'uix'     : $uix
        })
        #set ($discard = $results.add($r))
      #end
    #end
  #end
#end

## ----------------------------------------------------------------------
## Retrieve and organize the data corresponding to section extensions
## Place the data in $result
## See #_formDesigner__getExtensionsData
## ----------------------------------------------------------------------
#macro(_formDesigner__getSectionsData $result)#_formDesigner__getExtensionsData('section', 'extensionPointId', $sectionExtensionPointId, $sectionExtensionPointId, $!customConfig.getProperty('sections').value, $result)#end

## ----------------------------------------------------------------------
## Retrieve and organize the data corresponding to field extensions from a specific section
## Place the data in $result
## See #_formDesigner__getExtensionsData
## ----------------------------------------------------------------------
#macro(_formDesigner__getFieldsData $extensionPointId $result)#_formDesigner__getExtensionsData('field', 'extensionPointId', $extensionPointId, $extensionPointId, $!customConfig.getProperty('fields').value, $result)#end

## ----------------------------------------------------------------------
## Global configuration: update extensions
## ----------------------------------------------------------------------
#macro(_formDesigner__updateExtensionData $extensionDatum $extensionType $enabledExtensionIds)
  #if ($request.getParameterMap().containsKey("${extensionType}_${extensionDatum.id}_order") &amp;&amp; $request.getParameterMap().containsKey("${extensionType}_${extensionDatum.id}_extensionPointId"))
    #set ($uixParams = {
      'enabled'  : $enabledExtensionIds.contains($extensionDatum.id),
      'required' : "$!request.get(""${extensionType}_${extensionDatum.id}_required"")",
      'order'    : $request.get("${extensionType}_${extensionDatum.id}_order"),
      'title'    : ${extensionDatum.title}
    })
    #set ($uixModifiedParams = {})
    #foreach ($param in $uixParams.keySet())
      #if ("$!{uixParams.get($param)}" != "$!{extensionDatum.uix.parameters.get($param)}")
        #set ($discard = $uixModifiedParams.put($param, $uixParams.get($param)))
      #end
    #end
    #set ($extPt = $request.get("${extensionType}_${extensionDatum.id}_extensionPointId"))
    #if ($uixModifiedParams.size() &gt; 0 || $extPt != $extensionDatum.uix.getExtensionPointId())
      #set ($uixObj = $extensionDatum.doc.getObject($uixClass))
      #set ($discard = $uixObj.set('extensionPointId', $extPt))
      #set ($originalParamsBlock = $uixObj.getProperty('parameters').value)
      #set ($prevParamsBlock = $originalParamsBlock)
      #set ($newParamsBlock = $originalParamsBlock)
      #foreach ($param in $uixModifiedParams.keySet())
        #set ($newParamsBlock = $prevParamsBlock.replaceAll("${param}=.*", "${param}=${uixModifiedParams.get($param)}"))
        #if ($newParamsBlock == $prevParamsBlock)
          #set ($newParamsBlock = "${prevParamsBlock}${util.newline}${param}=${uixModifiedParams.get($param)}")
        #end
        #set ($prevParamsBlock = $newParamsBlock)
      #end
      #set ($discard = $uixObj.set('parameters', $newParamsBlock))
      #set ($discard = $extensionDatum.doc.save())
    #end
  #end
#end

#macro(_formDesigner__updateExtensions $extensionPointId)
  #set ($fieldsData = [])
  #_formDesigner__getFieldsData($extensionPointId $fieldsData)
  #foreach ($fieldDatum in $fieldsData)
    #_formDesigner__updateExtensionData($fieldDatum 'fields' $fields)
  #end
#end

#if ($request.form_token &amp;&amp; $services.csrf.isTokenValid("$!{request.form_token}"))
  ## =====================================================================
  ## PROCESS SUBMITTED DATA
  ## =====================================================================
  #if ($hasAdmin &amp;&amp; "$!{request.create_extension}" != '' &amp;&amp; "$!{request.extension_name}" != '' &amp;&amp; "$!{request.extension_id}" != '')
    ## ----------------------------------------------------------------------
    ## Create new section
    ## ----------------------------------------------------------------------
    #set ($uixName = "${sectionUixNamePrefix}$!{request.extension_id}")
    #set ($uixFullName = "${uixSpace}.${uixName}")
    #set ($uixDoc = $xwiki.getDocument($uixFullName))
    #set ($discard = $uixDoc.setTitle("$!{request.extension_name}"))
    #set ($uixObj = $uixDoc.getObject($uixClass, true))
    #set ($discard = $uixObj.set('name', "${fieldExtensionPointIdPrefix}$!{request.extension_id}"))
    #set ($discard = $uixObj.set('extensionPointId', $sectionExtensionPointId))
    #set ($discard = $uixDoc.save())
    $response.sendRedirect($xwiki.getURL('PhenoTips.FormDesigner', 'get', "showsection=$!{request.extension_id}"))
    #break
  #elseif ($hasAdmin &amp;&amp; "$!{request.update_extensions}" != '')
    ## ----------------------------------------------------------------------
    ## Process form designer data
    ## ----------------------------------------------------------------------
    #set ($sections = $request.getParameterValues('sections'))
    #set ($fields = $request.getParameterValues('fields'))

    #set ($sectionsData = [])
    #_formDesigner__getSectionsData($sectionsData)
    #foreach ($sectionDatum in $sectionsData)
      #_formDesigner__updateExtensionData($sectionDatum 'sections' $sections)
      #_formDesigner__updateExtensions($sectionDatum.id)
    #end
    #_formDesigner__updateExtensions("${fieldExtensionPointIdPrefix}none")
  #end## create or update
#end## CSRF token is valid

## =====================================================================
## FORM DESIGNER: VARIABLES AND MACROS FOR DISPLAYING THE DESIGNER
## =====================================================================
$xwiki.jsfx.use('js/scriptaculous/dragdrop.js')
$xwiki.ssx.use('PhenoTips.FormDesigner')
$xwiki.jsx.use('PhenoTips.FormDesigner')
$xwiki.ssfx.use('icons/font-awesome/css/font-awesome.min.css')

## ----------------------------------------------------------------------
## Initialize the form parameters
## ----------------------------------------------------------------------
#if ($hasEdit)
  #set ($studyConfig = $doc.getObject('PhenoTips.StudyClass'))
#end
#if ("$!{studyConfig}" == '')
  #set ($globalConfig = $hasAdmin)
  #set ($prefix = '')
  #set ($formAction = "$doc.getURL($xcontext.action, $!request.queryString)")
  #set ($formSubmit = "update_extensions")
  #set ($formParams = {
    "update_extensions" : "1",
    "sections" : "" 
  })
#else
  #set ($prefix = "${studyConfig.xWikiClass.name}_${studyConfig.number}_")
  #set ($formAction = $doc.getURL('save'))
  #set ($formSubmit = "action_save")
  #set ($formParams = {
    "xredirect" : "$doc.getURL($xcontext.action)",
    "${prefix}sections" : "",
    "${prefix}fields" : "",
    "${prefix}mapping" : ""
  })
#end
#if($studyConfig)
    #set($customConfig = $studyConfig)
    #if (!$customConfig.getProperty('sections'))
      $customConfig.getXWikiObject().setDBStringListValue('sections', [])
    #end
    #if (!$customConfig.getProperty('fields'))
      $customConfig.getXWikiObject().setDBStringListValue('fields', [])
    #end
#end

## ----------------------------------------------------------------------
## One tool for handling an extension
## ----------------------------------------------------------------------
#macro(_formDesigner__displayExtensionTool $name $icon $hint $url $attrs)&lt;a href="$url" title="$!{hint}" class="extension-tool ${name}" $!{attrs}&gt;&lt;i class="fa fa-${icon}"&gt;&lt;/i&gt;&lt;/a&gt;#end

## ----------------------------------------------------------------------
## Toolbox for handling an extension
## ----------------------------------------------------------------------
#macro(_formDesigner__displayExtensionTools $extension $tools)
{{html wiki=false clean=false}}&lt;div class="extension-tools"&gt;
#if ($globalConfig)
#if ($tools.required)&lt;label class="extension-tool flag" title="Required?"&gt;&lt;i class="fa fa-asterisk"&gt;&lt;/i&gt;&lt;input type="checkbox" class="uix-required" name="${prefix}${extension.type}s_${extension.id}_required" value="true" #if ($extension.required) checked="true" #end/&gt;&lt;/label&gt;#end
#if ($tools.edit)#_formDesigner__displayExtensionTool('edit' 'pencil' 'Modify this extension' $extension.doc.getURL('edit', 'editor=object') 'target="_blank"')#end
#if ($tools.delete)#_formDesigner__displayExtensionTool('delete' 'times' 'Delete this extension' $extension.doc.getURL('delete') 'target="_blank"')#end
#end
#if ($tools.move)#_formDesigner__displayExtensionTool('move' 'arrows' 'Drag and drop to reorganize' '#')#end
&lt;/div&gt;{{/html}}
#end

## ----------------------------------------------------------------------
## Metadata to be sent to the server about an extension
## ----------------------------------------------------------------------
#macro(_formDesigner__displayExtensionInputs $extension $fieldName)##
{{html wiki=false clean=false}}
&lt;input type="checkbox" class="uix-toggle"   name="$fieldName" value="${extension.id}" #if ($extension.enabled) checked="true" #end/&gt;
&lt;input type="hidden"   class="uix-pointid"  name="${fieldName}_${extension.id}_extensionPointId" value="${extension.uix.getExtensionPointId()}" /&gt;
&lt;input type="hidden"   class="uix-order"    name="${fieldName}_${extension.id}_order" value="" /&gt;
{{/html}}##
#end

## ----------------------------------------------------------------------
## Display one field extension
## ----------------------------------------------------------------------
#macro(_formDesigner__displayExtension $extension)
  #set ($tools = {'required' : true, 'edit' : true, 'move' : true})
  (% class="extension-maquette #if (!$extension.enabled) disabled #end" id="${extension.id}"%)((((% class="extension-title" %)(((#_formDesigner__displayExtensionInputs($extension "${prefix}fields")$extension.title.replace(")", "~)"))))#_formDesigner__displayExtensionTools($extension $tools))))
#end

## ----------------------------------------------------------------------
## Display all extensions of an extension point
## ----------------------------------------------------------------------
#macro(_formDesigner__displayExtensions $extensionPointId)
  #set ($extensionsData = [])
  #_formDesigner__getFieldsData($extensionPointId, $extensionsData)##
  #foreach ($extension in $extensionsData)
    #_formDesigner__displayExtension($extension)
  #end
#end

## ----------------------------------------------------------------------
## Display one section extension 
## ----------------------------------------------------------------------
#macro(_formDesigner__displaySection $section $showTools)
(% class="section-maquette #if ($showTools &amp;&amp; !$section.enabled) disabled #end" id="${section.id}"%)(((
  (% class="section-title" %)(((#if ($showTools)#_formDesigner__displayExtensionInputs($section "${prefix}sections")#end $section.title)))
  #if ($showTools)#set ($tools = {'edit' : true, 'delete' : true, 'move' : true})#_formDesigner__displayExtensionTools($section $tools)#end
  (% class="section-contents" %)(((#_formDesigner__displayExtensions("${section.id}"))))
)))
#end

## ----------------------------------------------------------------------
## Display section extensions 
## ----------------------------------------------------------------------
#macro(_formDesigner__displaySections)
  #set ($sectionsData = [])
  #_formDesigner__getSectionsData($sectionsData)##
  #foreach ($section in $sectionsData)
    #_formDesigner__displaySection($section true)
  #end
#end

## ----------------------------------------------------------------------
## Display the section with a specific id suffix
## ---------------------------------------------------------------------- 
#macro (_formDesigner__displaySectionWithId $id)
  #set ($sectionsData = [])
  #_formDesigner__getExtensionsData('section', 'name', "${sectionExtensionIdPrefix}${id}", $sectionExtensionPointId, $!studyConfig.getProperty('sections').value, $sectionsData)
  #foreach ($section in $sectionsData)
    #_formDesigner__displaySection($section true)
  #end
#end
{{/velocity}}

{{velocity}}
#if ("$!{request.showsection}" != '')
## =====================================================================
## SHOW ONE SECTION
## =====================================================================
  #_formDesigner__displaySectionWithId("$!{request.showsection}")
#else
## =====================================================================
## SHOW SECTION ADDITION FORM
## =====================================================================
#if ($globalConfig)
{{html clean=false wiki=false}}&lt;form action="$formAction" method="post" class="xformInline" id="create-section-form"&gt;
&lt;h2&gt;Add a form section&lt;/h2&gt;
&lt;div&gt;
  &lt;input type="hidden" name="form_token" value="$!{services.csrf.getToken()}"/&gt;
  &lt;input type="hidden" name="create_extension" value="1"/&gt;
  &lt;input type="hidden" name="xredirect" value="$doc.getURL('get', 'showsection=')"/&gt;
  &lt;input type="text" name="extension_id" value="" placeholder='Section identifier (e.g. "new-section")' title="Alphanumeric characters and dashes only" size="32"/&gt;
  &lt;input type="text" name="extension_name" value="" placeholder="Section title" size="32"/&gt;
  &lt;input class="button" type="button" name="create_extension" value="Create"/&gt;
&lt;/div&gt;&lt;/form&gt;{{/html}}

#end
## =====================================================================
## SHOW FORM DESIGNER
## =====================================================================
#if ($globalConfig || $studyConfig)
## ----------------------------------------------------------------------
## Display the configuration form if the user has permissions
## ----------------------------------------------------------------------
{{html clean=false wiki=false}}&lt;form action="$formAction" method="post"&gt;{{/html}}
(% id="patient-form-designer" #if ($globalConfig) class="global" #end%)(((
(% class="designer-panel sections" %)(((
#_formDesigner__displaySections()
#if ($globalConfig)
(% id="new-section" class="new-section xformInline" %)((((% class="section-title" %)(((New section...))){{html clean=false wiki=false}}
  &lt;input type="text" name="extension_id" value="" placeholder='Section identifier (e.g. "new-section")' title="Alphanumeric characters and dashes only" size="32"/&gt;
  &lt;input type="text" name="extension_name" value="" placeholder="Section title" size="32"/&gt;
  &lt;input class="button" type="button" name="${formSubmit}" value="Create"/&gt;{{/html}}
)))## new section
#end
)))
##
#if ($globalConfig)
##
## Only enable reorganization for global config
##
(% class="designer-panel hint" %)(((Drag and drop to organize the form)))
(% class="designer-panel extensions" %)(((
#set ($defaultSectionData = {
  "id" : "${fieldExtensionPointIdPrefix}none",
  "title" : "Available information to display in the form's sections",
  "enabled" : true
})
#_formDesigner__displaySection($defaultSectionData false)
)))
#elseif ($studyConfig)
##
## Enable mapping configuration as well
##
(% class="mappingPreviewContainer" %)(((
== Phenotypes to display by default ==

{{info}}The phenotype categories and phenotypes that are displayed by default in the patient form, on the in the left side of the "Clinical symptoms &amp; physical findings" section, are defined in a separate configuration document. Choose below the configuration document to use.{{/info}}
; Phenotype configuration document
: (((
{{html clean=false wiki=false}}&lt;label class="xwiki-form-listclass default" for="xwiki-form-mapping-0-default"&gt;&lt;input id="xwiki-form-mapping-0-default" type="radio" name="${prefix}mapping" value="" #if ("$!{studyConfig.getProperty('mapping').value}" == '') checked="checked" #end/&gt;None (use the global default)&lt;/label&gt;{{/html}}
$doc.display('mapping', 'edit')
)))

(% class="hint under" %)(((Preview)))

(% id="mappingPreview"%)((()))
)))
$xwiki.ssx.use('PhenoTips.YesNoNAPicker', {'colorTheme' : "$!{themeDocFullName}"})##
$xwiki.ssx.use('PhenoTips.Widgets', {'colorTheme' : "$!{themeDocFullName}"})##
$xwiki.ssx.use('PhenoTips.PatientSheetCode', {'colorTheme' : "$!{themeDocFullName}"})##
$xwiki.ssx.use('PhenoTips.PhenotypeMappingPreview', {'colorTheme' : "$!{themeDocFullName}"})##
$xwiki.jsx.use('PhenoTips.PhenotypeMappingPreview')##
##
##
#end
(% class="clearfloats" %)((()))
)))
{{html clean=false wiki=false}}
&lt;div class="hidden"&gt;
  &lt;input type="hidden" name="form_token" value="$!{services.csrf.getToken()}"/&gt;
#foreach ($p in $formParams.keySet())
  &lt;input type="hidden" name="$p" value="$formParams.get($p)"/&gt;
#end
&lt;/div&gt;
&lt;div class="buttons"&gt;
 &lt;input class="button" type="submit" name="${formSubmit}" value="Save patient form configuration"/&gt;
&lt;/div&gt;
&lt;/form&gt;{{/html}}
#else
{{warning}}You don't have permission to access this configuration.{{/warning}}
#end
#end
{{/velocity}}
</content>
  <object>
    <name>PhenoTips.FormDesigner</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>f932f5b4-9eb5-4334-9fdf-d92946a5d6c5</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var PhenoTips = (function (PhenoTips) {
  var widgets = PhenoTips.widgets = PhenoTips.widgets || {};
  widgets.PatientFormDesigner = Class.create({

    _ENHANCED_TOOL_CSS_CLASS : 'initialized',
    _NEW_TOOL_SELECTOR: ':not(.initialized)',
    
    initialize : function (element) {
      if (!element) return;
      this._element = element;
      this._form = element.up('form');
      this._globalConfig = element.hasClassName('global');
      this._enhanceExtensionTools();
      this._handleSubmit();
      this._handleNewSection();
    },

    _enhanceExtensionTools : function () {
      this._silenceMoveButtons();
      this._enableRequiredFlags();
      this._enableAjaxDeletion();
      this._enableSectionToggle();
      this._enableSectionReorder();
      this._enableFieldToggle();
      if (this._globalConfig) {
        this._enableFieldDragDrop();
      } else {
        this._enableFieldReorder();
      }
    },

    _silenceMoveButtons : function () {
      this._element.select('a.move' + this._NEW_TOOL_SELECTOR).invoke('observe', 'click', function(event) {
        event.stop();
      });
      this._element.select('a.move' + this._NEW_TOOL_SELECTOR).invoke('addClassName', this._ENHANCED_TOOL_CSS_CLASS);
    },

    _enableRequiredFlags : function () {
      var _this = this;
      this._element.select('label.flag' + this._NEW_TOOL_SELECTOR).each(function(item) {
        item._syncSource = item.down('input.uix-required');
        if (item._syncSource.checked) {
           item.addClassName('required');
        } else {
           item.removeClassName('required');
        }
        item.observe('click', function(event) {
          var elt = event.findElement('label.flag');
          if (elt._syncSource.checked) {
            elt.addClassName('required');
          } else {
            elt.removeClassName('required');
          }
        });
        item.addClassName(_this._ENHANCED_TOOL_CSS_CLASS);
      });
    },

    _enableAjaxDeletion : function() {
      var _this = this;
      this._element.select('.section-maquette a.delete' + this._NEW_TOOL_SELECTOR + ', .extension-maquette a.delete' + this._NEW_TOOL_SELECTOR).invoke('observe', 'click', function(event) {
        event.stop();
        var trigger = event.findElement('a');
        trigger.blur();
        if (trigger.disabled) {
          // Do nothing if the button was already clicked and it's waiting for a response from the server.
          return;
        }
        var url = trigger.readAttribute('href') + "?confirm=1&amp;form_token=" + $$('meta[name=form_token]')[0].content + (Prototype.Browser.Opera ? "" : "&amp;ajax=1");
        new XWiki.widgets.ConfirmedAjaxRequest(
          /* Ajax request URL */
          url,
          /* Ajax request parameters */
          {
            onCreate : function() {
              // Disable the button, to avoid a cascade of clicks from impatient users
              trigger.disabled = true;
            },
            onSuccess : function() {
              // remove the element
              // move all extensions (if any) to the "available extenions" panel
              var container = trigger.up('.section-maquette');
              var extensionsPanel = _this._element.down('.designer-panel.extensions .section-contents');
              if (container &amp;&amp; extensionsPanel) {
                container.select('.extension-maquette').each(function(item) {
                  extensionsPanel.insert(item);
                });
                _this._updateOrder(extensionsPanel, true);
              }
              trigger.up('.extension-maquette, .section-maquette').remove();
            },
            onFailure : function() {
              // Better luck next time!
              trigger.disabled = false;
            }
          },
          /* Interaction parameters */
          {
            confirmationText: "$services.localization.render('core.recyclebin.confirm')"
          }
        );
      });
      this._element.select('.section-maquette a.delete' + this._NEW_TOOL_SELECTOR + ', .extension-maquette a.delete' + this._NEW_TOOL_SELECTOR).invoke('addClassName', this._ENHANCED_TOOL_CSS_CLASS);
    },

    _enableSectionToggle : function () {
      this._enableExtensionToggle('.section-maquette', '.section-title input[type="checkbox"]');
    },

    _enableFieldToggle : function () {
      this._enableExtensionToggle('.extension-maquette', '.extension-title input[type="checkbox"]');
    },

   _enableExtensionToggle : function (extensionSelector, toggleSelector) {
      var _this = this;
      var syncSectionAppearance = function(extension, enabled) {
        if (enabled) {
          extension.removeClassName('disabled');
        } else {
          extension.addClassName('disabled');
        }
      };
      var activateSyncSectionAppearance = function(enablingElement) {
        enablingElement.addClassName(_this._ENHANCED_TOOL_CSS_CLASS);
        var extension = enablingElement.up(extensionSelector);
        syncSectionAppearance(extension, enablingElement.checked);
        enablingElement.observe('click', function(event) {
          syncSectionAppearance(extension, enablingElement.checked);
        });
      };
      this._element.select(extensionSelector + ' ' + toggleSelector + this._NEW_TOOL_SELECTOR).each(activateSyncSectionAppearance);
    },

    _enableSectionReorder : function () {
       var sectionsPanel = this._element.down('.designer-panel.sections');
       this._updateOrder(sectionsPanel)
       var _this = this;
       Sortable.destroy(sectionsPanel);
       Sortable.create(sectionsPanel, {
         tag : 'div',
         only: 'section-maquette',
         format: /^.*\.([^.]+)$/,
         handle : 'move',
         onUpdate : function(container) {
           _this._updateOrder(container);
         }
       });
    },

    _enableFieldReorder : function () {
       var _this = this;
       this._element.select('.designer-panel.sections .section-maquette .section-contents').each (function (section) {
         _this._updateOrder(section, true);
         Sortable.create(section, {
           tag : 'div',
           only: 'extension-maquette',
           format: /^.*\.([^.]+)$/,
           handle : 'move',
           onUpdate : function(container) {
             _this._updateOrder(container, true);
           }
         });
       });
    },

    _enableFieldDragDrop : function () {
       var _this = this;
       var sections = this._element.select('.designer-panel .section-maquette .section-contents');
       sections.each (function (section) {
         _this._updateOrder(section, true);
         Sortable.create(section, {
           tag : 'div',
           only: 'extension-maquette',
           format: /^.*\.([^.]+)$/,
           containment: sections,
           dropOnEmpty: true,
           constraint: false,
           handle : 'move',
           scroll: window,
           onUpdate : function(container) {
             _this._updateOrder(container, true);
           }
         });
       });
    },
   
    _updateOrder : function (container, updateContainer) {
       var i = 0;
       container.select ((updateContainer ? '.extension' : '.section') + '-title input.uix-order').each(function(item) {
         item.value = ++i;
       });
       if (updateContainer) {
         var uixid = container.up('.section-maquette').id;
         if (uixid) {
           container.select ('input.uix-pointid').each(function(item) {
             item.value = uixid;
           });
         }
       }
    },

    _handleSubmit : function () {
      var _this = this;

      var submitButton = this._form.down('input[type="submit"]');
      submitButton._originalValue = submitButton.value;

      var sectionsPanel = this._element.down('.designer-panel.sections');

      this._form.observe ('submit', function(event) {
        event.stop();
        // Update the order of the selected sections/fields
        _this._updateOrder(sectionsPanel);
        sectionsPanel.select('.section-maquette .section-contents').each (function (section) {
          _this._updateOrder(section);
        });

        // -----------------------------
        // TODO remove me!
        // -----------------------------
        _this._form.submit();
        return;
        // -----------------------------

        // ajax submit the form
        var formData = new Hash(_this._form.serialize(true));
        _this._form.disable();
        submitButton.value = 'Saving configuration...';
        submitButton.addClassName('loading');
        new Ajax.Request(_this._form.action, {
            method : 'post',
            parameters : formData,
            onSuccess : function () {
              submitButton.value = 'Configuration saved';
              submitButton.removeClassName('loading');
              submitButton.addClassName('success');
              new PeriodicalExecuter(function(pe) {
                submitButton.value = submitButton._originalValue;
                submitButton.removeClassName('success');
                pe.stop();
              }, 3);
            },
            onFailure : function (response) {
              var failureReason = response.statusText;
              if (response.statusText == '' /* No response */ || response.status == 12031 /* In IE */) {
                failureReason = 'Server not responding';
              }
              submitButton.value = submitButton._originalValue;
              submitButton.removeClassName('loading');
              new XWiki.widgets.Notification("$services.localization.render('core.viewers.comments.add.failed')" + failureReason, "error");
            },
            on0 : function (response) {
              response.request.options.onFailure(response);
            },
            onComplete : function () {
              _this._form.enable();
            }
        });
      });
    },

    _handleNewSection : function () {
      var _this = this;
      var newSectionForm = $('create-section-form');
      var newSectionInputs = $('new-section')
      if (!newSectionInputs) {
        return;
      }
      var newSectionButton = newSectionInputs.down('input[type="button"]');
      if (!newSectionForm || !newSectionInputs || !newSectionButton) {return;}
      // hide that form and duplicate the inputs under the section list
       newSectionButton._originalValue =  newSectionButton.value;
      newSectionForm.hide();
      newSectionButton.observe('click', function() {
        newSectionForm.select('input[type="text"]').each(function(input) {
          input.value = newSectionInputs.down('input[type="text"][name="' + input.name + '"]').value;
        });
        // AJAX submission
        var formData = new Hash(newSectionForm.serialize(true));
        newSectionForm.disable();
        newSectionButton.value = 'Creating section...';
        newSectionButton.addClassName('loading');
        new Ajax.Request(newSectionForm.action, {
            method : 'post',
            parameters : formData,
            onSuccess : function (response) {
              newSectionButton.value = 'Section created';
              newSectionButton.removeClassName('loading');
              newSectionButton.addClassName('success');
              newSectionInputs.insert({before : response.responseText});
              new PeriodicalExecuter(function(pe) {
                newSectionButton.value = newSectionButton._originalValue;
                newSectionButton.removeClassName('success');
                pe.stop();
              }, 3);
              _this._enhanceExtensionTools();
            },
            onFailure : function (response) {
              var failureReason = response.statusText;
              if (response.statusText == '' /* No response */ || response.status == 12031 /* In IE */) {
                failureReason = 'Server not responding';
              }
              newSectionButton.value = newSectionButton._originalValue;
              newSectionButton.removeClassName('loading');
              new XWiki.widgets.Notification("$services.localization.render('core.viewers.comments.add.failed')" + failureReason, "error");
            },
            on0 : function (response) {
              response.request.options.onFailure(response);
            },
            onComplete : function () {
              newSectionForm.enable();
            }
        });
      });
    }
  });
  return PhenoTips;
}(PhenoTips || {}));

document.observe("xwiki:dom:loaded", function(){
  window.wiz = new PhenoTips.widgets.PatientFormDesigner($('patient-form-designer'));
});</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.FormDesigner</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>8d49282c-87bb-4a60-a5ea-83a25d3c87fc</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#template("colorThemeInit.vm")

.designer-panel {
  width: 45%;
  float: left;
  position: relative;
}
.designer-panel.sections {
}
.designer-panel.hint {
  width: 10%;
}
.designer-panel.extensions {
}
.designer-panel.hint p {
  font-size: 0.9em;
  font-style: italic;
  opacity: 0.5;
  padding: 80px 5px;
  text-align: center;
}
.designer-panel.hint:before, .designer-panel.hint:after {
  color: $theme.linkColor;
  content: "";
  display: block;
  position: absolute;
  top: 2.5em;
  z-index: 10;
}

.designer-panel.hint:before {
  border-top: 32px solid transparent;
  border-bottom: 32px solid transparent;
  border-right: 32px solid;
  margin-top: -16px;
  margin-left: -32px;
  left: 50%;
}

.designer-panel.hint:after {
  border: 16px solid;
  margin-left: -16px;
  left: 50%;
}
.designer-panel .new-section {
  margin: 10px 10px 25px;
}
.designer-panel .new-section .section-title{
  color $theme.titleColor;
  text-transform: uppercase;
  padding-left: 16px;
  background: transparent url("$xwiki.getSkinFile('icons/silk/bullet_add.png')") left center no-repeat;
}
.designer-panel .section-maquette {
  margin: 10px 10px 25px;
}
.designer-panel .section-maquette .section-contents {
  min-height: 20px;
}
.extension-tools {
  float: right;
  margin-top: -25px;
}
.extension-tool {
  background-color: $theme.buttonSecondaryBackgroundColor;
  border: 1px solid $theme.borderColor;
  border-radius: 2px;
  box-shadow: 1px 1px 5px $theme.borderColor, -1px -1px 2px $theme.buttonSecondaryGradientColor inset;
  color: $theme.textColor !important;
  display: inline-block;
  width: 20px;
  height: 20px;
  line-height: 20px;
  margin: 2px;
  overflow: hidden;
  text-decoration: none !important;
  text-align: center;
  text-shadow: 0 0 3px $theme.borderColor;
}

.extension-tool:hover {
  text-shadow: 0 0 3px $theme.linkColor;
}
.extension-tool.flag input {
  display: none;
}
.extension-tool.flag {
  cursor: pointer;
}
.extension-tool.flag i {
  opacity: 0.3;
}
.extension-tool.flag.required {
  color: $theme.notificationErrorColor !important;
}
.extension-tool.flag.required i {
  opacity: .8;
}
.extension-tool.flag:hover {
  color: $theme.textColor !important;
}
.extension-tool.flag:hover i {
  opacity: .7 !important;
}
.extension-tool.flag.required:hover {
  color: $theme.notificationErrorColor !important;
}
.extension-tool.flag.required:hover i {
  opacity: 1 !important;
}
.extension-tool.delete {
  color: $theme.notificationErrorColor !important;
}
.extension-tool.move {
  cursor: move;
}

.designer-panel.sections .disabled {
  opacity: .3;
}
.designer-panel.extensions input[type="checkbox"] {
  display: none;
}

.section-maquette .section-title {
  color $theme.titleColor;
  text-transform: uppercase;
}
.section-maquette .section-title * {
  margin: 0 !important;
}
.section-maquette .section-contents {
  border: 1px dotted $theme.borderColor;
  background: $theme.backgroundSecondaryColor;
  padding: .5em 1em;
}
.extension-maquette {
  background-color: $theme.pageContentBackgroundColor;
  border: 1px solid $theme.borderColor;
  border-radius: .5em;
  color: $theme.buttonSecondaryTextColor;
  margin: 5px;
  padding: .5em;
  width: auto;
}
.extension-maquette:hover, .sections .section-maquette .section-contents:hover {
  background-color: $theme.highlightColor;
}
.extension-title {
  margin-right: 64px;
}
.extension-title p {
  margin: 0;
}</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
