<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.1">
  <web>PhenoTips</web>
  <name>PushPatient</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1396049911000</creationDate>
  <parent>PhenoTips.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1396052446000</date>
  <contentUpdateDate>1396049911000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content/>
  <object>
    <name>PhenoTips.PushPatient</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>767e254e-4d44-413d-8243-c88835562b5e</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>forbid</cache>
    </property>
    <property>
      <code>var PhenoTips = (function (PhenoTips) {
  var widgets = PhenoTips.widgets = PhenoTips.widgets || {};
  widgets.PushPatientWidget = Class.create({
    initialize : function() {
      // ---------------------------------------------------------------------
      // Search for the push patient elements. Exist if missing.
      // ---------------------------------------------------------------------
      this._element = $('push-patient');
      if (!this._element) { return; }
      this._pushLauncher = this._element.down('a');
      if (!this._pushLauncher) { return; }

      this._serviceURL = new XWiki.Document('PushPatientService', 'PhenoTips').getURL('get', 'outputSyntax=plain');
      this._patientId  = XWiki.currentDocument.page;
      //console.log("PUSH UI: Patient: " + this._patientId + ", serviceURL: " + this._serviceURL);

      // ---------------------------------------------------------------------
      // Initialize the UI
      // ---------------------------------------------------------------------
      this._initUI();

      // ---------------------------------------------------------------------
      // Attach launcher behavior:
      // ---------------------------------------------------------------------
      var _this = this;
      this._pushLauncher.observe('click', function(event) {
        event.stop();
        event.findElement().blur();
        _this._launchUI();
      });
      // ---------------------------------------------------------------------
      // Initialization done
      // ---------------------------------------------------------------------
    },

    _initUI: function() {
      var generateSection = function(id, title, intro) {
         return new Element('div', {'id': id, 'class' : 'section'})
                    .insert(title &amp;&amp; new Element('h2').update(title) || '')
                    .insert(intro &amp;&amp; new Element('p', {'class' : 'intro xHint'}).update(intro) || '')
                    .insert(new Element ('div', {'class' : 'section-contents'}));
      };

      this._container = new Element('form', {'id' : 'push-patients-ui', 'class' : 'xform', 'method' : 'post', 'action' : this._serviceURL});
      this._container.insert(generateSection('server-selection','Where to send this patient profile?','Remote PhenoTips server where this patient\'s data will be sent'))
                     .insert(generateSection('user-selection','Authentication on remote server','Please choose the user name to be used to authenticate on the server and '+
                                                   'send the data; this user will be marked as the reporter on the remote server.'))
                     .insert(generateSection('group-selection','Remote PhenoTips group','The PhenoTips group you would like to share this patient with on the remote server. ' +
                                                                       'If a group is selected, the group would be the owner and the given remote user will be a collaborator. ' +
                                                                       'If no group is selected, the given remote user will be the only owner.'))
                     .insert(generateSection('fields-selection','Patient data preview','Please review the data that will be sent to the server'));

      this._checkBoxApprove = new Element('input',{type:'checkbox', 'id':'approve-checkbox', 'value':'approve'});
      this._labelApprove = new Element('label', {'id':'approve-label'});
      this._labelApprove.insert(this._checkBoxApprove).insert(" I agree to push this data to the server");
      var approveElement = new Element('div', {'class' : 'confirm-push plainmessage'});
      approveElement.insert(this._labelApprove);
      this._container.insert(approveElement);

      this._serverManager = this._container.down('#server-selection .section-contents');
      this._userManager   = this._container.down('#user-selection .section-contents');
      this._groupManager  = this._container.down('#group-selection .section-contents');
      this._fieldsManager = this._container.down('#fields-selection .section-contents');

      this._initServerSelector();
      this._initMainFormActions();

      this._dialog = new MS.widgets.ModalPopup(this._container, false, {'title': 'Pushing ' + this._patientId +
                                                                        ' to a remote database...', 'verticalPosition': 'top', 'removeOnClose': false});
    },

    _generateServerFirstMessage: function() {
      return new Element('div', {'class' : 'warningmessage'}).update("Please select server first");
    },

    _generateServerAndUserFirstMessage: function() {
      return new Element('div', {'class' : 'warningmessage'}).update("Please select server and valid user first");
    },

    _generateNoPatientJSONMessage: function(fieldList) {
      var retryButton = new Element('input', {type: 'button', name : 'retry', 'value': 'Retry', 'class' : 'button secondary'}).wrap('span', {'class' : 'buttonwrapper'});
      var _this = this;
      retryButton.observe('click', function(event) {
        _this._generateDataPreview(fieldList);
      });
      return new Element('div', {'class' : 'errormessage'}).update("Failed to generate preview of the patient data").insert(retryButton);
    },

    _generateNoServerListMessage: function() {
      var retryButton = new Element('input', {type: 'button', name : 'retry', 'value': 'Retry', 'class' : 'button secondary'}).wrap('span', {'class' : 'buttonwrapper'});
      var _this = this;
      retryButton.observe('click', function(event) {
        _this._launchUI();
      });
      return new Element('div', {'class' : 'errormessage'}).update("Can not access the list of remote servers. " +
                                                                   "Please contact your administrator for further details.").insert(retryButton);
    },

    _generateCantConnectToServerMessage: function(failMessage, username, password) {
      var retryButton = new Element('input', {type: 'button', name : 'retry', 'value': 'Retry', 'class' : 'button secondary'}).wrap('span', {'class' : 'buttonwrapper'});
      var _this = this;
      retryButton.observe('click', function(event) {
        _this._loginAndGetConfig(username, password);
      });
      return new Element('div', {'class' : 'errormessage'}).update(failMessage + " ").insert(retryButton);
    },

    _generateNoPushServerConfiguredMessage: function() {
          return new Element('div', {'class' : 'errormessage'}).update("No remote PhenoTips target servers are configured in your system.&lt;br/&gt;" +
                                                                       "Please contact your administrator for further details.");
    },

    _generateIncorrectCredentialsMessage: function() {
          return new Element('div', {'class' : 'errormessage'}).update("Unable to authenticate user: incorrect credentials");
    },

    _generateFailedToPushPatient: function(errorMessage, retryButton) {
      var result = new Element('div', {'class' : 'errormessage'}).update(errorMessage);

      if (retryButton)
      {
        var retryButton = new Element('input', {type: 'button', name : 'retry', 'value': 'Retry', 'class' : 'button secondary'}).wrap('span', {'class' : 'buttonwrapper'});
        var _this = this;
        retryButton.observe('click', function(event) {
          _this._pushPatient();
        });
        result.insert(retryButton);
      }
      return result;
    },

    _onUnapprovedUser: function() {
      this._patientData = undefined;

      this._groupManager.update(this._generateServerAndUserFirstMessage());
      this._fieldsManager.update(this._generateServerAndUserFirstMessage());

      this._pushButton.disable();   // disabled until the server is selected and fields are confirmed
      this._labelApprove.hide();

      this._pushResultSection.update("");

      this._patientFieldList = undefined;
      this._userGroupsList   = undefined;
    },

    _onNoServerSelected: function() {
      this._selectedServer    = undefined;
      this._lastApprovedUser  = undefined;
      this._lastSelectedGroup = undefined;
      this._userLoginError    = undefined;

      this._serverInfo.hide();
      this._userManager.update(this._generateServerFirstMessage());

      this._onUnapprovedUser();
    },

    _disableInputs: function(disableCancelAsWell) {
       // disable all UI elements while waiting for AJAX rerquest to complete
       this._container.addClassName('loading');
       var allInputs = this._container.getElementsByTagName('input');
       for (var i = 0; i &lt; allInputs.length; i++) {
          if (allInputs[i].disabled) {
            allInputs[i].__wasDisabledState = true;
          } else {
            allInputs[i].disable();
          }
       }
       // disable server-selector: it is an option not an input
       this._serverSelector.down('select').disable();
       // but enable the cancel button
       if (!disableCancelAsWell) {
          this._cancelButton.enable();
       }
    },

    _restoreInputs: function() {
       this._container.removeClassName('loading');
       // but do not enable what was disbaled before
       var allInputs = this._container.getElementsByTagName('input');
       for (var i = 0; i &lt; allInputs.length; i++) {
          if  (allInputs[i].__wasDisabledState) {
             delete(allInputs[i].__wasDisabledState);
          } else {
             allInputs[i].enable();
          }
       }
       // enable server-selector: it is an option not an input
       this._serverSelector.down('select').enable();
    },

    _launchUI : function() {
      var _this = this;
      if (this.__launchUIAjaxInProgress) { return; }

      // reset data about available push servers
      this._remoteServers       = {};
      this._numAvailableServers = 0;

      this._onNoServerSelected();

      this._serverLoadMessages.update(new Element('div', {'class' : 'infomessage'}).update("Retrieving server list..."));
      this._serverLoadMessages.show();
      this._serverSelector.hide();
      this._container.addClassName('loading');

      //AJAX 1: Get available remote servers
      new Ajax.Request(this._serviceURL, {
        method: _this._container.method,
        parameters : {'do':'getremotes', 'patientId': _this._patientId},
        onCreate : function() {
          _this.__launchUIAjaxInProgress = true;
          _this._dialog.showDialog();
          _this._container.up('.msdialog-modal-container').style.zIndex = 3001;
        },
        onSuccess : function (response) {
          console.log("PUSH: Got response for the getremotes request");
          var data = response.responseJSON;

          if (!data || data.length == 0) {
            //console.log("PUSH: no remotes defined");
            // if there are no configured servers, display warning message
            _this._serverLoadMessages.update(_this._generateNoPushServerConfiguredMessage());
          } else {
            //console.log("PUSH: Found " + data.length + " remotes: " + stringifyObject(data));
            // otherwise show the list of servers to pick from
            _this._serverLoadMessages.hide();
            _this._populateServerList(data);
          }
        },
        onFailure : function(response) {
          _this._serverLoadMessages.update(_this._generateNoServerListMessage());
        },
        on0 : function (response) {
          response.request.options.onFailure(response);
        },
        onComplete : function() {
          _this.__launchUIAjaxInProgress = false;
          _this._container.removeClassName('loading');
          console.log("PUSH: getting remotes - complete");
        }
      });
    },

    _queryStoredUserName: function() {
      var _this = this;
      this._userManager.update("");
      //AJAX 2: Get the user name last used for this server
      new Ajax.Request(this._serviceURL, {
        method: _this._container.method,
        parameters : {'do':'getuser', 'serverid': this._selectedServer },
        onCreate : function() {
          console.log("PUSH: get username - start");
          _this._disableInputs();
        },
        onSuccess : function (response) {
          console.log("PUSH: Got user last used for the server (JSON: " + stringifyObject(response.responseJSON) + ")");
          if (response.responseJSON.remoteUserName) {
            _this._lastApprovedUser = response.responseJSON.remoteUserName;
          }
        },
        onFailure : function(response) {
          console.log("PUSH: couldn't not get the user last used for this server");
          // just ignore the failure and let user manualy enter username/password
        },
        on0 : function (response) {
          response.request.options.onFailure(response);
        },
        onComplete : function() {
          _this._restoreInputs();
          console.log("PUSH: getting username - complete");
          if (_this._lastApprovedUser) {
              _this._loginAndGetConfig(_this._lastApprovedUser, null);  // attempt a password-less login using stored token
          }
          else {
              _this._updateUserList();
          }
        }
      });
    },

    _loginAndGetConfig: function(username, password) {
      console.log("loginAndGetConfig: probing " + username);

      var _this = this;
      // TODO: suport workflow when tokens are not enabled e.g. on the server side (have to remember username/password in JS)
      var params = {'do':'getremoteconfig', 'serverid': this._selectedServer, 'savetoken':true };
      if (password) {
        params['usr'] = username;
        params['pwd'] = password;
      }     // else atempt a passwordless login using the stored username

      //AJAX 3: attempt to authorize on the remote server + get remote config
      new Ajax.Request(this._serviceURL, {
        method: _this._container.method,
        parameters : params,
        onCreate : function() {
          console.log("PUSH: get remote config - start");
          _this._disableInputs();
        },
        onSuccess : function (response) {
          console.log("PUSH: Got response from server: " + stringifyObject(response.responseJSON));
          _this._lastLoginResponse = response.responseJSON;    // TODO: store per user+server locally, so that there is no need to AJAX again for the same user if selected again?
        },
        onFailure : function(response) {
          console.log("PUSH: unable to get a response from remote server");
          _this._lastLoginResponse = {"status":"error", "serverconnectproblem":true};  // simulate "unable to connect" response from script service
        },
        on0 : function (response) {
          response.request.options.onFailure(response);
        },
        onComplete : function() {
          this._restoreInputs();
          console.log("PUSH: get remote config - complete");

          if (this._lastLoginResponse.status == "success") {
            console.log("--&gt; login successful!");
            this._lastApprovedUser = username;
            this._updateUserList();  // update current user list with an indication that this user has successfully logged in
            this._populateGroupsAndData(this._lastLoginResponse.groups, this._lastLoginResponse.serverfields);
          }
          else {
            console.log("--&gt; login failed!");
            if (this._lastApprovedUser == username) {
              this._lastApprovedUser = undefined;   // this user is no longer approved
            }
            this._updateUserList(username, this._lastLoginResponse, username, password);
          }
        }.bind(this)
      });
    },

    _logoutUser: function() {
      var _this = this;
      var params = {'do':'removetokens', 'serverid': this._selectedServer };

      new Ajax.Request(this._serviceURL, {
        method: _this._container.method,
        parameters : params,
        onCreate : function() {
          console.log("PUSH: logout user");
          try{
          _this._disableInputs();
          } catch (e) {console.log("ERROR: " + e); }
        },
        onSuccess : function (response) {
          _this._lastLoginResponse = undefined;
          _this._lastApprovedUser  = undefined;
          _this._updateUserList();
        },
        onFailure : function(response) {
          alert("Failed to log out");
        },
        on0 : function (response) {
          response.request.options.onFailure(response);
        },
        onComplete : function() {
          this._restoreInputs();
          console.log("PUSH: logout - complete");
        }.bind(this)
      });
    },

    _updateUserList: function(selectedUserName, lastLoginResponse, user_when_failed, password_when_failed) {
      if (lastLoginResponse) {
        if (this._lastLoginResponse.unauthorizedserver) {
          this._userManager.update(this._generateCantConnectToServerMessage("This server is not authorized to push patients to the selected server.&lt;br/&gt;"+
                                                                            "please contact your administrator", user_when_failed, password_when_failed));
          return;
        }
        if (this._lastLoginResponse.serverconnectproblem) {
          this._userManager.update(this._generateCantConnectToServerMessage("Cannot connect to selected PhenoTips server.", user_when_failed, password_when_failed));
          return;
        }
      }

      console.log("updateUserList: " + selectedUserName + ", last approved: " + this._lastApprovedUser);
      var _this = this;

      var userList = new Element('table', {id : 'user-list'});

      // either show only the username/password inputs + "authorize" button or
      // a radiobox [last approved user] and [the inputs + button above]
      // =&gt; re-login at every change

      // 1) if `lastApprovedUser` and `selectedUserName` are not set: only username/password inputs (selected)
      // 1) if `lastApprovedUser` is not set and `selectedUserName` is set: only username/password inputs (selected and prefilled)
      // 1) if `lastApprovedUser` is set and `selectedUserName` is not or equal to `lastApproved`: select lastApproved, plus an option to enter username/password
      // 2) if `lastApprovedUser` is set and `selectedUserName` is also set and different: show username/password (selected &amp; prefilled) + an option to switch to `lastApproved`

      var _addUserOption = function (checked, iconType, labelText, handlerWhenSelected, controlledElements) {
        var optionWrapper = new Element('tr');
        var input = new Element('input', {"type" : "radio", "value": labelText, "name": "select-user"});
        if (checked) {
          input.checked = true;
        }
        var label = new Element('label').insert(input).insert(labelText);
        optionWrapper.insert(new Element('span', {'class' : 'fa fa-' + iconType}).wrap('td')).insert(label.wrap('td'));

        if (controlledElements) {
          optionWrapper.insert(controlledElements.wrap('td', {'class' : 'controlled-element'}));
        }

        input.observe('change', function(event) {
             var trigger = event.findElement('input');

             // disable inputs for all other user options
             var inputs  = trigger.up('table').getElementsByTagName('input');
             for (var i = 0; i &lt; inputs.length; i++) {
                if (inputs[i].getAttribute("name") != "select-user")
                    inputs[i].disable();
             }
             // enable inputs for this option
             var inputs  = trigger.up('tr').getElementsByTagName('input');
             for (var i = 0; i &lt; inputs.length; i++) {
                 inputs[i].enable();
             }

             handlerWhenSelected();
        });
        return optionWrapper;
      };

      var preApprovedChecked = false;
      if (this._lastApprovedUser) {
        preApprovedChecked = !selectedUserName || (this._lastApprovedUser == selectedUserName);
        var forgetmeBox = new Element('input', {type: 'button', name : 'logout', 'value': 'Log out', 'class' : 'button secondary'}).wrap('span', {'class' : 'buttonwrapper'});
        forgetmeBox.observe('click', function(event) {
           this._onUnapprovedUser();
           this._logoutUser();
        }.bind(this));
        var preApprovedOption = _addUserOption(preApprovedChecked, "check", "Currently authenticated user: &lt;strong&gt;" + this._lastApprovedUser + "&lt;/strong&gt;&amp;nbsp;",
                                               function(){
                                                 this._userLoginError.hide();
                                                 this._onUnapprovedUser();
                                                 this._loginAndGetConfig(this._lastApprovedUser);
                                               }.bind(this), forgetmeBox);
        userList.insert(preApprovedOption);
      }

      // add an option to enter username &amp; password manually
      var userPasswrodBox = new Element("span", {'class' : 'user-password-box'});
      var userNameBox = new Element("input", {type: 'text', "id": "newusername", "value": "", "placeholder": 'user name', size: 12});
      if (selectedUserName) {
        userNameBox.value = selectedUserName;
      }
      var passwordBox = new Element("input", {type:'password', "id": "password", "value": "", "placeholder": 'password', size: 12});
      var authorizeButton = new Element('input', {type: 'button', id:"authorizenewuser", 'name':'authorize', 'value':'Log in', 'class':'button secondary'});
      authorizeButton.observe('click', function(event) {
         if (passwordBox.value != "") {
             this._userLoginError.hide();
             this._loginAndGetConfig(userNameBox.value, passwordBox.value);
         } else {
             this._userLoginError.update("No password provided");
             this._userLoginError.show();
         }
      }.bind(this));

      if (preApprovedChecked) {
         userNameBox.disable();
         passwordBox.disable();
         authorizeButton.disable();
      }
      userPasswrodBox.insert(userNameBox.wrap('label', {'class' : 'fa fa-user'}))
                     .insert(" ")
                     .insert(passwordBox.wrap('label', {'class' : 'fa fa-key'}))
                     .insert(" ")
                     .insert(authorizeButton.wrap('span', {'class' : 'buttonwrapper'}));

      if (this._lastApprovedUser) {
          userList.insert(_addUserOption(!preApprovedChecked, "user", "Another remote user: ", this._onUnapprovedUser.bind(this), userPasswrodBox));
      } else {
          userList.insert(userPasswrodBox.wrap('td', {'class' : 'controlled-element'}).wrap('tr'));
      }

      this._userLoginError = new Element('div', {'class' : 'errormessage'});
      this._userLoginError.hide();
      this._userManager.update(userList).insert(this._userLoginError);

      if (lastLoginResponse) {
        if (this._lastLoginResponse.loginfailed &amp;&amp; password_when_failed != "") {   // ignore unseccessful passwrodless logins - maybe token has expired, it is OK
          this._userLoginError.update("Unable to authorize user: incorrect credentials");
          this._userLoginError.show();
        }
      }
    },

    // ---------------------------------------------------------------------
    // Display group picker and data preview - once server/user are known
    // ---------------------------------------------------------------------
    _populateGroupsAndData: function(groupList, fieldList) {
      //console.log("Fields: " + stringifyObject(fieldList));
      this._displayGroupPicker(groupList);
      this._generateDataPreview(fieldList);
    },

    _displayGroupPicker: function(groupList) {
      if (!groupList) {
        groupList = this._userGroupsList;
      }
      else {
        this._userGroupsList = groupList;
      }
      console.log("Groups: " + stringifyObject(groupList));

      var groupListElement = new Element('table', {id : 'user-list'});

      var _addGroupOption = function (checked, iconType, labelText, value) {
        var optionWrapper = new Element('tr');
        var input = new Element('input', {"type" : "radio", "value": value, "name": "select-group"});
        if (checked) {
          input.checked = true;
        }
        var label = new Element('label').insert(input).insert(labelText);
        optionWrapper.insert(new Element('span', {'class' : 'fa fa-' + iconType}).wrap('td')).insert(label.wrap('td'));
        return optionWrapper;
      };

      if (!this._updatingExistingPatient())  {
          var noGroupMessage = "None";
          if (groupList.length == 0) {
            noGroupMessage += " &lt;span class ='hint'&gt;(user " + this._lastApprovedUser + " does not belong to any PhenoTips groups on the selected server)&lt;/span&gt;";
          }
          groupListElement.insert(_addGroupOption(true, "user", noGroupMessage, "__self"));

          groupList.each(function (group) {
                groupListElement.insert(_addGroupOption(false, "group", group, group));
            });
      } else {
          var msg = "Keep existing group(s)";
          msg += " &lt;span class ='hint'&gt;(the group can't be changed when updating an existing patient)&lt;/span&gt;";
          groupListElement.insert(_addGroupOption(true, "check", msg, "__self"));
      }

      this._groupManager.update(groupListElement);
    },

    _generateDataPreview: function(fieldList) {
      this._patientFieldList = fieldList;
      var _this = this;
      //AJAX 4: local AJAX request to get patient JSON to let the user see the actual data being pushed
      new Ajax.Request(this._serviceURL, {
        method: _this._container.method,
        parameters : { "do":"getpatientjson", "patientid":_this._patientId, "fields":Object.toJSON(this._patientFieldList) },
        onCreate : function() {
          console.log("PUSH: get patient JSON - start");
          _this._disableInputs();
        },
        onSuccess : function (response) {
          console.log("PUSH: Got response from server: " + stringifyObject(response.responseJSON));
          _this._displayPatientData(response.responseJSON);
        },
        onFailure : function(response) {
          console.log("PUSH: unable to get patient JSON");
          _this._fieldsManager.update(_this._generateNoPatientJSONMessage(fieldList));
        },
        on0 : function (response) {
          response.request.options.onFailure(response);
        },
        onComplete : function() {
          _this._restoreInputs();
          console.log("PUSH: get patient JSON - complete");
        }
      });
    },

    _displayPatientData: function(patientData) {
      this._checkBoxApprove.checked = false;
      this._checkBoxApprove.enable();
      this._labelApprove.show();
      this._patientData = patientData;
      //console.log("Data: " + stringifyObject(patientData));
      this._fieldsManager.update(this._generatePatientDataPreview(patientData));
    },


    _generatePatientDataPreview: function(patientJSON) {
        var dataCategories = [
           {
              'name'     : 'external_id',
              'title'    : 'Identifier',
              'callback' : '__displayId'
           },
           {
              'name'     : 'sex',
              'title'    : 'Sex',
              'callback' : '__displaySex'
           },
           {
              'name'     : 'features',
              'title'    : 'Phenotipic features',
              'callback' : '__displayFeatures'
           },
           {
              'name'     : 'disorders',
              'title'    : 'Known disorders',
              'callback' : '__displayFeatures'
           },
        ];
        var result = new Element('dl');
        var _this = this;
        dataCategories.each(function(c) {
           patientJSON[c.name] &amp;&amp; _this[c.callback] &amp;&amp; result.insert(new Element('dt').update(c.title || c.name)).insert(_this[c.callback](patientJSON[c.name]).addClassName('data-preview-section')); 
        });
        return result;
    },

    __displayId : function(id) {
        return new Element('dd').insert(id);
    },
    __displaySex : function(sex) {
        return new Element('dd').insert((sex == "F") ? "Female" : (sex == "M" ? "Male" : "Unknown"));
    },

    __displayFeatures : function(features) {
        var result = new Element('dd');
        features.each(function (f) {
          result.insert(new Element('div', {'class' : (f.observed == "no" ? "negative" : "")}).update((f.observed == "no" ? "NO " : "") + f.label).insert(f.id &amp;&amp; new Element('span', {'class' : 'hint'}).update(' (' + f.id + ')')  || '') );
        });
        return result;
    },

    // ---------------------------------------------------------------------
    // Generate server selection UI
    // ---------------------------------------------------------------------
    _populateServerList: function(pushServerList) {
      //console.log("Server list input: " + stringifyObject(pushServerList));

      this._remoteServers = {};
      var servers = [];

      this._numAvailableServers = pushServerList.length;
      for(var i = 0; i &lt; pushServerList.length; i++) {
          var serverInfo = pushServerList[i].serverinfo;
          var pushInfo   = pushServerList[i].pushinfo;
          var name       = serverInfo.serverID;
          servers.push(name);

          serverInfo.serverURL = this._addHTTP(serverInfo.serverURL);

          var pushAge    = pushInfo ? pushInfo.lastPushAgeInHours : -1;
          var remoteID   = pushInfo ? pushInfo.remotePatientID : "";
          var remoteGUID = pushInfo ? pushInfo.remotePatientGUID : "";
          var remoteURL  = pushInfo ? (serverInfo.serverURL + pushInfo.remotePatientURL) : "";
          this._remoteServers[name] = {"url": serverInfo.serverURL,
                                       "desc": serverInfo.serverDescription,
                                       "pushAgeHours": pushAge,
                                       "remoteID": remoteID,
                                       "remoteGUID": remoteGUID,
                                       "remoteURL": remoteURL};
      }
      servers.sort();
      var _this = this;

      //console.log("Remote servers as cached: " + stringifyObject(this._remoteServers))

      if (pushServerList.length == 1) {
        this._serverSelector.hide();
        var serverName = servers[0];
        this._selectServer(serverName);
      } else {
        var serverSelectInput = this._serverSelector.down('select');
        serverSelectInput.update(new Element('option', {value: "none"}).update("Please select a server form the list"));

        servers.each(function (server) {
            serverSelectInput.insert(new Element('option', {'value': server}).update(server));
        });
        this._serverSelector.show();
      }
    },

    _selectServer: function(serverName, keepUserAndGroup) {
        this._selectedServer = serverName;
        var serverData = this._remoteServers[serverName];
        var serverLink = new Element('a', {'href' : serverData.url, 'target' : '_blank', 'class' : 'remote-server-name'}).update(this._selectedServer);

        if (this._numAvailableServers == 1) {
            this._serverInfo.update("There is only one configured remote server: ");
        }

        var existingPatientDataInfo = '';

        if (serverData.pushAgeHours !== undefined &amp;&amp; serverData.pushAgeHours &gt;=0) {
           existingPatientDataInfo = new Element('dd');

           var description = new Element('p', {'class' : 'hint'});
           var lastUpdated = serverData.pushAgeHours;
           description.insert("This patient has been uploaded to ").insert(serverLink.clone(true));
           if (lastUpdated &lt; 1) {
              description.insert(" less than an hour ago");
           } else {
              if (lastUpdated &gt;= 48) {
                  description.insert(" " + Math.floor(lastUpdated/24) + " days ago");
              } else {
                  description.insert(" " + lastUpdated + " hours ago");
              }
           }

           description.insert(" as ").insert(new Element('a', {'href' : serverData.remoteURL, 'target' : '_blank'}).update(serverData.remoteID)).insert('.');
           existingPatientDataInfo.insert(description);

           var _this = this;
           var selectPushType = new Element('p');
           var radio1 = new Element('input', {"type" : "radio", "value": "update", "id":"choice-update-patient", "name": "new-or-update"});
           radio1.checked = true;
           radio1.observe('change', function() { _this._displayGroupPicker() });
           var label1 = new Element('label').insert(new Element('span', {'class' : 'fa fa-refresh'}).update(' ')).insert(radio1).insert("Update remote patient");
           var radio2 = new Element('input', {"type" : "radio", "value": "new", "id":"choice-new-patient", "name": "new-or-update"});
           radio2.observe('change', function() { _this._displayGroupPicker() } );
           var label2 = new Element('label').insert(new Element('span', {'class' : 'fa fa-plus-square'}).update(' ')).insert(radio2).insert("Create new remote patient");
           existingPatientDataInfo.insert(label1.wrap('p')).insert(label2.wrap('p'));
        }

        this._serverInfo.update(new Element('dl')
                           .insert(serverLink.clone(true).wrap('dt'))
                           .insert(serverData.desc &amp;&amp; new Element('dd', {'class' : 'hint'}).update(serverData.desc) || '')
                           .insert(existingPatientDataInfo || '')
        );

        if (!keepUserAndGroup) {
            this._serverInfo.show();
            this._queryStoredUserName();
        }
    },

    _onServerOptionChange: function() {
      var serverSelectInput = this._serverSelector.down('select');
      var selectedServer = serverSelectInput.options[serverSelectInput.selectedIndex].value;
      this._onNoServerSelected();
      if (selectedServer != 'none') {
        this._selectServer(selectedServer);
      }
    },

    _initServerSelector: function() {
      this._serverLoadMessages = new Element('div', {id: 'server-load-messages'});
      this._serverLoadMessages.hide();

      var options = new Element('select', {id: 'server-selector'});
      options.insert(new Element('option', {value: "none"}).update("Loading server list..."));
      options.observe('change', this._onServerOptionChange.bind(this));   // on server selection: enable &amp; repopulate user/group lists

      this._serverSelector = new Element('div', {id: 'server-selector-div'});
      this._serverSelector.hide();
      this._serverSelector.update(options);

      this._serverInfo = new Element('div', {id: 'server-info'});

      this._serverManager.update(this._serverLoadMessages).insert(this._serverSelector ).insert(this._serverInfo);
    },

    // ---------------------------------------------------------------------
    // Generate and handle main "Cancel" and "Push" buttons
    // ---------------------------------------------------------------------
    _initMainFormActions : function() {
      var _this = this;
      var buttons = new Element('div', {'class' : 'buttons'});
      buttons.insert(new Element('input', {type: 'hidden', name : 'xaction', 'value': 'push'}));
      buttons.insert(new Element('input', {type: 'hidden', name : 'patient', 'value': this._patientId}));
      buttons.insert(new Element('input', {type: 'submit', name : 'submit',  'value': 'Push', 'class' : 'button', 'id': 'push_patient_button'}).wrap('span', {'class' : 'buttonwrapper'}));
      buttons.insert(new Element('input', {type: 'button', name : 'close',   'value': 'Cancel', 'class' : 'button secondary'}).wrap('span', {'class' : 'buttonwrapper'}));
      this._container.insert(buttons);

      this._pushResultSection = new Element ('div', {'class' : 'section-contents'});
      this._container.insert(this._pushResultSection);

      this._cancelButton = buttons.down('input[name="close"]');
      this._cancelButton.observe('click', function(event) {
        _this._dialog.closeDialog();
      })

      this._pushButton = buttons.down('input[name="submit"]');
      this._checkBoxApprove.observe("click", function(event) {
        if (_this._checkBoxApprove.checked) {
          _this._pushResultSection.update("");
          _this._pushButton.enable();
        }
        else
          _this._pushButton.disable();
      });

      this._container.observe('submit', function(event) {
        event.stop();
        _this._pushPatient();
      })  // observe('submit')
    },

    _updatingExistingPatient: function() {
        var pushUpdate = false;
        var radioSelectUpdate = document.getElementById('choice-update-patient');
        if (radioSelectUpdate) {
            pushUpdate = radioSelectUpdate.checked;
        }
        return pushUpdate;
    },

    _pushPatient: function() {
        var _this = this;
        _this._pushResultSection.update("");
        var params = {"do":"push", 'serverid': this._selectedServer, 'patientid': this._patientId};

        params["fields"] = Object.toJSON(this._patientFieldList);

        if (this._updatingExistingPatient()) {
            params["guid"] = _this._remoteServers[_this._selectedServer].remoteGUID;
        }

        var radioSelectValue = $$('input:checked[type=radio][name="select-group"]')[0].value;
        if (radioSelectValue != "__self") {
            params["groupname"] = radioSelectValue;
        }

        console.log("PUSH request params: " + stringifyObject(params));

        new Ajax.Request(this._serviceURL, {
          method: _this._container.method,
          parameters : params,
          onCreate : function() {
            _this._disableInputs(true /* disable cancel button as well */);
          },
          onSuccess : function(response) {
            try {
                console.log("Got response: " + stringifyObject(response.responseJSON));
                var res = response.responseJSON;
                if (res.status == "success") {
                    _this._checkBoxApprove.checked = false;

                    // update cached value for how this patient is represented on this remote server
                    var newURL = _this._remoteServers[_this._selectedServer].url + res.patienturl;
                    _this._remoteServers[_this._selectedServer]["pushAgeHours"] = 0;
                    _this._remoteServers[_this._selectedServer]["remoteID"]     = res.patientid;
                    _this._remoteServers[_this._selectedServer]["remoteGUID"]   = res.patientguid;
                    _this._remoteServers[_this._selectedServer]["remoteURL"]    = newURL;

                    if (_this._updatingExistingPatient()) {
                        var linkToOld = "(&lt;a href='" + newURL + "' target='_blank'&gt;click here to open remote patient&lt;/a&gt;)";
                        _this._pushResultSection.update(new Element('div', {'class' : 'infomessage'}).update("Updated patient successfully. " + linkToOld));
                    } else {
                        var linkToNew = "&lt;a href='" + newURL + "' target='_blank'&gt;" + res.patientid + "&lt;/a&gt;";
                        _this._pushResultSection.update(new Element('div', {'class' : 'infomessage'})
                                                .update("Pushed patient successfully, ID of the new patient on the remote server is " + linkToNew));
                    }

                    // update UI to reflect that we have already pushed this patient: default option
                    // is now "update" and the group choice should now be correspondingly removed
                    _this._selectServer(_this._selectedServer, true);
                    _this._displayGroupPicker();
                } else {
                    if (res.updatesdisabled) {
                        _this._pushResultSection.update(_this._generateFailedToPushPatient("Unable to update this patient - updates are disbaled on the remote server."));
                    } else
                    if (res.invalidguid) {
                        _this._pushResultSection.update(_this._generateFailedToPushPatient("Unable to update this patient - stored remote GUID is incorrect. "+
                                                                                           "Maybe the patient was deleted on the remote server."));
                    } else
                    if (res.accessdeniedguid) {
                        _this._pushResultSection.update(_this._generateFailedToPushPatient("Unable to update this patient - access denied. "+
                                                                                           "Check if the given remote user has access rights to update the patient."));
                    } else
                    if (res.accessdeniedguid) {
                        _this._pushResultSection.update(_this._generateFailedToPushPatient("Unable to update this patient."));
                    }
                }
                //_this._dialog.closeDialog();
              } catch (e) {
                console.log("EXCEPTION: " + e);
                _this._pushResultSection.update(_this._generateFailedToPushPatient("Error updating patient (" + e + ")", true));
              }
          },
          onFailure : function(response) {
            var provideRetry  = false;
            var failureReason = response.statusText;
            if (response.statusText == '' || response.status == 12031 ) {   // no response + IE special case
               failureReason = 'Server not responding';
               provideRetry  = true;
            }
            _this._pushResultSection.update(_this._generateFailedToPushPatient(failureReason, provideRetry));
          },
          on0 : function (response) {
            response.request.options.onFailure(response);
          },
          onComplete : function() {
            _this._restoreInputs();
          }
        });
    },

    _addHTTP: function(url) {
        if (!/^(f|ht)tps?:\/\//i.test(url)) {
          url = "http://" + url;
        }
        return url;
    }

  });
  return PhenoTips;
}(PhenoTips || {}));
//  ========================================================================
// End PhenoTips augmentation.

document.observe("xwiki:dom:loaded", function() {
  new PhenoTips.widgets.PushPatientWidget();
});



//--- debug:

function stringifyObject(obj) {
    return _printObjectInternal(obj, 1);
}

function _printObjectInternal(o, level) {
    if (level &gt; 10) return "...[too deep, possibly a recursive object]...";
    var output = '';
    if (typeof o == 'object')
    {
        if (Object.prototype.toString.call(o) === '[object Array]')
        {
            output = '[';
            for (var i = 0; i &lt; o.length; i++) {
                if (i &gt; 0) output += ', ';
                output += _printObjectInternal(o[i], level+1);
            }
            output += ']';
        }
        else
        {
            output = '{';
            var idx = 0;
            if (level == 0) output += '\n';
            for (property in o) {
                if (!o.hasOwnProperty(property)) continue;

                if (level != 0 &amp;&amp; idx != 0 )
                    output += ', ';
                output += property + ': ' + _printObjectInternal(o[property], level+1);

                if (level == 0)
                    output += '\n';
                idx++;
            }
            output += '}';
        }
    }
    else if (typeof o == 'string') {
        output = "'" + o + "'";
    }
    else
        output = ''+o;
    return output;
}
</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.PushPatient</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>039b7857-377d-4086-8a44-e16fce031439</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>forbid</cache>
    </property>
    <property>
      <code>#template("colorThemeInit.vm")

#push-patients-ui td {
  border: 0 none;
  padding: .3em;
  text-align: left;
  vertical-align: top;
}

#push-patient {
  display: inline;
}

#user-selection input[type="text"],
#user-selection input[type="password"]{
  width: 30%;
  box-shadow: 0px 1px 2px rgb(170, 170, 170) inset;
}

#user-selection input[type="text"]:focus, input[type="password"]:focus, textarea:focus {
    border-color: $theme.linkColor;
}

#user-selection input.button:disabled {
    background-image: none;
}

#user-selection #rememberme-checkbox {
  margin-top: 0.5em;
}

#user-selection label {
  white-space:nowrap;
}

#server-info, #fields-selection dl {
  background: none repeat scroll 0 0 #FFFFFF;
  box-shadow: 0 0 3px #AAAAAA;
  margin: 15px 0 0;
  padding: 0.5em;
  position: relative;
}

#server-info:before, #server-info:after,
#fields-selection dl:before, #fields-selection dl:after {
  content: "";
  display: block;
  position: absolute;
  border: 10px solid transparent;
  border-top: 0 none;
  border-bottom-color: #FFF;
  top: -9px;
}

#server-info:before,
#fields-selection dl:before {
  border-bottom-color: #AAA;
  top: -10px;
}
#server-info dt,
#fields-selection dt:first-child {
  margin-top: 0;
}
#server-info .fa {
  display: inline-block;
  margin: 0 .3em;
  width: 1.2em;
}
#server-info input[type="radio"] {
  vertical-align: middle;
}

#user-selection #newusername, #user-selection #password {
  color: $theme.textColor;
}

.user-password-box label {
  color: $theme.textPrimaryColor;
}
.user-password-box label:before {
  background-color: #FFFFFF;
  border: 1px solid #FFFFFF;
  border-radius: 4px 0 0 4px;
  display: inline-block;
  margin-right: -3px;
  padding: 0.3em;
}
#user-selection .buttonwrapper {
  margin: 0;
}

#fields-selection dl {
  background: none repeat scroll 0 0 #FFFFFF;
  box-shadow: 0 0 3px #AAAAAA;
  padding: 0.5em;
}
#fields-selection dd {
  margin-left: 3em;
}
#fields-selection .negative {
  color: $theme.notificationErrorColor;;
}
.confirm-push {
  padding: .5em;
  margin: .5em 0;
  font-weight: bold;
}</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.PushPatient</name>
    <number>0</number>
    <className>XWiki.UIExtensionClass</className>
    <guid>87b251c1-821f-4c7b-8258-787134bd0cd9</guid>
    <class>
      <name>XWiki.UIExtensionClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <content>
        <disabled>0</disabled>
        <name>content</name>
        <number>3</number>
        <prettyName>Extension Content</prettyName>
        <rows>10</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <extensionPointId>
        <disabled>0</disabled>
        <name>extensionPointId</name>
        <number>1</number>
        <prettyName>Extension Point ID</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </extensionPointId>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>2</number>
        <prettyName>Extension ID</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parameters>
        <disabled>0</disabled>
        <name>parameters</name>
        <number>4</number>
        <prettyName>Extension Parameters</prettyName>
        <rows>10</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </parameters>
      <scope>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>scope</name>
        <number>5</number>
        <prettyName>Extension Scope</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>wiki=Current Wiki|user=Current User|global=Global</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </scope>
    </class>
    <property>
      <content>{{velocity}}
$xwiki.jsx.use('PhenoTips.PushPatient')##
$xwiki.ssx.use('PhenoTips.PushPatient')##
(% id="push-patient" %)((([[Push to remote server&gt;&gt;path:#]])))
{{/velocity}}</content>
    </property>
    <property>
      <extensionPointId>org.phenotips.patientRecordMenu.moreActions</extensionPointId>
    </property>
    <property>
      <name>org.phenotips.widget.pushpatient</name>
    </property>
    <property>
      <parameters/>
    </property>
    <property>
      <scope>wiki</scope>
    </property>
  </object>
</xwikidoc>
