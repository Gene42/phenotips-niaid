<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/
-->

<xwikidoc version="1.1">
  <web>PhenoTips</web>
  <name>PushPatientService</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1401822217000</creationDate>
  <parent>PhenoTips.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1401822217000</date>
  <contentUpdateDate>1401822217000</contentUpdateDate>
  <version>1.1</version>
  <title>PushPatientService</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity wiki="false"}}
#set ($service = $services.pushPatient)

#if ($xcontext.action == 'get')
  $response.setContentType('application/json')
#end

#if ($request.do == 'getremotes')
  ## test: http://localhost:8080/bin/get/PhenoTips/PushPatientService?outputSyntax=plain&amp;do=getremotes&amp;patientId=P0000001
  ## test: http://localhost:8080/bin/get/PhenoTips/PushPatientService?outputSyntax=plain&amp;do=getremotes&amp;patientId=P00XXXXX (should work, but returns no history)
  #set ($configuredServers = $service.getPushTargetsWithHistory($request.patientId))
  #set ($output = [])
  #foreach ($mapEntry in $configuredServers.entrySet())
    #set ($data = {})
    #set ($success = $data.put("serverinfo", $mapEntry.key))
    #set ($success = $data.put("pushinfo",   $mapEntry.value))
    #set ($success = $output.add($data))
  #end
  $jsontool.serialize($output)   ## no error checking - local call
#elseif ($request.do == 'getpatientjson')
  ##test1: http://localhost:8080/bin/get/PhenoTips/PushPatientService?outputSyntax=plain&amp;do=getpatientjson&amp;patientid=P0000001
  ##test2: http://localhost:8080/bin/get/PhenoTips/PushPatientService?outputSyntax=plain&amp;do=getpatientjson&amp;patientid=P0000001&amp;fields=[%22gender%22,%22omim_id%22]
  ##test3: http://localhost:8080/bin/get/PhenoTips/PushPatientService?outputSyntax=plain&amp;do=getpatientjson&amp;patientid=P00XXXXX  (returns null)
  #set ($patientJSON = $service.getLocalPatientJSON($request.patientid, $request.fields))
  $jsontool.serialize($patientJSON)   ## no error checking - local call
#elseif ($request.do == 'getuser')
  ## test1: http://localhost:8080/bin/get/PhenoTips/PushPatientService?outputSyntax=plain&amp;do=getuser&amp;serverid=PUSH1
  ## test2: http://localhost:8080/bin/get/PhenoTips/PushPatientService?outputSyntax=plain&amp;do=getuser&amp;serverid=NONEEXISTENT
  #set ($lastUsedUsername = $service.getRemoteUsername($request.serverid))
  #if (!$lastUsedUsername)
    #set ($lastUsedUsername = "")
  #end
  #set ($data = { "remoteUserName":$lastUsedUsername })
  $jsontool.serialize($data)  ## no error checking - local call
#elseif ($request.do == 'removetokens')
  ## test: http://localhost:8080/bin/get/PhenoTips/PushPatientService?outputSyntax=plain&amp;do=removetokens&amp;serverid=PUSH1  (login with savetoken=true, passwordless login, remove, passwordless now fails)
  #set ($serverid = $request.serverid)
  #set ($response = $service.removeStoredLoginTokens($serverid))
  {}
#elseif ($request.do == 'getremoteconfig')
  ## test1: http://localhost:8080/bin/get/PhenoTips/PushPatientService?outputSyntax=plain&amp;do=getremoteconfig&amp;serverid=PUSH1&amp;usr=Zzz2&amp;pwd=zzz123&amp;savetoken=true
  ## test2: http://localhost:8080/bin/get/PhenoTips/PushPatientService?outputSyntax=plain&amp;do=getremoteconfig&amp;serverid=PUSH1  (after test1, supposedly works using stored username/token)
  #set ($serverId  = $request.serverid)
  #set ($username  = $request.usr)
  #set ($password  = $request.pwd)
  #set ($savetoken = $request.savetoken)

  #if (!$username)
    #set ($response = $service.getRemoteConfiguration($serverId))  ## passwordless login using stored token
  #else
    #set ($response = $service.getRemoteConfiguration($serverId, $username, $password, $savetoken))
  #end

  ## There are many possible sources of error. Assume error until you actually get success :)
  ##
  #set ($data = {'status':'error'})
  #if (!$response || $response.isIncorrectProtocolVersion())
    #set ($data.serverconnectproblem = 'true')
    #set ($data.cantconnect = 'true')
  #elseif ($response.isSuccessful())
    ## yay!
    #set ($data = {'status':'success', 'groups':$response.getRemoteUserGroups(), 'serverfields': $response.getRemoteAcceptedPatientFields(), 'updatesEnabled': $response.remoteUpdatesEnabled()})
  #elseif ($response.isLoginFailed_UnauthorizedServer())
    #set ($data.serverconnectproblem = 'true')
    #set ($data.unauthorizedserver = 'true')
  #elseif ($response.isLoginFailed())
    #set ($data.loginfailed = 'true')    ## one form or another of incorrect username, password or stored token
  #end
  $jsontool.serialize($data)
#elseif ($request.do == 'push')
  #set ($serverId  = $request.serverid)
  #set ($username  = $request.usr)
  #set ($password  = $request.pwd)
  #set ($groupname = $request.groupname)
  #set ($patientid = $request.patientid)
  #set ($guid      = $request.guid)
  #set ($fields    = $request.fields)

  #if ($guid == 'auto')
     #set ($guid = $service.getPatientPushHistory($patientid, $serverId).getRemotePatientGUID())
  #end

  #if (!$username)
    #set ($response = $service.sendPatient($patientid, $fields, $groupname, $guid, $serverId))  ## passwordless login using stored token
  #else
    #set ($response = $service.sendPatient($patientid, $fields, $groupname, $guid, $serverId, $username, $password))
  #end

  ##$jsontool.serialize($response)

  #set ($data = {'status':'error'})
  #if (!$response || $response.isIncorrectProtocolVersion())
    #set ($data.serverconnectproblem = 'true')
    #set ($data.cantconnect = 'true')
  #elseif ($response.isSuccessful())
    ## DONE!
    #set ($data = {'status':'success', 'patientid':$response.getRemotePatientID(), 'patientguid':$response.getRemotePatientGUID(), 'patienturl':$response.getRemotePatientURL()})        ## TODO
  #elseif ($response.isLoginFailed_UnauthorizedServer())
    #set ($data.serverconnectproblem = 'true')
    #set ($data.unauthorizedserver = 'true')
  #elseif ($response.isLoginFailed())
    #set ($data.loginfailed = 'true')    ## one form or another of incorrect username, password or stored token
  #else
    #set ($data.pushfailed = 'true')     ## push failed: either incorrect user data, or incorrect gid or server error (TODO: differentiate more)
    #if ($response.isActionFailed_UpdatesDisabled())
       #set ($data.updatesdisabled = 'true')
    #end
    #if ($response.isActionFailed_IncorrectGUID())
       #set ($data.invalidguid = 'true')
    #end
    #if ($response.isActionFailed_GUIDAccessDenied())
       #set ($data.accessdeniedguid = 'true')
    #end
  #end
  $jsontool.serialize($data)
#end
{{/velocity}}</content>
</xwikidoc>
