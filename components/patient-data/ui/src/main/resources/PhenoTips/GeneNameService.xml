<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.1">
  <web>PhenoTips</web>
  <name>GeneNameService</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1401822211000</creationDate>
  <parent>PhenoTips.InvestigationClass</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1401822211000</date>
  <contentUpdateDate>1401822211000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{groovy}}
import net.sf.json.JSONSerializer
import net.sf.json.JSONArray

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.methods.StringRequestEntity;

if (xcontext.action == 'get') {
  response.setContentType('application/json')
}

def max = 10
if (request.max != null) {
  max = Integer.parseInt(request.max)
}

if (request.q != null) {
  def client = new HttpClient()
  def method = new GetMethod('http://rest.genenames.org/search/' + java.net.URLEncoder.encode('status:Approved AND (symbol:' + request.q + '* OR alias_symbol:' + request.q + '*)', 'UTF-8'))
  method.addRequestHeader("Accept", "application/json");
  client.executeMethod(method)
  def data = JSONSerializer.toJSON(method.getResponseBodyAsString())
  def results = data.response.docs

  def topResults = new JSONArray();
  def i = 0
  while (topResults.size() &lt;  Math.min(max, results.size()) &amp;&amp; i &lt; results.size()) {
    def r = results.get(i)
    ++i
    def fetchMethod = new GetMethod('http://rest.genenames.org/fetch/symbol/' + r.symbol)
    fetchMethod.addRequestHeader("Accept", "application/json");
    client.executeMethod(fetchMethod)
    def rData = JSONSerializer.toJSON(fetchMethod.getResponseBodyAsString()).response.docs.get(0)

    r.name = rData.name
    r.alias_symbol = rData.alias_symbol
    r.gene_family = rData.gene_family
    r.external_ids = [
      'genecards_id'     :  rData.symbol,
      'omim_id'          :  rData.omim_id,
      'entrez_id'        :  rData.entrez_id,
      'refseq_accession' :  rData.refseq_accession,
      'ensembl_gene_id'  :  rData.ensembl_gene_id
    ]
    topResults.add(r)

    data.response.numReturned = topResults.size()
    data.response.docs = topResults
  }
  println data.response.toString()
} else {
  def reqGenes = request.getParameterValues('g')
  result = JSONSerializer.toJSON("{ query : [], response : {} }")

  if (reqGenes &amp;&amp; reqGenes.size() &gt; 0) {
    // This should be done with asynchronous requests, with a connection pool
    def client = new HttpClient()
    for (i = 0; i &lt; reqGenes.size(); ++i) {
      if (reqGenes[i] == '') { continue }
      if (result.response.get(reqGenes[i])) { continue }

      def fetchMethod = new GetMethod('http://rest.genenames.org/fetch/symbol/' + reqGenes[i])
      fetchMethod.addRequestHeader("Accept", "application/json");
      client.executeMethod(fetchMethod)
      def rData = JSONSerializer.toJSON(fetchMethod.getResponseBodyAsString()).response.docs;
      if (rData.size() &gt; 0) {
        rData = rData.get(0);
        def r = JSONSerializer.toJSON("{}");
        r.name = rData.name
        r.alias_symbol = rData.alias_symbol
        r.gene_family = rData.gene_family
        r.external_ids = [
          'genecards_id'     :  rData.symbol,
          'omim_id'          :  rData.omim_id,
          'entrez_id'        :  rData.entrez_id,
          'refseq_accession' :  rData.refseq_accession,
          'ensembl_gene_id'  :  rData.ensembl_gene_id
        ]
        result.query.add(reqGenes[i])
        result.response.put(reqGenes[i], r)
      }
    }
  }
  println result.toString()
}
{{/groovy}}</content>
</xwikidoc>
