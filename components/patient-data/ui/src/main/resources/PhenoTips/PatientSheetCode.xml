<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc>
  <web>PhenoTips</web>
  <name>PatientSheetCode</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>PhenoTips.PatientClass</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1337795658000</creationDate>
  <date>1346374948000</date>
  <contentUpdateDate>1346374948000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>PhenoTips.PatientSheetCode</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>a483377f-bdfd-467a-93f5-0214e0f45995</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>document.observe('xwiki:dom:loaded', function() {
  var deleteTool = $('tmActionDelete');
  if (!deleteTool) {
    return false;
  }
  deleteTool.observe('click', function(clickEvent) {
    clickEvent.stop();
    var item = clickEvent.element();
    item.blur();
    if (item.disabled) {
      // Do nothing if the button was already clicked and it's waiting for a response from the server.
      return;
    } else {
      var url = item.readAttribute('href') + "?confirm=1&amp;form_token=" + $$('meta[name=form_token]')[0].content + (Prototype.Browser.Opera ? "" : "&amp;ajax=1");
      new XWiki.widgets.ConfirmedAjaxRequest(
        /* Ajax request URL */
        url,
        /* Ajax request parameters */
        {
          onCreate : function() {
            // Disable the button, to avoid a cascade of clicks from impatient users
            item.disabled = true;
          },
          onSuccess : function() {
            // Go to space WebHome
            window.location = new XWiki.Document('WebHome', XWiki.Document.currentSpace).getURL('view');
          },
          onFailure : function() {
            // Better luck next time!
            item.disabled = false;
          }
        },
        /* Interaction parameters */
        {
          confirmationText: "$services.localization.render('core.recyclebin.confirm')"
        }
      );
    }
  });
});</code>
    </property>
    <property>
      <name>Confirmed AJAX deletion</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>PhenoTips.PatientSheetCode</name>
    <number>1</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>ea03b772-54bb-4c4d-8cca-e0c83c372320</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var tocLinkClicked = function(event) {
    event.stop();
    var trigger = event.findElement('a');
    var targetName = trigger &amp;&amp; trigger.getAttribute('href');
    var target = targetName &amp;&amp; $(targetName.substring(1));
    var parent = target &amp;&amp; (target.up('.collapsible-group') || target.up('.chapter'));
    if (parent &amp;&amp; parent.hasClassName('collapsed')) {
       parent.removeClassName('collapsed');
       if (parent.down('.expand-tool')) {
         parent.down('.expand-tool').update('â–¼');
       }
       if (parent.up('.chapter')) {
         parent.up('.chapter').removeClassName('collapsed');
       }
       parent.scrollTo();
    } else {
       target.scrollTo();
    }
};

document.observe('xwiki:dom:loaded', function() {
  var tocElement = $('table-of-contents')
  if (!tocElement) {return;}
  var titleLink = tocElement.down('li a');//first link
  if (titleLink) {
    titleLink.href = '#document-title';
  }
  var crtContents = tocElement.down('ul ul');
  if (!crtContents) {return;}
  var completeContents = new Element('ul');
  var crtContainer = completeContents;
  var crtLevel = 2;
  // , h3[id]
  $$('h2[id]').each(function(title) {
    var target = title.id;
    var myLevel = parseInt(title.nodeName.substring(1));
    var tocLine = new Element('li').update(new Element('a', {'href' : '#' + target}).update(title.innerHTML));
    if (myLevel &lt; crtLevel) {
       crtContainer = crtContainer.up('ul');
    } else if (myLevel &gt; crtLevel) {
      var lastTocLine = crtContainer.down('li:last-child');
      if (!lastTocLine) {
        lastTocLine = new Element('li');
        crtContainer.insert({'bottom' : lastTocLine});
      }
      crtContainer = new Element('ul');
      lastTocLine.insert({'bottom' : crtContainer});
    }
    crtLevel = myLevel;
    crtContainer.insert({'bottom' : tocLine});
  });
  crtContents.replace(completeContents);

  // JS show/hide of ToC, to avoid jumps in Chrome
  var tocTrigger = $('tmToC');
  if (tocTrigger) {
    tocTrigger.observe('click', function(event) {
      event.stop();
      tocElement.style.display= 'block';
      tocElement.style.visibility= 'visible';
    });
  }
  var tocHideTriggers = tocElement.select('.hide-toc a');
  tocHideTriggers.invoke('observe', 'click', function(event) {
     event.stop();
     tocElement.style.display= '';
     tocElement.style.visibility= 'hidden';
  });
  var tocLinks = tocElement.select('ul a');
  tocLinks.invoke('observe', 'click', function(event) {
     //tocElement.style.display= '';
     //tocElement.select('.hide-toc a').click();
     tocLinkClicked(event);
  });
});</code>
    </property>
    <property>
      <name>Fix for the incomplete ToC</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>PhenoTips.PatientSheetCode</name>
    <number>2</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>3dbaeab5-a161-4a7e-9884-f130958b03b5</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var selectionSummary = '';
var highlightChecked = function(element, initialization) {
      var type = element.up().hasClassName('no') ? 'no' : 'yes';
      if (initialization !== true &amp;&amp; element.id == element.name + '_' + element.value) {
        Event.fire(document, 'phenotype:selected', {
              key : element.value,
              text: element.title || (element.nextSibling &amp;&amp; (element.nextSibling.firstChild &amp;&amp; element.nextSibling.firstChild.nodeValue || element.nextSibling.nodeValue)) || '',
              enable: element.checked,
              element : element,
              type : type
        });
      }
      if (selectionSummary) {selectionSummary._updateSummary(element, type);}
};
var enableHighlightChecked = function(element, initialization) {
      highlightChecked(element, initialization);
      ['click', 'change', 'suggest:change', 'picker:change'].each(function(eventName) {
        element.observe(eventName, highlightChecked.bind(element,element));
      });
};

var restoreCategory = function (element) {
  var parentElement = element.up('.accepted-suggestions li');
  var selector = '';
  var ignoredCategories = this.suggest &amp;&amp; this.suggest.options &amp;&amp;
          this.suggest.options.queryProcessor &amp;&amp; this.suggest.options.queryProcessor.restriction &amp;&amp;
          this.suggest.options.queryProcessor.restriction.term_category;
  if (parentElement) {
    var originalName = parentElement.down('input[name="fieldName"]');
    parentElement.select('.term-category input[type=hidden]').each(function (item) {
      if (ignoredCategories &amp;&amp; ignoredCategories.indexOf(item.value) &gt;= 0) return;
      selector += 'input.suggested[name^="' + (originalName &amp;&amp; originalName.value || element.name) + '"] + input[type=hidden][name=_category][value*="' + item.value +'"], '
    });
  }
  var matchingCategory = document.documentElement.down(selector);
  if (matchingCategory) {
    var matchingList = matchingCategory.previous('ul.accepted-suggestions');
    if (matchingList) {
      matchingList.insert(parentElement);
      Event.fire(document, "custom:selection:category:changed", {
       'customElement' : parentElement
      });
    }
  }
  enableHighlightChecked(element);
  if (typeof (this.ensureVisible) == 'function') {
    this.ensureVisible(element, !selectionSummary);
  } else if (!this.silent) {
    element.scrollTo();
  }
}

var findPropertyField = function(name) {
  if ($('prefix'))
    return $($('prefix').value + name);
  return null;
}

var findFormElementForPhenotype = function(id, negative) {
  if ($('prefix'))
    return $($('prefix').value + (negative ? 'negative_' : '') + 'phenotype_' + id);
  return null;
};

var isPhenotypeSelected = function (id, negative) {
  var elt = findFormElementForPhenotype(id, negative);
  return (elt &amp;&amp; elt.checked);
};
var unselectPhenotype = function (id, negative) {
  var targetElt = findFormElementForPhenotype(id, negative);
  if (targetElt &amp;&amp; targetElt.checked) {
    if (targetElt.up('label')) {
      targetElt.up('label').click();
    } else {
      targetElt.click();
    }
  }
};

var isValueSelected = function (fieldName, value) {
  var elt = $(fieldName + '_' + value);
  return (elt &amp;&amp; elt.checked);
};

document.observe('dom:loaded', function() {
  $$('.editbody .negative_phenotype-group').invoke('hide');
  // ------------------------------------------------------------------------
  // Selected term highlighting
  // ------------------------------------------------------------------------
  ["yes", "no"].each(function (type) {
    $$('.term-label .' + type + ' input[type=checkbox]').each(function (input) {
      enableHighlightChecked(input, true);
      input.observe('click', function(event) {
          $$('.' + type + ' input[type=checkbox][value=' + event.element().value +']').each(function(item) {
            if (item.checked != event.element().checked) {
              item.click();
            }
          });
      });
    });
  });

  // ------------------------------------------------------------------------
  // Behavior of the quick search box
  // ------------------------------------------------------------------------
  var qsBox = $('quick-search-box');
  if (qsBox) {
    var content = qsBox.next('div');
    if (content) {
      qsBox.__x_qsInput = qsBox.down('input[type=text]') || {};
      var qsSticky = new StickyBox(qsBox, content, {shadowSize : 0, isSticky : function(element) {return !element.__x_qsInput._activeSuggest} });
      Event.observe(document, 'ms:suggest:containerCreated', function(event) {
        if (event.memo.suggest.fld == qsBox.__x_qsInput) {
          qsBox.__x_qsInput._activeSuggest = true;
          var qsSuggest = event.memo.container;
          if (qsBox.getStyle('position') == 'fixed') {
            qsSuggest.style.position = 'fixed';
          }
          qsSuggest.style.top = (qsBox.__x_qsInput.cumulativeOffset().top + qsBox.__x_qsInput.getHeight()) + 'px';
          qsSuggest.style.left = qsBox.__x_qsInput.cumulativeOffset().left;
        }
      });
      Event.observe(document, 'ms:suggest:clearSuggestions', function(event) {
        if (event.memo.suggest.fld == qsBox.__x_qsInput) {
          qsBox.__x_qsInput._activeSuggest = false;
        }
      });
    }
  }

  var docContent = $('mainContentArea');
  if (docContent) {
    docContent.style.position = 'relative';

    var docActions = $('document-actions');
    if (docActions) {
      docActions.addClassName('absolute');
      var daSticky  = new StickyBox(docActions, docContent, {shadowSize : 6});
    }

    var toc = $('table-of-contents');
    if (toc) {
      toc.addClassName('absolute');
      var tocSticky = new StickyBox(toc, docContent, {shadowSize : 6});
    }
  }
  var summaryContent = $('current-phenotype-selection');
  var summary = summaryContent &amp;&amp; summaryContent.up('.selector-panel');;
  if (summary) {
    var container = summary.up();//alert(container);
    summary.addClassName('absolute');
    var sSticky  = new StickyBox(summary, container, {shadowSize : 40, resize: true, isSticky : function(element) {return element.hasClassName('half-width') &amp;&amp; element.getHeight() &lt; element.previous().getHeight()}});
    summary.observe('size:changed', function(event) {
      if (!event.memo) {
         summaryContent.style.height = '';
         summaryContent.style.overflow = '';
      } else {
         summaryContent.style.height = (summaryContent.getHeight() + (event.memo.diff || 0)) + 'px';
         summaryContent.style.overflow = 'auto';
         summary.style.overflow = '';
      }
    });
  }
});</code>
    </property>
    <property>
      <name>Form behavior</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>PhenoTips.PatientSheetCode</name>
    <number>3</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>fcece596-8be6-4fa6-a193-609666005fd9</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var XWiki = (function(XWiki) {
  var init = function(event) {
    ((event &amp;&amp; event.memo.elements) || [$('body')]).each(function(element) {
      element.select(".mandatory input[type='text']").each(function(element) {
        if (!element.__validation) {
          element.__validation = new LiveValidation(element, {validMessage: '', wait : 500});
        }
        element.__validation.add(Validate.Presence, {failureMessage: 'Please enter a value'});
      });
    });
    return true;
  };

  (XWiki.domIsLoaded &amp;&amp; init()) || document.observe("xwiki:dom:loaded", init);
  document.observe("xwiki:dom:updated", init);

  // End XWiki augmentation.
  return XWiki;
}(XWiki || {}));
</code>
    </property>
    <property>
      <name>Form validation</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>PhenoTips.PatientSheetCode</name>
    <number>4</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>e1208274-545d-4b27-9609-010a6ce16194</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>document.observe('xwiki:dom:loaded', function() {
    var jumpToPubmed = function(termID) {
       var label = termID.up('label');
       var li = label.up('li');
       var url = "http://www.ncbi.nlm.nih.gov/pubmed?term=" + termID.value;
       var link = new Element('a', {'target': '_blank', 'title' : "See this article on pubmed", 'href' : url});
       label.wrap(link);
       $('pubmed-search-history').down('ul').insert({'top' : li});
       window.open(url);
       $('pubmed-search-history').down('h4').removeClassName('hidden');
    }
    // ------------------------------------------------------------------------
    // Creation of suggest widgets

    // hpo: namespace:medical_genetics
    // go : namespace:
    var suggestionsMapping = {
        "hpo" : {
            script: "$xwiki.getURL('PhenoTips.SolrService', 'get')?",
            queryProcessor: typeof(MS.widgets.SolrQueryProcessor) == "undefined" ? null : new MS.widgets.SolrQueryProcessor({
                           'name' : {'wordBoost': 10, 'phraseBoost': 20},
                           'nameSpell' : {'wordBoost': 18, 'phraseBoost': 36, 'stubBoost': 14},
                           'nameExact' : {'phraseBoost': 100},
                           'namePrefix' : {'phraseBoost': 30},
                           'synonym' : {'wordBoost': 6, 'phraseBoost': 15},
                           'synonymSpell' : {'wordBoost': 10, 'phraseBoost': 25, 'stubBoost': 7},
                           'synonymExact' : {'phraseBoost': 70},
                           'synonymPrefix' : {'phraseBoost': 20},
                           'text' : {'wordBoost': 1, 'phraseBoost': 3, 'stubBoost': 1},
                           'textSpell' : {'wordBoost': 2, 'phraseBoost': 5, 'stubBoost': 2, 'stubTrigger': true},
                           'id' : {'activationRegex' : /^HP:[0-9]+$/i, 'mandatory' : true, 'transform': function(query) {return query.toUpperCase().replace(/:/g, "\\:");}},
                           'alt_id' : {'activationRegex' : /^HP:[0-9]+$/i, 'mandatory' : true, 'transform': function(query) {return query.toUpperCase().replace(/:/g, "\\:");}}
                         }, {
                           'term_category': ['HP:0000118']
                         }),
            varname: "q",
            noresults: "No matching terms",
            json: true,
            resultsParameter : "rows",
            resultId : "id",
            resultValue : "name",
            resultSynonym: "synonym",
            resultCategory : "term_category",
            resultInfo : {
                 "Browse related terms..." : {"extern" : true,
                                              "processor" : function(trigger) {
                                                              trigger._obrowser = new MS.widgets.OntologyBrowser(this, null, {
                                                                 isTermSelected : isPhenotypeSelected,
                                                                 unselectTerm : unselectPhenotype
                                                              });
                                                              trigger.observe('click', function(event){
                                                                event.stop();
                                                                event.element()._obrowser.show(
                                                                  event.element().up('.suggestItem').down('.suggestId').firstChild.nodeValue
                                                                );
                                                              }.bindAsEventListener(this));
                                                            }
                                             }
                         },
            enableHierarchy: true,
            resultParent : "is_a",
            fadeOnClear : false,
            timeout : 30000,
            parentContainer : null
        },
        "omim" : {
            script: "$xwiki.getURL('PhenoTips.OmimService', 'get')?outputSyntax=plain&amp;",
            queryProcessor: typeof(MS.widgets.SolrQueryProcessor) == "undefined" ? null : new MS.widgets.SolrQueryProcessor({
                           'name' : {'wordBoost': 20, 'phraseBoost': 40},
                           'nameSpell' : {'wordBoost': 50, 'phraseBoost': 100, 'stubBoost': 20},
                           'keywords' : {'wordBoost': 2, 'phraseBoost': 6, 'stubBoost': 2},
                           'text' : {'wordBoost': 1, 'phraseBoost': 3, 'stubBoost': 1},
                           'textSpell' : {'wordBoost': 2, 'phraseBoost': 5, 'stubBoost': 2, 'stubTrigger': true}
                         }),
            varname: "q",
            noresults: "No matching terms",
            json: true,
            resultsParameter : "rows",
            resultId : "id",
            resultValue : "name",
            resultInfo : {
                           "Locus"      : {"selector"  : "Locus"}
                         },
            enableHierarchy: false,
            fadeOnClear : false,
            timeout : 30000,
            parentContainer : null
        },
        "pubmed" : {
            script: "$xwiki.getURL('PhenoTips.PubMedService', 'get')?",
            varname: "q",
            noresults: "No matching articles",
            json: true,
            resultsParameter : "rows",
            resultId : "id",
            resultValue : "Title",
            resultInfo : {
                           "Authors"   : {"selector"  : "AuthorList"},
                           "Date"      : {"selector"  : "EPubDate"},
                           "Journal"   : {"selector"  : "Source"}
                         },
            enableHierarchy: false,
            fadeOnClear : false,
            timeout : 30000,
            parentContainer : null
        }
    };
    var pickerSpecialClassOptions = {
      'defaultPicker' : {},
      'quickSearch' : {
                  'showKey' : false,
                  'showTooltip' : false,
                  'showDeleteTool' : true,
                  'enableSort' : false,
                  'showClearTool' : false,
                  'inputType': 'checkbox',
                  'listInsertionElt' : $(document.documentElement).down('.phenotype-info .phenotype-group:last-child .phenotype-other'),
                  'listInsertionPosition' : 'top',
                  'silent' : true,
                  'onItemAdded' : restoreCategory
                },
      'generateShortList' : {
                  'showKey' : true,
                  'showTooltip' : false,
                  'showDeleteTool' : true,
                  'enableSort' : false,
                  'showClearTool' : false,
                  'inputType': 'checkbox'
                },
      'generateCheckboxes' : {
                  'showKey' : false,
                  'showTooltip' : false,
                  'showDeleteTool' : true,
                  'enableSort' : false,
                  'showClearTool' : false,
                  'inputType': 'checkbox',
                  'listInsertionElt' : '.label-other',
                  'listInsertionPosition' : 'before',
                  'onItemAdded' : enableHighlightChecked,
                  'acceptFreeText' : true
                },
      'generateYesNo' : {
                  'showKey' : false,
                  'showTooltip' : false,
                  'showDeleteTool' : true,
                  'enableSort' : false,
                  'showClearTool' : false,
                  'inputType': 'checkbox',
                  'listInsertionElt' : '.label-other',
                  'listInsertionPosition' : 'before',
                  'onItemAdded' : enableHighlightChecked,
                  'acceptFreeText' : true
                },
      'portal' : {
                  'showKey' : false,
                  'showTooltip' : false,
                  'showDeleteTool' : false,
                  'enableSort' : false,
                  'showClearTool' : true,
                  'inputType': 'checkbox',
                  'listInsertionElt' : $('pubmed-search-history'),
                  'listInsertionPosition' : 'bottom',
                  'silent' : true,
                  'onItemAdded' : jumpToPubmed
                }
    }


    //cTAKES code
    var submit = $('ctakes-input-button');
    if (submit){
      submit.observe('click', function(){
        var inputText = $('textarea-ctakes').value;
        if(inputText){
          var url = "$xwiki.getURL('PhenoTips.CtakesService', 'get')";
          var method = "get";          
          var headers = {};
          headers.Accept = "application/json";
          var parameters = {};
          parameters.InputText=inputText;

          var ajx = new Ajax.Request(url, {
          method: method,
          parameters: parameters,
          requestHeaders: headers,
          onSuccess: setTerms(this),
          onFailure: function (response) {
          //new MS.widgets.Notification("Failed to retrieve suggestions : ')" + response.statusText, "error", {timeout: 5});
          alert("Failed to retrieve suggestions : " + response.statusText);
            }
          });
          
        }
      });
      //generate setlection summary from extracted terms
      var setTerms = function(req){


      }    
    }

   //End cTAKES Code

    // ------------------------------------------------------------------------
    // Generate selection summary
    // ------------------------------------------------------------------------
    selectionSummary = $('current-phenotype-selection');
    if (selectionSummary) {
        selectionSummary._updateVisibility = function() {
           if (!this.down('.group-contents input[type="checkbox"]')) {
             this.up().style.visibility = 'hidden';
           } else {
             this.up().style.visibility = '';
           }
        }.bind(selectionSummary);

        $$('.browse-phenotype-categories .phenotype-group h3').each(function(groupTitle) {
           var group = new Element('div', {'class' : 'summary-group', id : 'summary-group-' + groupTitle.id});
           group.insert({
             top: new Element('h3').update(groupTitle.down('span:not(.expand-tool)').innerHTML),
             bottom: new Element('div', {'class' : 'group-contents'})
           });
           selectionSummary.insert(group);
           group._updateGroupVisibility = function() {
             if (!this.down('.group-contents input')) {
               this.hide();
             } else {
               this.show();
             }
             selectionSummary._updateVisibility();
           }.bind(group);
           group._find = function(value, type) {
             return this.down('.group-contents .' + type + ' input[value="' + value + '"]');
           }.bind(group);
           group._add = function(element) {
             this.down('.group-contents').insert(element) ;
           }.bind(group);
           group._updateGroupVisibility();
        });
        selectionSummary._getGroup = function(name) {
          return $('summary-group-' + name);
        }.bind(selectionSummary);

        selectionSummary._find = function(value, type) {
             return this.down('.summary-group .summary-item .' + type + ' input[value="' + value + '"]');
        }.bind(selectionSummary);

        selectionSummary._silentRemove = function(value, type) {
             var exists = this._find(value,type);
             if (exists) {
               var group = exists.up('.summary-group');
               exists.up('.summary-item').remove();
               if (!group) {return;}
               group._updateGroupVisibility();
             }
        }.bind(selectionSummary);
        selectionSummary._remove = function(value, type) {
             var exists = this._find(value, type);
             if (exists) {
               var source = exists.up('.summary-item').__source;
               if (source._ynpicker) {
                 source._ynpicker._onUnselect();
               } else {
                 source.click();
               }
             }
        }.bind(selectionSummary);

        selectionSummary._preparePreview = function(pdItem) {
          var details ='';
          var commentPreview = pdItem.down('.comments-preview');
          var comment = pdItem.down('.comments textarea');
          if (comment) {
             if (!commentPreview) {
               commentPreview = new Element('dd', {'class' : 'comments-preview preview' });
               comment.up().insert({after: commentPreview});
             }
             commentPreview.update(comment.value);
             commentPreview.title = comment.value;
             details += comment.value;
          } else {
            if (commentPreview) {commentPreview.update('');}
          }
          var onsetPreview = pdItem.down('.onset-preview');
          var onset = false;
          pdItem.select('.age_of_onset input[type="radio"]').each(function(item) {
            if (item.checked &amp;&amp; item.value != '') {
              onset = item;
            }
          });
          if (onset) {
             if (!onsetPreview) {
               onsetPreview = new Element('dd', {'class' : 'onset-preview preview' });
               onset.up('dd').insert({after: onsetPreview});
             }
             onsetPreview.update(onset.title);
             details += onset.title;
          } else {
            if (onsetPreview) {onsetPreview.update('');}
          }
          var progressionPreview = pdItem.down('.progression-preview');
          var progression = false;
          pdItem.select('.pace_of_progression input[type="radio"]').each(function(item) {
            if (item.checked &amp;&amp; item.value != '') {
              progression = item;
            }
          });
          if (progression) {
             if (!progressionPreview) {
               progressionPreview = new Element('dd', {'class' : 'progression-preview preview' });
               progression.up('dd').insert({after: progressionPreview});
             }
             progressionPreview.update(progression.title);
             details += progression.title;
          } else {
            if (progressionPreview) {progressionPreview.update('');}
          }
          var noPreview = pdItem.down('.no-preview');
          if (details.strip() == '') {
            if (!noPreview) {
               noPreview = new Element('dd', {'class' : 'no-preview preview' });
               pdItem.insert({bottom: noPreview});
            }
            noPreview.update('No additional information.');
          } else {
            noPreview &amp;&amp; noPreview.update('');
          }

          pdItem.addClassName('collapsed');
        }.bind(selectionSummary);

        selectionSummary._focusDetails = function(info) {
          var pfTarget;
          if (typeof (info.findElement) == 'function') {
            pdTarget = info.findElement('.phenotype-details');
          } else if (typeof (info.up) == 'function') {
            pdTarget = info;
          } else {
            return;
          }
          if (this._crtFocus &amp;&amp; pdTarget != this._crtFocus) {
             this._crtFocus.removeClassName('focused');
             this._preparePreview(this._crtFocus);
          }
          if (pdTarget) {
             this._crtFocus = pdTarget;
             pdTarget.addClassName('focused');
             pdTarget.removeClassName('collapsed');
             var doneBtn = pdTarget.down('.action-done');
             if (!doneBtn) {
               doneBtn = new Element('div', {'class' : 'action-done'}).update('Ã—');
               pdTarget.insert(doneBtn);
               doneBtn.observe('click', function(event) {
                 event.stop();
                 selectionSummary._preparePreview(pdTarget);
                 pdTarget.removeClassName('focused');
               });
             }
          } else {
             delete this._crtFocus;
          }
        }.bind(selectionSummary);

        document.observe("click", function(event) {
           selectionSummary._focusDetails(event);
        });

        selectionSummary._updateSummary = function(inputElt, type, forceUpdate) {
          if (!inputElt || !inputElt.value) {return}
          var sectionId = inputElt.up('.phenotype-group') &amp;&amp; inputElt.up('.phenotype-group').down('h3');
          if (sectionId) {
            sectionId = sectionId.id;
          } else {
            return;
          }
          if (inputElt.checked) {
             if (forceUpdate) {
                this._silentRemove(inputElt.value, type);
             }
             var exists = this._find(inputElt.value, type);
             if (!exists) {
               var group = this._getGroup(sectionId);
               if (!group) {return;}
               var newItem = new Element('div', {'class' : 'summary-item'}).update(
                  new Element('label', {'class' : type}).insert({
                     'top': new Element('input', {'value' : inputElt.value, checked : 'checked', type : 'checkbox', 'class': 'hidden'}),
                     'bottom' : inputElt.title || inputElt.nextSibling.nodeValue || inputElt.nextSibling.firstChild.nodeValue || inputElt.value
                  })
               );
               newItem.__source = inputElt;
               var tools = new Element('span', {'class' : 'tools hint'});
               var deleteTool = new Element('span', {'class' : 'tool'}).update('Delete');
               tools.insert(deleteTool);
               deleteTool.observe('click', function(event) {
                 var source = event.findElement('.summary-item').__source;
                 if (source._ynpicker) {
                   source._ynpicker._onUnselect();
                 } else {
                   source.click();
                 }
               });
               var detailsUrl = $('phenotype-meta-add-action') &amp;&amp; $('phenotype-meta-add-action').value;
             if (detailsUrl) {
               var detailsTool = new Element('span', {'class' : 'tool'}).update('Add details');
               var clearTool = new Element('span', {'class' : 'tool'}).update('Clear details');
               tools.insert(' Â· ').insert(detailsTool).insert(clearTool);
               detailsTool.observe('click', function(event) {
                 var source = event.findElement('.summary-item');
                 var detailsElt = new Element('div', {'class' : 'phenotype-details loading'}).update('Loading...');
                 source.insert(detailsElt);
                 event.findElement().hide();
                 clearTool.__target = detailsElt;
                 clearTool.show();

                 var addTrigger = event.findElement();
                 if (addTrigger.disabled) {
                   return;
                 }
                 var url = detailsUrl.replace(/([&amp;?]classname=)(.*?)([&amp;$])/, "$1$2&amp;$2_target_property_name=" + inputElt.name.replace(/^.*_\d+_/, '') + "&amp;$2_target_property_value=" + inputElt.value + "$3");
                 new Ajax.Request(url, {
                   onCreate : function() {
                     addTrigger.disabled = true
                     addTrigger._x_notif = new XWiki.widgets.Notification('Adding...', 'inprogress');
                   },
                   onSuccess : function (response) {
                     addTrigger._x_notif.hide();
                     detailsElt.update(response.responseText);
                     detailsElt.removeClassName('loading');
                     selectionSummary._focusDetails(detailsElt);
                     detailsElt.select('input, textarea').invoke('observe', 'focus', function(event){selectionSummary._focusDetails(detailsElt)});
                     var deleteUrl = detailsElt.down('input[name="delete-action"]');
                     if (deleteUrl) {
                       deleteUrl = deleteUrl.value;
                       deleteUrl &amp;&amp; (clearTool.__url = deleteUrl);
                     }
                     Event.fire(document, 'xwiki:dom:updated', {'elements' : [detailsElt]});
                   }.bind(this),
                   onFailure : function(response) {
                     var failureReason = response.statusText;
                     if (response.statusText == '' /* No response */ || response.status == 12031 /* In IE */) {
                       failureReason = 'Server not responding';
                     }
                     if (addTrigger._x_notif) {
                       addTrigger._x_notif.replace(new XWiki.widgets.Notification("Failed: " + failureReason, "error"));
                     } else {
                       new XWiki.widgets.Notification(this.interactionParameters.failureMessageText + failureReason, "error");
                     }
                   },
                   on1223 : function(response) {
                     response.request.options.onSuccess(response);
                   },
                   on0 : function(response) {
                     response.request.options.onFailure(response);
                   },
                   onComplete : function() {
                     addTrigger.disabled = false
                   }
                 });
               });
               var existingDetails = $('phenotypeMeta__' + inputElt.name + '__' + inputElt.value);
               if (existingDetails) {
                  var detailsElt = new Element('div', {'class' : 'phenotype-details'});
                  var deleteUrl = existingDetails.next('input[name="delete-action"]');
                  if (deleteUrl) {
                     deleteUrl = deleteUrl.value;
                     deleteUrl &amp;&amp; (clearTool.__url = deleteUrl);
                     clearTool.__target = detailsElt;
                  }
                  detailsElt.update(existingDetails);
                  selectionSummary._preparePreview(detailsElt);
                  detailsElt.select('input, textarea').invoke('observe', 'focus', function(event){selectionSummary._focusDetails(detailsElt)});
                  detailsTool.hide();
               }  else {
                  clearTool.hide();
               }
               clearTool.observe('click', function(event) {
                 event.stop();
                 var deleteTrigger = event.element();
                 if (deleteTrigger.disabled) {
                    return;
                 }
                 if (deleteTrigger.__target) {
                   deleteTrigger.__target.remove();
                   delete deleteTrigger.__target;
                 }
                 if (deleteTrigger.__url) {
                   new XWiki.widgets.ConfirmedAjaxRequest(deleteTrigger.__url, {
                     onCreate : function() {
                       deleteTrigger.disabled = true
                     },
                     onSuccess : function() {
                       if (deleteTrigger.__target) {
                         deleteTrigger.__target.remove();
                         delete deleteTrigger.__target;
                       }
                       delete deleteTrigger.__url;
                       deleteTrigger.hide();
                       detailsTool.show();
                     },
                     onComplete : function() {
                       deleteTrigger.disabled = false;
                     }
                   },
                   {
                      confirmationText : "Are you sure you wish to delete this information?"
                   });
                 }
               });// clearTool.observe('click'
             } // detailsUrl exists
               newItem.insert(tools);
               detailsElt &amp;&amp; newItem.insert(detailsElt);
               group._add(newItem);
               group._updateGroupVisibility();
               Event.fire(document, "summary-item:added", {element: newItem});
             }
          } else {
             this._silentRemove(inputElt.value, type);
          }
        }.bind(selectionSummary);
        selectionSummary._updateVisibility();
    }
    // -----------------------------------------------------------------
    // Create and attach the suggests
    // -----------------------------------------------------------------
    if (typeof(MS.widgets.Suggest) != "undefined") {
      var keys = Object.keys(suggestionsMapping);
      var specialClasses = Object.keys(pickerSpecialClassOptions);
      for (var i = 0; i &lt; keys.length; i++) {
        var selector = 'input.suggest-' + keys[i];
        $$(selector).each(function(item) {
          if (!item.hasClassName('initialized')) {
            item._customOptions = Object.clone(suggestionsMapping[keys[i]]);
            item._restriction = item.up('.phenotype-group')
            if (item._restriction) {
              item._restriction = item._restriction.down('input[name=_category]');
              if (item._restriction &amp;&amp; item._restriction.value.strip() != '') {
                item._restriction = item._restriction.value.strip().split(",");
              } else {
                item._restriction == null;
              }
            }
            if (item._customOptions.queryProcessor &amp;&amp; item._restriction) {
              item._customOptions.queryProcessor = Object.clone(item._customOptions.queryProcessor);
              item._customOptions.queryProcessor.restriction = {
                'term_category' : item._restriction
              }
            }
            // Create the Suggest.
            item._suggest = new MS.widgets.Suggest(item, item._customOptions);
            if (item.hasClassName('multi') &amp;&amp; typeof(MS.widgets.SuggestPicker) != "undefined") {
              var multiSuggestOptions = {};
              for (var j = 0; j &lt; specialClasses.length; j++) {
                if (item.hasClassName(specialClasses[j])) {
                  multiSuggestOptions = pickerSpecialClassOptions[specialClasses[j]];
                  // FIXME! If the input has more than one special class, does the ordering declared in pickerSpecialClassOptions guarantee we choose the right one?
                  break;
                }
              }
              var suggestPicker = new MS.widgets.SuggestPicker(item, item._suggest, multiSuggestOptions);
              item._suggestPicker = suggestPicker;

              // Integrate the custom fields
              // 1. find the container element displaying them
              var customFieldsContainer = suggestPicker.list.up().down('.custom-display-data');
              if (customFieldsContainer) {
                 // 2. get rid of the container
                 customFieldsContainer.remove();
                 // 3. find all the values and display them as part of the multi suggest picker
                 var tmp = suggestPicker.silent;
                 suggestPicker.silent = true;
                 customFieldsContainer.select('.term-entry').each(function(entry) {
                   var negativeCheckbox = entry.down('.yes-no-picker .no input');
                   var value =  entry.down('input[type="checkbox"]').value;
                   var text = negativeCheckbox &amp;&amp; negativeCheckbox.title || entry.down('input[type="checkbox"]').title;
                   var category = entry.down('.term-category');
                   if (negativeCheckbox &amp;&amp; negativeCheckbox.checked) {
                     var negative = new Element('input', {type: 'hidden', name : 'fieldName', value : negativeCheckbox.name});
                     category &amp;&amp; category.insert(negative) || (category = negative);
                   }
                   suggestPicker.addItem(value, text, '', category || '');
                 });
                 suggestPicker.silent = tmp;
              }

            }
            item.addClassName('initialized');

            // ------------------------------------------------------------------------
            // Add y/n pickers to generated suggestions
            if (item.hasClassName('generateYesNo')) {
              item.observe("ms:suggest:suggestionCreated", function(event) {
                var negativeName = item.name.replace(/(_\d+)_/, "$1_negative_").replace(/__suggested$/, '');
                var suggestion = event.memo &amp;&amp; event.memo.element;
                if (suggestion) {
                  var suggest = event.memo.suggest;
                  var value =  suggestion.down(".suggestId").firstChild.nodeValue;
                  var text =  suggestion.down(".suggestValue").firstChild.nodeValue;
                  var ynpicker = YesNoPicker.generatePickerElement([
                    {type: 'yes', selected: isValueSelected(item.name.replace(/__suggested$/, ''), value)},
                    {type: 'no' , selected: isValueSelected(negativeName, value)}
                  ], value, text);
                  suggestion.down(".suggestValue").up().insert({top: ynpicker});
                  // Prevent click events from the label from activating the suggestion selection twice because of being forwarded to the input
                  ynpicker.select('input').invoke('observe', 'click', function(event) {event.stop()});

                  // Keep the default behavior for the Y button
                  //  but capture the N button clicks and make sure the value is selected for the negative property field
                  var nLabel = ynpicker.down('.no');
                  nLabel.observe('click', function(event) {
                    var predefinedCheckBox = $(negativeName + "_" + value);
                    if (predefinedCheckBox &amp;&amp; !predefinedCheckBox.checked) {
                      predefinedCheckBox._ynpicker._onNo();
                      suggest.clearSuggestions();
                      suggest.fld.value = '';
                      suggest.fld.focus();
                      suggest.fld.blur();
                      event.stop();
                    }
                    suggestion.down('.suggestCategory').insert({
                      top : new Element('input', {type: 'hidden', name : 'fieldName', value : negativeName, 'class' : 'no'})
                    });
                    suggestion.down('.suggestCategory').select('input[name]').each(function(category) {
                      category.name = category.name.replace(/(_\d+)_/, "$1_negative_");
                    });
                  });
                }
              });
            }
          }
        });
      }

      // ------------------------------------------------------------------------
      // Complete selection summary behavior
      // ------------------------------------------------------------------------
       if (selectionSummary) {
        $$('.browse-phenotype-categories .phenotype-group .term-label.selected input, .browse-phenotype-categories .accepted-suggestion.selected input').each(function(input) {
           selectionSummary._updateSummary(input);
        });
        $$('.browse-phenotype-categories .phenotype-group .accepted-suggestions').invoke('addClassName', 'hidden');
        $$('.browse-phenotype-categories .phenotype-group .suggest-hpo.multi').each(function (sItem){
           if (sItem._suggest) {
             sItem._suggest.silent = true;
           }
        });
        document.observe('phenotype:selected', function(event) {
          if (!event.memo || !event.memo.key) {return;}
          if (!event.memo.enable) {
            selectionSummary._silentRemove(event.memo.key, event.memo.type);
          }
        });
        document.observe("custom:selection:category:changed", function(event) {
          if (!event.memo || !event.memo.customElement) {return;}
          var input = event.memo.customElement.select('input').find(function(item) { return item.checked; });
          selectionSummary._updateSummary(input, input.up('label.no') ? 'no' : 'yes', true);
        });
      }

      // ------------------------------------------------------------------------
      // Add dropdowns to all predefined elements
      // ------------------------------------------------------------------------
      $$('.phenotype-group, .prenatal_phenotype-group').each(function(group) {
        var sugestedInput = group.down('.suggested.multi');
        if (sugestedInput) {
          group.select('.predefined-entries label.term-entry &gt; input[type=checkbox], .predefined-entries .term-entry .yes-no-picker .yes input[type=checkbox]').each(function(item) {
            var item_subsection = item.up('.subsection');
            if (item_subsection) {
              if (item_subsection.hasClassName('single-select')){
                 // TODO: ensure single select within this group
              }
            } else {
            item._dropDown = new MS.widgets.DropDown(item.up('.term-entry'));
            item._trigger = new Element('span', {'class' : 'expand-tool'}).update(MS.widgets.OntologyBrowser.prototype._getExpandCollapseSymbol(true));
            item._trigger._source = item;
            item._trigger._root = item.up('.term-entry');
            item._trigger._root.insert({'top' : item._trigger});
            if (item._trigger._root.hasClassName('dropdown-root')) {
            item._trigger.observe('click', function(event) {
              event.stop();
              var trigger =  event.element();
              var source  =  trigger._source;
              var root    =  trigger._root;
              source._ontologyBrowser || (source._ontologyBrowser = new MS.widgets.OntologyBrowser(
                sugestedInput._suggest,
                source._dropDown,
                {
                  isTermSelected : isPhenotypeSelected,
                  unselectTerm : unselectPhenotype,
                  showParents: false,
                  showRoot: false,
                  defaultEntryAction: 'select',
                  enableBrowse: false
                }
              ));
              if (root._expanded) {
                source._ontologyBrowser.hide();
              } else {
                source._ontologyBrowser.show(source.value);
              }

              trigger.update(source._ontologyBrowser._getExpandCollapseSymbol(root._expanded));
              root._expanded = !root._expanded;
            });
            } else {
              item._trigger.addClassName('disabled');
            }
            }

            // ------------------------------------------------------------------------
            // Add  y/n selection
            // ------------------------------------------------------------------------
            var ynPickerElt = item.up('.yes-no-picker');
            if (ynPickerElt) {
              item._ynpicker = new YesNoPicker(ynPickerElt, ynPickerElt.next('label'), true);
              enableHighlightChecked(item, true);
              var negItem = ynPickerElt.down('.no input');
              if (negItem) {
                enableHighlightChecked(negItem, true);
                negItem._ynpicker = item._ynpicker;
              }
            }
          });
        }
      });

      // ------------------------------------------------------------------------
      // Sync dynamic subtree selections
      // ------------------------------------------------------------------------
      var fieldName = '';
      var source = '';
      var categories = '';
      var DO_EXPAND = !selectionSummary;
      var syncTermCategory = function(term) {
        var field = $(document.documentElement).down('label.term-label.dropdown-root input[type=checkbox][name=' + fieldName + '][value=' + term +']');
        if (field) {
          var subtermsInCategory = $$('label.accepted-suggestion[for^=' + fieldName + '_] + .term-category input[type=hidden][value=' + term + ']');
          var selectedSubterms  = 0;
          var countIfSelectedSubterm = function (categoryElement) {
            var subtermElement = categoryElement.up('li').down('label.accepted-suggestion input[type=checkbox]');
            if (subtermElement &amp;&amp; subtermElement.checked) {
              ++selectedSubterms;
            }
          };
          subtermsInCategory.each(countIfSelectedSubterm);
          if (selectedSubterms &gt; 0) {
            //if (source) {source.addClassName('invisible');}
            field.up('label').addClassName('subterm-selected');
            if (DO_EXPAND &amp;&amp; field._ontologyBrowser &amp;&amp; field._trigger &amp;&amp; field._trigger._root) {
              field._ontologyBrowser.show(field.value);
              field._trigger.update(field._ontologyBrowser._getExpandCollapseSymbol(false));
              field._trigger._root._expanded = true;
              var sourceInput = source &amp;&amp; source.down('input[type=checkbox]');
              if (sourceInput &amp;&amp; sourceInput.checked) {
                Event.observe(field._ontologyBrowser.container.contentContainer, 'obrowser:expand:finished', function(event) {
                  Event.stopObserving(field._ontologyBrowser.container.contentContainer, 'obrowser:expand:finished');
                  field._ontologyBrowser.expandTo(sourceInput.value, categories);
                });
              }
            }
          } else {
            field.up('label').removeClassName('subterm-selected');
          }
        }
      };
      document.observe('custom:selection:changed', function(event) {
        categories = event.memo &amp;&amp; event.memo.categories;
        source = event.memo &amp;&amp; event.memo.customElement;
        if (categories) {
          fieldName = event.memo.fieldName || '';
          categories.each(syncTermCategory);
        }
        if (selectionSummary) {
          var input = event.memo.customElement.select('input').find(function(item) { return item.checked; });
          input &amp;&amp; selectionSummary._updateSummary(input, input.up('label.no') ? 'no' : 'yes', true);
        }
      });
    }

    // --------------------------------------------------------------
    // Ontology browser y/n pickers
    // --------------------------------------------------------------
    document.observe('obrowser:content:added', function(event) {
      if (!event.memo) return;
      if (event.memo.added &amp;&amp; event.memo.obrowser &amp;&amp; event.memo.obrowser.suggest &amp;&amp; event.memo.obrowser.suggest.fld &amp;&amp; event.memo.obrowser.suggest.fld.hasClassName('generateYesNo')) {
        event.memo.added.select('.entry-data input.select-tool').each(function (item) {
          var positiveName = event.memo.obrowser.suggest.fld.name.replace(/__suggested$/, "");
          var negativeName = event.memo.obrowser.suggest.fld.name.replace(/(_\d+)_/, "$1_negative_").replace(/__suggested$/, "");
          var value = item.value;
          var text = item.up('.entry-data').down('.value').firstChild.nodeValue;
          var ynpickerElt = YesNoPicker.generatePickerElement([
              {type: 'na', selected: !isValueSelected(positiveName, value) &amp;&amp; !isValueSelected(negativeName, value)},
              {type: 'yes', selected: isValueSelected(positiveName, value)},
              {type: 'no' , selected: isValueSelected(negativeName, value)}
          ], value, text, true, item.next());
          item.insert({before: ynpickerElt});
          item.remove();
          ynpickerElt._obrowser = event.memo.obrowser;
          enableHighlightChecked(ynpickerElt.down('.yes input'));
          enableHighlightChecked(ynpickerElt.down('.no input'));

          ynpickerElt.observe('ynpicker:selectionChanged', function(event){
            var selected = event.memo &amp;&amp; event.memo.selected;
            var elt = event.findElement('.entry');
            if (!selected || !elt) {return;}
            var id = elt.__termId;
            if (selected == 'na') {
               ynpickerElt._obrowser._unselectEntry(elt);
               return;
            } else if (selected == 'no') {
                var negative = new Element('input', {type: 'hidden', name : 'fieldName', value : negativeName});
                elt.__termCategory &amp;&amp;  elt.__termCategory.insert(negative) || (elt.__termCategory = negative);
            }
            // both yes &amp; no:
            ynpickerElt._obrowser._selectEntry(elt);
          });
        });
      }
    });
});</code>
    </property>
    <property>
      <name>Term suggest</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>PhenoTips.PatientSheetCode</name>
    <number>5</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>7cd26f5b-19a1-423c-a406-0cb0df23f9b4</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var ExtraData = (function (ExtraData) {
  var tools = ExtraData.tools = ExtraData.tools || {};
  tools.Editor = Class.create({
    initialize : function () {
      $$('.extradata-list a.delete').invoke('observe', 'click', this.ajaxDeleteData.bindAsEventListener(this));
      $$('.list-actions a.add').invoke('observe', 'click', this.ajaxAddData.bindAsEventListener(this));
    },
    ajaxDeleteData : function (event) {
      event.stop();
      var deleteTrigger = event.element();
      if (deleteTrigger.disabled) {
         return;
      }
      new XWiki.widgets.ConfirmedAjaxRequest(deleteTrigger.href, {
        onCreate : function() {
          deleteTrigger.disabled = true
        },
        onSuccess : function() {
          var dataRow = deleteTrigger.up('tr:not(.head-group)');
          var dataTable = deleteTrigger.up('table.extradata-list');
          if (dataRow) {
            dataRow.remove();
          }
          if (dataTable) {
            var i = 1;
            dataTable.select('th.row-count').each(function(item) {
              item.update((i++));
            });
          }
        },
        onComplete : function() {
          deleteTrigger.disabled = false;
        }
      },
      {
         confirmationText : "Are you sure you wish to delete this row?"
      });
    },
    ajaxAddData : function (event) {
      event.stop();
      var addTrigger = event.element();
      if (addTrigger.disabled) {
         return;
      }
      var classname = '';
      try {
        var classname = /classname=([^&amp;]+)/.exec(addTrigger.href)[1];
      } catch (err) {
         new XWiki.widgets.Notification('Cannot add data: type not found', 'error');
         return;
      }
      var dataTable = addTrigger.up('.list-actions').previous('table[id^="extradata-list-' + classname + '"]');
      if (!dataTable) {
        new XWiki.widgets.Notification("Cannot find the list to update " + classname, 'error');
      }
      var propertyName = addTrigger.href.replace(/.*&amp;xredirect=.*propertyName=([^&amp;]+).*/, '$1');
      var propertyValue = addTrigger.href.replace(/.*&amp;xredirect=.*propertyValue=([^&amp;]+).*/, '$1');
      var url = addTrigger.href.replace(/(&amp;xredirect=[^&amp;]*)/m, '$1' + encodeURIComponent('?&amp;xpage=plain&amp;xaction=lastentry&amp;dataClassName=' + classname + '&amp;withLabel=' + dataTable.hasClassName('withLabel') + '&amp;propertyName=' + propertyName + '&amp;propertyValue=' + propertyValue));
      new Ajax.Request(url, {
        onCreate : function() {
          addTrigger.disabled = true
          addTrigger._x_notif = new XWiki.widgets.Notification('Adding...', 'inprogress');
        },
        onSuccess : function (response) {
          addTrigger._x_notif.hide();
          var rowHead = '';
          if (dataTable.hasClassName('withCounter')) {
            var idx = dataTable.select('.row-count').size() + 1;
            rowHead = '&lt;th scope="row" class="row-count"&gt;' + idx + '&lt;/th&gt;';
          }
          dataTable.down('tbody').insert({'bottom' : '&lt;tr class="new"&gt;' + rowHead + response.responseText + '&lt;/tr&gt;'});
          var lastAdded = dataTable.down('.new');
          lastAdded.down('a.delete').observe('click', this.ajaxDeleteData.bindAsEventListener(this));
          lastAdded.removeClassName('new');
          Event.fire(dataTable, 'extradata:added', {'element' : lastAdded});
          Event.fire(document, 'xwiki:dom:updated', {'elements' : [lastAdded]});
        }.bind(this),
        onFailure : function(response) {
          var failureReason = response.statusText;
          if (response.statusText == '' /* No response */ || response.status == 12031 /* In IE */) {
            failureReason = 'Server not responding';
          }
          if (addTrigger._x_notif) {
            addTrigger._x_notif.replace(new XWiki.widgets.Notification("Failed: " + failureReason, "error"));
          } else {
            new XWiki.widgets.Notification(this.interactionParameters.failureMessageText + failureReason, "error");
          }
        },
        on1223 : function(response) {
          response.request.options.onSuccess(response);
        },
        on0 : function(response) {
          response.request.options.onFailure(response);
        },
        onComplete : function() {
          addTrigger.disabled = false
        }
      });
    }
  });
  return ExtraData;
}(ExtraData || {}));

document.observe('xwiki:dom:loaded', function() {
  new ExtraData.tools.Editor();
})</code>
    </property>
    <property>
      <name>Add/Remove data associated with the patient report</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>PhenoTips.PatientSheetCode</name>
    <number>6</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>762f626c-9e6e-4a95-89bd-0217053bf947</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>document.observe('xwiki:dom:loaded', function() {
  // Only do this in edit mode
  if (XWiki.contextaction != 'edit') { return; }
  var form = $('edit') || $('inline');
  if (!form) {return; }
  var formToken = form.form_token &amp;&amp; form.form_token.value;

  // What the form initially looked like
  var originalFormData = form.serialize();

  // Warn users when they navigate away from this page without submitting the form, if the data changed
  /*window.onbeforeunload = function(uEvent) {
    if (originalFormData != form.serialize()) {
      return "There are unsaved changes on this page. Are you sure you wish to leave?";
    }
  };
  form.observe('submit', function(event) {
     window.onbeforeunload = function() {};
  });*/

  // Obtain the number of the loaded version
  var originalVersion = ($$("meta[name=version]").length &gt; 0) ? $$("meta[name=version]")[0].content : false;

  // What could happen on cancel:
  var __getRollbackURL = function (version) {
    return XWiki.currentDocument.getURL('rollback', 'rev=' + version + "&amp;confirm=1&amp;form_token=" + formToken);
  }
  var deleteURL =  XWiki.currentDocument.getURL('delete', "confirm=1&amp;form_token=" + formToken);
  var NEW_DOCUMENT = 'none';

  if (originalVersion) {
     var cancelURL = __getRollbackURL(originalVersion);
  }

  var versionProviderURL = XWiki.currentDocument.getRestURL();
  var __getDocumentVersionFromREST = function(xml) {
    var version = xml.getElementsByTagName('version');
    if (version.length &gt; 0) {
       return version[0].firstChild.nodeValue;
    }
    return false;
  };

  // In background, check if the document actually exists; if not, it should be deleted on cancel
  // (non-existing documents have 1.1 in their meta version)
  new Ajax.Request(
            versionProviderURL, {
              method: 'get',
              onSuccess : function (response) {
                // only update if the information was unavailable in the meta section
                if (!originalVersion &amp;&amp; (originalVersion = __getDocumentVersionFromREST(response.responseXML))) {
                   cancelURL = __getRollbackURL(originalVersion);
                }
              },
              onFailure : function (response) {
                if (response.statusCode == 404) {
                   //Document missing
                   originalVersion = NEW_DOCUMENT;
                   cancelURL = deleteURL;
                }
              }.bind(this)
            }
      );

  //form.select('input[name=action_cancel]').invoke('stopOserving', 'click');
  form.select('input[name=action_cancel]').invoke('observe', 'click', function (event) {
    // Continue with the default behavior if the cancel action is being forced after form version verification
    // or if at this point we still have no information regarding the original document version
    if (form._isVersionVerified || !originalVersion || !cancelURL) { return; }
    Event.stop(event);
    // Find the current version
    new Ajax.Request(
            versionProviderURL,
            {
              method: 'get',
              onCreate : function() {
                form._isVersionVerified = true;
              },
              onSuccess : function(response) {
                var crtVersion = __getDocumentVersionFromREST(response.responseXML);
                window.onbeforeunload = function() {};
                if (crtVersion &amp;&amp; crtVersion != originalVersion) {
                  // Go to the original state (i.e. rollback or delete)
                  window.location = cancelURL;
                } else {
                  //just cancel
                  event.element().click();
                }
              }.bind(this),
              onFailure : function (response) {
                window.onbeforeunload = function() {};
                // Fail silently
                event.element().click();
              }.bind(this),
              on0 : function (response) {
                response.request.options.onFailure(response);
              }
            }
      );
  });
});</code>
    </property>
    <property>
      <name>Fix uncancellable object changes</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>PhenoTips.PatientSheetCode</name>
    <number>7</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>47891262-4dc8-44ea-83b2-944326a5acd0</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>document.observe('xwiki:dom:loaded', function() {

  var chartContainer = $('charts');

  var chartsZone = chartContainer &amp;&amp; chartContainer.up('.growth-charts-section');
  if (chartsZone) {
    chartsZone.select('h3, .expand-tools .tool').invoke('observe', 'click', function(event) {
      event.element().up('.growth-charts-section').toggleClassName('collapsed');
    });
  }
  // ----------------------------------------------------------------------------
  // Workaround for webkit bug https://bugs.webkit.org/show_bug.cgi?id=68995
  // Inspired by http://www.brichards.co.uk/blog/webkit-svg-height-bug-workaround
  // (adapted from jQuery to Prototype.js)
  var __adjustSVGHeight = function(svgElt) {
     // Original width/height of the svg graphic: 952 X 1225
     svgElt.setStyle({ 'height' : (1225 / 952 * svgElt.getWidth()) + 'px'});

  }
  var __adjustAllSVGHeights = function() {
     chartContainer &amp;&amp; chartContainer.select('.chart-wrapper').each(__adjustSVGHeight);
  }
  __adjustAllSVGHeights();
  Event.observe(window, 'resize', __adjustAllSVGHeights);
  // ----------------------------------------------------------------------------

  var dataTable = $('extradata-list-PhenoTips.MeasurementsClass');
  if (!dataTable) {return;}

  var reorganizeRow = function(row) {
    if (row.down('th')) {return;}
    var table = new Element('table');
    var tbody = new Element('tbody');
    table.update(tbody);
    var rowMapping = [
      {
        name : 'head',
        values : ['date', 'age', 'actions']
      }, {
        name : 'general',
        values : ['weight', 'weight_evaluation', 'height', 'height_evaluation', 'bmi', 'bmi_evaluation']
      }, {
        name : 'ratios',
        values : ['armspan', 'armspan_evaluation', 'sitting', 'sitting_evaluation']
      }, {
        name : 'face',
        values : ['hc', 'hc_evaluation', 'philtrum', 'philtrum_evaluation', 'ear', 'ear_evaluation', 'ear_right', 'ear_right_evaluation']
      }, {
        name : 'eyes',
        values : ['ocd', 'ocd_evaluation', 'icd', 'icd_evaluation', 'pfl', 'pfl_evaluation', 'ipd', 'ipd_evaluation']
      }, {
        name : 'left-side',
        values : ['hand', 'hand_evaluation', 'palm', 'palm_evaluation', 'foot', 'foot_evaluation']
      }, {
        name : 'right-side',
        values : ['hand_right', 'hand_right_evaluation', 'palm_right', 'palm_right_evaluation', 'foot_right', 'foot_right_evaluation']
      }
    ];
    rowMapping.each(function (data) {
      var newRow = new Element('tr', {'class' : data.name + '-group'});
      newRow.insert(new Element('td', {'class' : 'icon'}))
      data.values.each(function (className) {
        var element = row.down('td.' + className);
        if (element) {
          newRow.insert(element);
          if (className == 'age') { element.setAttribute('colspan', 6);}
        }
      });
      if (newRow.down('td')) {
        tbody.insert(newRow);
      }
    });
    row.update(table.wrap('td'));
    row.addClassName('data-row');
  };
  dataTable.select('tr').each(reorganizeRow);
  if (!dataTable.down('.actions')) {return;}

  var measurementsService = "$xwiki.getURL('PhenoTips.PatientToolsService', 'get')";
  var chartService = "$xwiki.getURL('PhenoTips.ChartService', 'get')";
  var chartContainer = $('charts')

  var createRowQueryString = function (row, forceParam) {
    var date = row.down('td.date input');
    //if (!date) {return '';}
    var birthDate = $(document.documentElement).down('input[name$=date_of_birth]');

    return createReqParam('weight', row.down('td.weight input'), forceParam) +
           createReqParam('height', row.down('td.height input'), forceParam) +
           createReqParam('bmi', row.down('td.bmi input'), forceParam) +
           createReqParam('hc', row.down('td.hc input'), forceParam) +
           createReqParam('ocd', row.down('td.ocd input'), forceParam) +
           createReqParam('icd', row.down('td.icd input'), forceParam) +
           createReqParam('pfl', row.down('td.pfl input'), forceParam) +
           createReqParam('ipd', row.down('td.ipd input'), forceParam) +
           createReqParam('ear', row.down('td.ear input'), forceParam) +
           createReqParam('hand', row.down('td.hand input'), forceParam) +
           createReqParam('palm', row.down('td.palm input'), forceParam) +
           createReqParam('foot', row.down('td.foot input'), forceParam) +
           createReqParam('ear_right', row.down('td.ear_right input'), forceParam) +
           createReqParam('hand_right', row.down('td.hand_right input'), forceParam) +
           createReqParam('palm_right', row.down('td.palm_right input'), forceParam) +
           createReqParam('foot_right', row.down('td.foot_right input'), forceParam) +
           createReqParam('philtrum', row.down('td.philtrum input'), forceParam) +
           createReqParam('armspan', row.down('td.armspan input'), forceParam) +
           createReqParam('sitting', row.down('td.sitting input'), forceParam) +
           createReqParamAge('a', date, birthDate, forceParam);
  }

  var createReqParam = function (name, sourceInput, forceParam) {
    var value = sourceInput &amp;&amp; sourceInput.value != '' &amp;&amp; parseFloat(sourceInput.value);
    if (value) {
      return '&amp;' + name + '=' + encodeURIComponent(value);
    }
    return forceParam &amp;&amp; ('&amp;' + name + '=') || '';
  }
  var createReqParamAge = function (name, crtDate, birthDate, forceParam) {
    if (!birthDate || !crtDate) {return ''}
    var bDateObj = Date.parseISO_8601(birthDate.alt || '');
    var cDateObj = Date.parseISO_8601(crtDate.alt || '');
    if (!bDateObj || !cDateObj) {return ''}
    var age = (cDateObj.getFullYear() - bDateObj.getFullYear()) * 12 + (cDateObj.getMonth() - bDateObj.getMonth()) + (cDateObj.getDate() &lt; bDateObj.getDate() ? -1 : 0);
    if (age &gt;= 0) {
      var displayedAge = '';
      if (age == 0) {
        displayedAge = '0';
      }
      var y = Math.floor(age / 12);
      var m = age % 12;
      if (y &gt; 0) {
        displayedAge = y + 'y ';
      }
      if (m &gt; 0) {
        displayedAge += m + 'm ';
      }
      var target = crtDate.up('tr') &amp;&amp; crtDate.up('tr').down('td.age');
      if (target) {
        if (target.down('input')) {
          target.down('input').value = age;
        }
        if (target.down('.displayed-value')) {
          target.down('.displayed-value').update(displayedAge);
        }
      }
    }
    return (age &gt;= 0) &amp;&amp; ('&amp;' + name + '=' + encodeURIComponent(age)) || forceParam &amp;&amp; ('&amp;' + name + '=') || '';
  }
  var createReqParamSex = function (name, sourceInput) {
    return (sourceInput &amp;&amp; sourceInput.value &amp;&amp; ('&amp;' + name + '=' + encodeURIComponent(sourceInput.value))) || '';
  }

  var getMostRecentEntry = function() {
    var mostRecentEntry;
    var mostRecentDate;
    dataTable.select('tr input.xwiki-date').each(function(element) {
      var date = Date.parseISO_8601(element.alt.strip());
      if (!mostRecentDate || mostRecentDate &lt; date) {
         mostRecentDate = date;
         mostRecentEntry = element.up('tr.data-row');
      }
    })
    return mostRecentEntry;
  }

  var updateValue = function (target, value, fuzzyValue) {
    var input = target.down('input[type=hidden]');
    var displayed = target.down('.displayed-value');
    input &amp;&amp; (input.value = value);
    displayed.update(value || '-');
    if (fuzzyValue) {
      ['extreme-below-normal', 'below-normal', 'normal', 'above-normal', 'extreme-above-normal'].each(function (cssClass) {
        displayed.removeClassName(cssClass);
      });
      displayed.addClassName(fuzzyValue);
    }
  }

  var updateDependentValues = function (targets, values) {
    for (var p in values) {
      ['value', 'evaluation'].each( function (value) {
        if (values[p] &amp;&amp; values[p][value] &amp;&amp; targets[p] &amp;&amp; targets[p][value]) {
           updateValue(targets[p][value], values[p][value], (value == 'evaluation') &amp;&amp; values[p]['valCategory']);
           var target = targets[p];
           if (value == 'evaluation' &amp;&amp; target['valueHooks'] &amp;&amp; getMostRecentEntry() == targets[p][value].up('tr.data-row')) {
             var targetElt = values[p]['valCategory'] &amp;&amp; target['valueHooks'][values[p]['valCategory']];
             if (targetElt &amp;&amp; !targetElt.checked) {
                 if (targetElt._ynpicker) {
                   targetElt._ynpicker._onYes();
                 } else {
                   targetElt.checked = true;
                 }
                 highlightChecked(targetElt);
             }
             ['extreme-below-normal', 'extreme-above-normal'].without(values[p]['valCategory'] || '').each(function(val) {
                var elt = target['valueHooks'][val];
                if (elt &amp;&amp; elt.checked) {
                  if (elt._ynpicker) {
                    elt._ynpicker._onUnselect();
                  } else {
                    elt.checked = false;
                  }
                }
             });
           }
        }
      });
    }
  }

  var lastRequestID = 0;
  var lastChartRequestID = 0;

  var updateCharts = function(event) {
    var qs = '';
    dataTable.select('tr.data-row').each(function(row) {
      qs += createRowQueryString(row, true);
    })
    if (qs == '') {return;}
    var sex = $(document.documentElement).down('input[name$=gender]:checked');
    var url = chartService + "?" + qs + createReqParamSex('s', sex) + "&amp;width=" + chartContainer.getDimensions()['width'];

    var requestID = ++lastChartRequestID;

    var ajx = new Ajax.Request(url, {
       method: 'get',
       onSuccess: function(response) {
          if (requestID &lt; lastChartRequestID) {return;}
          chartContainer.update(response.responseText);
          __adjustAllSVGHeights();
       },
       onFailure: function (response) {}
    });
  }

  var valueChanged = function(event) {
    // Get inputs holding the values needed for computing the dependent values
    var row = event &amp;&amp; event.element &amp;&amp; event.element() &amp;&amp; event.element().up('tr.data-row');
    if (row) {
       updateDataRow(row);
    } else {
       dataTable.select('tr.data-row').each(updateDataRow);
    }
  }

  var updateDataRow = function(row) {
    var qs = createRowQueryString(row);
    if (qs == '') {return;}
    var sex = $(document.documentElement).down('input[name$=gender]:checked');

    var url = measurementsService;

    var targets = {
       bmi : {
         value : row.down('td.bmi'),
         evaluation : row.down('td.bmi_evaluation')
       },
       weight : {
         evaluation : row.down('td.weight_evaluation'),
         valueHooks : {
           'extreme-below-normal': findFormElementForPhenotype('HP:0004325'),
           'extreme-above-normal': findFormElementForPhenotype('HP:0001513')
         }
       },
       height : {
         evaluation : row.down('td.height_evaluation'),
         valueHooks : {
           'extreme-below-normal': findFormElementForPhenotype('HP:0004322'),
           'extreme-above-normal': findFormElementForPhenotype('HP:0000098')
         }
       },
       hc : {
         evaluation : row.down('td.hc_evaluation'),
         valueHooks : {
           'extreme-below-normal': findFormElementForPhenotype('HP:0000252'),
           'extreme-above-normal': findFormElementForPhenotype('HP:0000256')
         }
       },
       ocd : {
         evaluation : row.down('td.ocd_evaluation')
       },
       icd : {
         evaluation : row.down('td.icd_evaluation')
       },
       pfl : {
         evaluation : row.down('td.pfl_evaluation')
       },
       ipd : {
         evaluation : row.down('td.ipd_evaluation'),
         valueHooks : {
           'extreme-below-normal': findFormElementForPhenotype('HP:0000601'),
           'extreme-above-normal': findFormElementForPhenotype('HP:0000316')
         }
       },
       ear : {
         evaluation : row.down('td.ear_evaluation')
       },
       hand : {
         evaluation : row.down('td.hand_evaluation'),
         valueHooks : {
           'extreme-above-normal': findFormElementForPhenotype('HP:0001176')
         }
       },
       palm : {
         evaluation : row.down('td.palm_evaluation')
       },
       foot : {
         evaluation : row.down('td.foot_evaluation'),
         valueHooks : {
           'extreme-below-normal': findFormElementForPhenotype('HP:0001764'),
           'extreme-above-normal': findFormElementForPhenotype('HP:0001833')
         }
       },
       ear_right : {
         evaluation : row.down('td.ear_right_evaluation')
       },
       hand_right : {
         evaluation : row.down('td.hand_right_evaluation'),
         valueHooks : {
           'extreme-above-normal': findFormElementForPhenotype('HP:0001176')
         }
       },
       palm_right : {
         evaluation : row.down('td.palm_right_evaluation')
       },
       foot_right : {
         evaluation : row.down('td.foot_right_evaluation'),
         valueHooks : {
           'extreme-below-normal': findFormElementForPhenotype('HP:0001764'),
           'extreme-above-normal': findFormElementForPhenotype('HP:0001833')
         }
       },
       philtrum : {
         evaluation : row.down('td.philtrum_evaluation')
       },
       armspan : {
         evaluation : row.down('td.armspan_evaluation')
       },
       sitting : {
         evaluation : row.down('td.sitting_evaluation')
       }
    };

    var requestID = ++lastRequestID;

    var ajx = new Ajax.Request(url, {
       method: 'post',
       parameters:  qs + createReqParamSex('s', sex) + '&amp;outputSyntax=plain',
       requestHeaders: {Accept : "application/json"},
       onSuccess: function(response) {
          if (requestID &lt; lastRequestID) {return;}
          updateDependentValues(targets, response.responseJSON)
       },
       onFailure: function (response) {}
    });
  }

  // TODO: make sure events work on all browsers
  var handleValueChanged = function (elementsList) {
    ['blur', 'keypress', 'keyup', 'xwiki:date:changed'].each(function (eventName) {
      elementsList.invoke('observe', eventName, valueChanged);
    })
    if (chartContainer) {
      ['blur', 'xwiki:date:changed'].each(function (eventName) {
        elementsList.invoke('observe', eventName, updateCharts);
      })
    }
  };

  // Attach all listeners
  handleValueChanged(dataTable.select('input[type=text]'));
  handleValueChanged($$('input[name$=date_of_birth], input[name$=gender]'));
  dataTable.observe('extradata:added', function (event) {
     var elements = event &amp;&amp; event.memo &amp;&amp; event.memo.element &amp;&amp; event.memo.element.select('input[type=text]');
     if (elements) {
       reorganizeRow(event.memo.element);
       handleValueChanged(elements);
       if (window.dateTimePicker) {
         window.dateTimePicker.attachPickers(event.memo.element);
       } else {
         var crtYear = new Date().getFullYear();
         window.dateTimePicker = new XWiki.widgets.DateTimePicker({year_range: [crtYear - 99, crtYear + 1]});
       }
     }
  });
});</code>
    </property>
    <property>
      <name>Automatic computation of growth parameters</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>PhenoTips.PatientSheetCode</name>
    <number>8</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>fee0fd2a-16d1-45ac-8a44-16af9afec0f7</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>document.observe('xwiki:dom:loaded', function() {
  // Edit buttons for every heading in view mode
  var editButton = $('tmActionEdit');
  if (editButton) {
    $$('h2[id]').each(function(title) {
      var editLink = new Element('a', {'class' : 'action-edit', 'href' : editButton.href + '#' + title.id}).update('Edit');
      title.insert(editLink);
    });
  }
  if (!$('inline')) {return;}

  // , .chapter.phenotype-info .negative_phenotype-group
  $$('.chapter.phenotype-info .phenotype-group').invoke('addClassName', 'collapsible-group');

  $$('.chapter h2').each(function(item){
    var chapterShow = new Element('span', {'class' : 'tool show'}).update('Show');
    var chapterHide = new Element('span', {'class' : 'tool hide'}).update('Hide');
    var chapterExpandTools = new Element('span', {'class' : 'expand-tools'}).insert(chapterShow).insert(chapterHide);
    item.insert({after: chapterExpandTools});
    [chapterShow, chapterHide, item].invoke('observe', 'click', function (event) {
      event.element().up('.chapter').toggleClassName('collapsed');
    });
  });
  $$('.chapter:not(.patient-info)').each(function(item) {
     if (!(window.location.hash &amp;&amp; item.down(window.location.hash))) {
       item.addClassName('collapsed');
     }
  });


 $$('.chapter .browser .textual-title').each(function(item){
    var phTextualHide = new Element('span', {'class' : 'tool textual-hide'}).update('Hide');
    var phTextualExpandTools = new Element('span', {'class' : 'textual-expand-tools'}).insert(phTextualHide);
    item.insert({after: phTextualExpandTools});
    [phTextualHide, item].invoke('observe', 'click', function (event) {
      event.element().up('.textual-area').toggleClassName('collapsed');
      event.element().up('.chapter').select('.current-phenotype-selection').invoke('toggleClassName', 'third-width');
    });
  });


  $$('.chapter .browser .browser-title').each(function(item){
    var phBrowserHide = new Element('span', {'class' : 'tool hide'}).update('Hide');
    var phBrowserExpandTools = new Element('span', {'class' : 'expand-tools'}).insert(phBrowserHide);
    item.insert({after: phBrowserExpandTools});
    [phBrowserHide, item].invoke('observe', 'click', function (event) {
      event.element().up('.browser').toggleClassName('collapsed');
      event.element().up('.chapter').select('.current-phenotype-selection').invoke('toggleClassName', 'third-width');
    });
  });

  var phBrowserExpandAll = new Element('span', {'class' : 'tool expand-all'}).update('Expand all');
  var phBrowserCollapseAll = new Element('span', {'class' : 'tool collapse-all'}).update('Collapse all');
  var phBrowserJumpTo = new Element('span', {'class' : 'tool jump-to'}).update('Jump to');
  var phBrowserExpandTools =
      new Element('span', {'class' : 'inner-expand-tools'}).insert(phBrowserJumpTo).insert(" Â· ").insert(
                  phBrowserExpandAll).insert(" Â· ").insert(phBrowserCollapseAll).insert(" Â· ");

  var phBrowserTocList = new Element('ul');
  var phBrowserToc = new Element('div', {'class' : 'chapter-toc'}).insert(phBrowserTocList);

  $$('.chapter.phenotype-info .browser h3+.expand-tools').invoke('insert', {'top' : phBrowserExpandTools});
  phBrowserExpandTools.up().insert({'after' : phBrowserToc});
  $$('.chapter.phenotype-info .collapsible-group h3').each(function(item) {
     phBrowserTocList.insert(new Element('li').update(new Element('a', {'href' : '#' + item.getAttribute('id')}).update(item.innerHTML)));
     item.insert({'top': new Element('span', {'class' : 'expand-tool'}).update('â–¼')});
  });

  var toggleCategory = function(target) {
     if (!target) {return;}
     if (typeof (target.element) == 'function') {
       return toggleCategory(target.element());
     }
     var parent = target.up('.collapsible-group');
     if (parent) {
       parent.toggleClassName('collapsed');
       parent.down('.expand-tool').update(parent.hasClassName('collapsed') &amp;&amp; 'â–º' || 'â–¼');
     }
  }

  $$('.chapter.phenotype-info .collapsible-group h3').each(function(item){
     if (!item.up('.collapsible-group').down('input[type=checkbox]:checked')) {
       toggleCategory(item);
     }
     item.observe('click', toggleCategory);
  });
  phBrowserExpandAll.observe('click', function(event){
    event.element().up('.chapter').select('.collapsible-group.collapsed h3').each(function(item){
      toggleCategory(item);
    });
  });
  phBrowserCollapseAll.observe('click', function(event){
    event.element().up('.chapter').select('.collapsible-group:not(.collapsed) h3').each(function(item){
      toggleCategory(item);
    });
  });

  phBrowserToc.toggle();
  phBrowserJumpTo.observe('click', function(event){
    phBrowserToc.toggle();
  });
  phBrowserToc.select('a').invoke('observe', 'click', function(event) {
    phBrowserToc.toggle();
    tocLinkClicked(event);
  });

});</code>
    </property>
    <property>
      <name>Expand/collapse categories</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>PhenoTips.PatientSheetCode</name>
    <number>9</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>ec95a008-e5ee-4400-83fc-b60abd4d4440</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>document.observe('xwiki:dom:loading', function() {

  $$('.ncbi-search-box h3, .ncbi-search-box .expand-tools .tool').invoke('observe', 'click', function(event) {
     event.element().up('.ncbi-search-box').toggleClassName('collapsed');
  });
  //$$('.ncbi-search-box').invoke('toggleClassName' ,'collapsed');

  var defaultSearchTerms = $('defaultSearchTerms');
  var defaultSearchTermsInput = $('defaultSearchTermsInput');
  var defaultSearchTermIDsInput = $('defaultSearchTermIDsInput');
  var customSearchTermsInput = $('customSearchTermsInput');

  var omimField = $('prefix') &amp;&amp; $($('prefix').value + 'omim_id');

  var services = {
    'omim' : {
       'script' : "$xwiki.getURL('PhenoTips.OmimPredictService', 'get', 'format=html&amp;q=')",
       'source' : [defaultSearchTermIDsInput],
       'target' : $('omim-search-results'),
       'suggestFor' : omimField
    },
    'pubmed' : {
       'script' : "$xwiki.getURL('PhenoTips.PubMedService', 'get', 'format=html&amp;q=')",
       'source' : [customSearchTermsInput, defaultSearchTermsInput],
       'target' : $('pubmed-search-results')
    },
    'diffDiagnosis' : {
       'script' : "$xwiki.getURL('PhenoTips.DiffDiagnosisService', 'get', 'format=html&amp;q=')",
       'source' : [defaultSearchTermIDsInput],
       'target' : $('diffDiagnosis-search-results'),
       'suggestFor' : $('quick-phenotype-search')
    }
  };

  if (!defaultSearchTerms || !defaultSearchTermsInput || (!services.omim.target &amp;&amp; !services.pubmed.target &amp;&amp; !services.diffDiagnosis.target)) {return;}

  var cache = {'all' : {}, 'displayed' : {}};

  var updateSearchValue = function() {
    var prevValue = defaultSearchTermsInput.value;
    defaultSearchTermsInput.value = '';
    defaultSearchTermIDsInput.value = '';
    defaultSearchTerms.select('.search-term:not(.disabled)').each(function(term) {
      defaultSearchTermsInput.value += ' "' + term.innerHTML + '"';
      defaultSearchTermIDsInput.value += term.__key + ' ';
    });
    if (defaultSearchTermsInput.value != prevValue) {
      doSearch('omim');
      doSearch('pubmed');
      doSearch('diffDiagnosis');
    }
  }

  var updateDefaultSearchTerms = function() {
    var container = new Element('div', { 'class' : 'default-search-terms-container'});
    for (var k in cache.displayed) {
       var obj = cache.all[k];
       if (obj) {
          var elt = new Element('span', {'class' : 'search-term ' + obj.type}).update(obj.text);
          elt.__key = obj.key;
          elt.title = obj.disabled &amp;&amp; 'Click to enable' || 'Click to disable';
          if (obj.disabled) {
            elt.addClassName('disabled');
          }
          container.insert(elt);
          elt.observe('click', function(event) {
             var target = event.element();
             target.toggleClassName('disabled');
             cache.all[target.__key].disabled = target.hasClassName('disabled');
             target.title = cache.all[target.__key].disabled &amp;&amp; 'Click to enable' || 'Click to disable';
             updateSearchValue();
          })
       }
    }
    defaultSearchTerms.update(container);
    updateSearchValue();
  }

  var requestCreated = function(service, request) {
    service.target.up().addClassName('loading');
  }
  var responseReceived = function(service, request) {
    if (request &amp;&amp; request.getHeader('X-ReqNo') == service.expectedReqNo) {
      service.target.up().removeClassName('loading');
    } else {
      request.request.container = {};
    }
  }

  var updateDone = function(service) {
    if (service.suggestFor  &amp;&amp; service.suggestFor._suggestPicker) {
        service.target.select('li').each(function (item) {
          if (item.down('input[type=checkbox]')) {return;}
          var idElt = item.down('.id');
          var nameElt = item.down('.title');
          var id = idElt &amp;&amp; idElt.title;
          var name = item.down('.title a') &amp;&amp; item.down('.title a').innerHTML || item.down('.title') &amp;&amp; item.down('.title').innerHTML;
          var categoryElt = item.down('.term-category');
          if (id &amp;&amp; name) {
           if (service.suggestFor.hasClassName('generateYesNo')) {
              // generate yn pickers
              var positiveName = service.suggestFor.name.replace(/__suggested$/, '');
              var negativeName = positiveName.replace(/(_\d+)_/, "$1_negative_");
              var ynpicker = YesNoPicker.generatePickerElement([
                    {type: 'yes', name: positiveName, id: '', selected: isValueSelected(positiveName, id)},
                    {type: 'no' , name: negativeName, id: '', selected: isValueSelected(negativeName, id)}
                  ], id, name, true, nameElt);
              item.insert({top: ynpicker});

              ynpicker.select('label').invoke('observe', 'click', function(event) {
               var option = Event.findElement(event);
               var input = option.down('input[type="checkbox"]');
               if (!input) {return;}
               if (input.checked) {
                 var negative = option.hasClassName('no');
                 var categoryClone = categoryElt.clone(true);
                 if (negative) {
                     categoryClone.insert(new Element('input', {type: 'hidden', name : 'fieldName', value : input.name}));
                 }
                 service.suggestFor._suggestPicker.silent = true;
                 service.suggestFor._suggestPicker.acceptSuggestion({'id' : id, 'value' : name, 'category' : categoryClone, 'negative' : negative});
                 service.suggestFor._suggestPicker.silent = false;
                 new XWiki.widgets.Notification('Added "' + name + '"', 'done');
               } else {
                 var existingValue = $(service.suggestFor.id + '_' + input.value);
                 if (existingValue) {
                   existingValue.checked = false;
                   new XWiki.widgets.Notification('Removed "' + name + '"', 'done');
                 }
               }
            });

            // enableHighlightChecked(ynpicker.down('.yes input'));
            // enableHighlightChecked(ynpicker.down('.no input'));
           } else {
            // generate simple checkboxes
            var trigger = new Element('input', {'type' :  'checkbox', 'value' : id, 'title' : 'Select', id : 'result__' + id});
            var existingValue = $(service.suggestFor.id + '_' + id);
            if (existingValue &amp;&amp; existingValue.checked) {
              trigger.checked = true;
            }
            trigger.__suggestion = {'id' : id, 'value' : name};
            nameElt.wrap('label', {'for' : 'result__' + id});
            idElt.insert({'before' : trigger});
            trigger.observe('click', function(event) {
               var input = Event.findElement(event, 'input[type=checkbox]');
               if (input.checked) {
                 service.suggestFor._suggestPicker.silent = true;
                 service.suggestFor._suggestPicker.acceptSuggestion(input.__suggestion);
                 service.suggestFor._suggestPicker.silent = false;
                 new XWiki.widgets.Notification('Added "' + input.__suggestion.value + '"', 'done');
               } else {
                 var existingValue = $(service.suggestFor.id + '_' + input.value);
                 if (existingValue) {
                   existingValue.checked = false;
                   new XWiki.widgets.Notification('Removed "' + input.__suggestion.value + '"', 'done');
                 }
               }
            });
           } // generate simple checkboxes, not yn pickers
          }
        });
    }
    if (service.target.__hiddenParent) {
      if (service.target.down('li')) {
         //has results
         service.target.__hiddenParent.removeClassName('hidden');
      } else {
         service.target.__hiddenParent.addClassName('hidden');
      }
    }
  };

  var doSearch = function(service) {
    var data = services[service];
    if (!data || !data.target || !data.script) {return;}
    if (data.__pendingRequest !== undefined) {
      window.clearTimeout(data.__pendingRequest);
      data.__pendingRequest = undefined;
    }
    data.target.__initialized || (data.target.__initialized = true) &amp;&amp; (data.target.__hiddenParent = data.target.up('.background-search.hidden'));
    if (!data.expectedReqNo) {
      data.expectedReqNo = 0;
    }
    //var queryString = (customSearchTermsInput &amp;&amp; (customSearchTermsInput.value.strip() + ' ') || '') + defaultSearchTermsInput.value.strip();
    var queryString = '';
    var parameters = {};
    for (var k in cache.displayed) {
      var obj = cache.all[k];
      if (obj &amp;&amp; !obj.disabled) {
        var list = parameters[obj.type];
        if (!list) {
          list = [];
          parameters[obj.type] = list;
        }
        list.push(obj.key);
      }
    }
    data.source.each(function(source) {
       queryString += ((source &amp;&amp; source.value.strip()) + ' ') || '';
    });

    data.__pendingRequest = function() {
      data.__pendingRequest = undefined;
      new Ajax.Updater(data.target, data.script + encodeURIComponent(queryString.strip()) + "&amp;reqNo=" + ++data.expectedReqNo, {
        parameters: parameters,
        onCreate : requestCreated.bind(this, data),
        onSuccess : responseReceived.bind(this, data),
        onComplete : updateDone.bind(this, data)
      });
    }.bind(this).delay(0.5);
  }

  document.observe('phenotype:selected', function(event) {
    if (!event.memo || !event.memo.key || !event.memo.element) {return;}
    var key = event.memo.key;
    var text = event.memo.text || event.memo.key;
    var obj = cache.all[key];
    // The event is sent for NA, Yes and No checkboxes, in this order, with partial results along the way.
    // If we want to check the final state of the value, we only take the No checkbox into account.
    if (event.memo.type == 'no') {
      var yesSelected = event.memo.element.up('.yes-no-picker').down('.yes input').checked;
      var noSelected = event.memo.enable;
      if (yesSelected || noSelected) {
        if (!obj) {
          obj = {'key' : key, 'text' : text};
          cache.all[key] = obj;
        } else {
          obj.hidden = false;
        }
        obj.type = noSelected ? 'not_symptom' : (key.startsWith('HP:') ? 'symptom' : 'free_symptom');
        cache.displayed[key] = true;
      } else {
        if (obj) {
          obj.hidden = true;
          delete cache.displayed[key];
        }
      }
    }
    updateDefaultSearchTerms();
  });

  document.observe('xwiki:dom:loaded', function() {
    $$(".yes-no-picker").each(function(element) {
      var yesInput = element.down('.yes input');
      var noInput = element.down('.no input');
      if (yesInput.name === noInput.name) {
        // Not a phenotype
        return;
      }
      var key = yesInput.value;
      // FIXME The nextSibling part is supposed to make simple checkboxes work as well, but we're already selecting only YesNo pickers.
      // Should be revisited to add back support for simple checkboxes.
      var text = yesInput.title || (element.nextSibling &amp;&amp; (element.nextSibling.firstChild &amp;&amp; element.nextSibling.firstChild.nodeValue || element.nextSibling.nodeValue)) || key;
      var obj = cache.all[key];
      var enable = !element.down('.na input').checked;
      if (enable) {
        if (!obj) {
          obj = {'key' : key, 'text' : text};
          cache.all[key] = obj;
        } else {
          obj.hidden = false;
        }
        obj.type = (noInput.checked ? 'not_symptom' : (key.startsWith('HP:') ? 'symptom' : 'free_symptom'));
        cache.displayed[key] = true;
      } else {
        if (obj) {
          obj.hidden = true;
          delete cache.displayed[key];
        }
      }
    });
    updateDefaultSearchTerms();
  });

  if (customSearchTermsInput) {
    customSearchTermsInput.observe('keyup', function(event) {
       doSearch('omim');
       doSearch('pubmed');
       doSearch('diffDiagnosis');
    });
  }
});</code>
    </property>
    <property>
      <name>Instant searches in the Diagnosis zone</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>PhenoTips.PatientSheetCode</name>
    <number>10</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>108065a7-3adb-4e83-b9c4-c9e7a7fbfd89</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>document.observe('xwiki:dom:loaded', function() {
  $$('.month-year-date').each(function(dateWidget){
    var dateValueInput = dateWidget.down('input.xwiki-date-hidden');
    var monthSelect = dateWidget.down('select.month');
    var yearSelect = dateWidget.down('select.year');
    if (!dateValueInput || !dateValueInput.title || !monthSelect || !yearSelect) {return;}
    [monthSelect, yearSelect].invoke('observe', 'change', function(event) {
       var format = dateValueInput.title;
       var month = monthSelect.selectedIndex &gt;= 0 &amp;&amp; monthSelect.options[monthSelect.selectedIndex].value;
       var year = yearSelect.selectedIndex &gt;= 0 &amp;&amp; yearSelect.options[yearSelect.selectedIndex].value;
       if (month &amp;&amp; year) {
          var date = new Date();
          date.setFullYear(year, month, 1);
          if (typeof (SimpleDateFormat) != 'undefined') {
            var formatter = new SimpleDateFormat(format);
            dateValueInput.value = formatter.format(date);
            dateValueInput.alt = date.toISO8601();
            Event.fire(dateValueInput, 'xwiki:date:changed');
          }
       }
    })
  })
});</code>
    </property>
    <property>
      <name>Date Pickers</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>PhenoTips.PatientSheetCode</name>
    <number>11</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>96600d0a-4191-4307-9350-f0c8fb5b1a26</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>document.observe('xwiki:dom:loaded', function() {
  // --------------------------------------------------------------------------------------------
  // Drag phenotypes to select...
  var summaryDroppable = webkit_drop.add(document.documentElement.down('.selector-panels'), {
     accept: ['term-label', 'info'],
     onDrop: function(dropped, event) {
       var input = dropped.down('input[type=checkbox]') || dropped.previous('input[type=checkbox]');
       if (input &amp;&amp; !input.checked) {
         input.click();
       }
     }
  })
  var createDraggablePhenotype = function (element) {
     element.addClassName('draggable-initialized');
     new webkit_draggable(element, {revert : 'always', scroll : true});
  }
  $$('.browse-phenotype-categories label.term-label').each(function(item){
    createDraggablePhenotype(item);
  });

  document.observe("obrowser:content:added", function(event) {
    var data = event.memo &amp;&amp; event.memo.added;
    if (!data) { return; }
    data.select('.entry-data .info:not(.draggable-initialized)').each(function(item) {
       createDraggablePhenotype(item);
    });
  });

  // --------------------------------------------------------------------------------
  // Drag summary-items back to delete them...
  var browserDroppable = webkit_drop.add(document.documentElement.down('.browse-phenotype-categories'), {
      accept: ['summary-item'],
      onDrop: function(dropped, event) {
        var input = dropped.down('input[type=checkbox]');
        if (input &amp;&amp; selectionSummary) {selectionSummary._remove(input.value);}
      }
   });
   var createDraggableSummaryItem = function (element) {
      element.addClassName('draggable-initialized');
      new webkit_draggable(element, {revert : true, scroll : true});
   }
   document.observe("summary-item:added", function(event) {
      var element = event.memo &amp;&amp; event.memo.element;
      if (element &amp;&amp; !element.hasClassName('draggable-initialized')) {
        createDraggableSummaryItem(element);
      }
   });
});</code>
    </property>
    <property>
      <name>Touchscreen drag and drop</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>PhenoTips.PatientSheetCode</name>
    <number>12</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>caf691e4-d58c-485a-9916-7abe49199ce3</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>document.observe('xwiki:dom:loaded', function() {
  $$('.yes-no-picker:not(.initialized)').each(function (ynpickerElt) {
     if (!ynpickerElt._ynpicker) {
      ynpickerElt._ynpicker = new YesNoPicker(ynpickerElt, ynpickerElt.next('label'), true);
     }
  });
});</code>
    </property>
    <property>
      <name>Other y/n/na pickers</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>PhenoTips.PatientSheetCode</name>
    <number>13</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>98e58dee-d663-42fb-88b0-2daa181ec3d4</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>document.observe('xwiki:dom:loaded', function() {
  if (!$('prefix')) {return;}
  new XWiki.editors.AutoSave({
    form : 'inline',
    enabled: true,
    frequency: 10,
    showConfigurationUI: false
  });
});</code>
    </property>
    <property>
      <name>Autosave</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>PhenoTips.PatientSheetCode</name>
    <number>14</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>b4ad6f0b-ebac-4bca-a223-ea8f394c837c</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var XWiki = (function(XWiki) {
  // Start XWiki augmentation
  var widgets = XWiki.widgets = XWiki.widgets || {};

  widgets.UniquenessValidator = Class.create({
    initialize : function(input) {
      this.input = input;
      this.valid = true;
      this.state = 'NEW';
      this.request = 0;
      this.value = input.value;
      this.serviceUrl = new XWiki.Document('CheckID', 'PhenoTips').getURL('get');
      if (!this.input.__validation) {
        this.input.__validation = new LiveValidation(this.input, {validMessage: '', wait : 500});
      }
      this.input.__validation.add(this.validate.bind(this));
    },
    check : function() {
      if (this.input.value != this.value) {
        this.value = this.input.value;
        this.state = 'CHECKING';
        new Ajax.Request(this.serviceUrl, {
          parameters : { outputSyntax: 'plain', eid: this.value, id: XWiki.Model.serialize(new XWiki.DocumentReference(XWiki.currentDocument.wiki, XWiki.currentDocument.space, XWiki.currentDocument.page))},
          on200 : this.self.bindAsEventListener(this),
          on403 : this.empty.bindAsEventListener(this),
          on404 : this.available.bindAsEventListener(this),
          on409 : this.exists.bindAsEventListener(this),
          onComplete: this.responded.bindAsEventListener(this)
        });
      }
    },
    validate : function(value) {
      if (this.state == 'DONE') {
        this.value == value &amp;&amp; (this.valid || Validate.fail("This identifier already exists"));
      }
      this.check();
      return true;
    },
    self : function() {
      this.valid = true;
    },
    available : function() {
      this.valid = true;
    },
    empty : function() {
      this.valid = false;
    },
    exists : function() {
      this.valid = false;
    },
    responded : function() {
      this.state = 'DONE';
      this.input.__validation.validate();
    }
  });

  var init = function(event) {
    ((event &amp;&amp; event.memo.elements) || [$('body')]).each(function(element) {
      element.select('input.check-unique, .external_id input').each(function(input) {
        if (!input.__uniqueness_validator) {
          input.__uniqueness_validator = new XWiki.widgets.UniquenessValidator(input);
        }
      });
    });
    return true;
  };

  (XWiki.domIsLoaded &amp;&amp; init()) || document.observe("xwiki:dom:loaded", init);
  document.observe('xwiki:dom:updated', init);

  // End XWiki augmentation.
  return XWiki;
}(XWiki || {}));</code>
    </property>
    <property>
      <name>ID uniqueness validation</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>PhenoTips.PatientSheetCode</name>
    <number>15</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>0dad2b4e-4f21-4652-b032-0aa9d6ee2e5a</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>Event.observe(window, 'load', function() {
  for (binding in shortcut.all_shortcuts) {
    shortcut.remove(binding);
  }
});</code>
    </property>
    <property>
      <name>Disable keyboard shortcuts</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.PDFClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <fopxsl>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>---</editor>
        <name>fopxsl</name>
        <number>3</number>
        <picker>0</picker>
        <prettyName>fopxsl</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </fopxsl>
      <style>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>---</editor>
        <name>style</name>
        <number>1</number>
        <picker>0</picker>
        <prettyName>style</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </style>
      <xhtmlxsl>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>---</editor>
        <name>xhtmlxsl</name>
        <number>2</number>
        <picker>0</picker>
        <prettyName>xhtmlxsl</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </xhtmlxsl>
    </class>
    <name>PhenoTips.PatientSheetCode</name>
    <number>0</number>
    <className>XWiki.PDFClass</className>
    <guid>8013b262-b466-4c84-be89-c48455787e47</guid>
    <property>
      <fopxsl>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:fo="http://www.w3.org/1999/XSL/Format"
    xmlns:html="http://www.w3.org/1999/xhtml"&gt;

  &lt;xsl:output method="xml"/&gt;

  &lt;xsl:template match="@*|node()"&gt;
    &lt;xsl:copy&gt;
      &lt;xsl:apply-templates select="@*|node()"/&gt;
    &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;

  &lt;!-- Skip fo:table-and-caption because Fop won't render tables otherwise --&gt;
  &lt;xsl:template match="fo:table-and-caption"&gt;
    &lt;xsl:apply-templates/&gt;
  &lt;/xsl:template&gt;

  &lt;!-- Ignore fo:table-caption because it is not supported --&gt;
  &lt;xsl:template match="fo:table-caption" /&gt;

  &lt;!-- Change the page dimensions to Letter --&gt;
  &lt;xsl:template match="fo:simple-page-master/@page-height"&gt;
    &lt;xsl:attribute name="page-height"&gt;
      &lt;xsl:value-of select="'11in'"/&gt;
    &lt;/xsl:attribute&gt;
  &lt;/xsl:template&gt;
  &lt;xsl:template match="fo:simple-page-master/@page-width"&gt;
    &lt;xsl:attribute name="page-width"&gt;
      &lt;xsl:value-of select="'8.5in'"/&gt;
    &lt;/xsl:attribute&gt;
  &lt;/xsl:template&gt;
  &lt;!-- Change the font to FreeSans --&gt;
  &lt;xsl:template match="fo:root/@font-family"&gt;
    &lt;xsl:attribute name="font-family"&gt;
      &lt;xsl:value-of select="'FreeSans'"/&gt;
    &lt;/xsl:attribute&gt;
  &lt;/xsl:template&gt;

  &lt;!-- Change the header --&gt;
  &lt;xsl:template match="fo:static-content[@flow-name='page-header']"&gt;
    &lt;xsl:copy&gt;
      &lt;xsl:attribute name="precedence"&gt;true&lt;/xsl:attribute&gt;
      &lt;xsl:apply-templates select="@*"/&gt;
      &lt;fo:table margin-top="2em"&gt;&lt;fo:table-body&gt;&lt;fo:table-row&gt;&lt;fo:table-cell&gt;
      &lt;fo:block text-align="leftl"&gt;
        &lt;fo:instream-foreign-object content-width="scale-to-fit" content-height="scale-to-fit"
            inline-progression-dimension.minimum="auto" inline-progression-dimension.maximum="100%"
            block-progression-dimension.minimum="auto" block-progression-dimension.maximum="700px"&gt;
          &lt;svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" text-rendering="geometricPrecision" viewBox="-0.5 9.5 301 60" width="100" height="20"&gt;
          &lt;/svg&gt;
        &lt;/fo:instream-foreign-object&gt;
      &lt;/fo:block&gt;
     &lt;/fo:table-cell&gt;&lt;fo:table-cell&gt;
      &lt;fo:block font-size="large" space-after="0.5in" space-after.conditionality="retain" text-align="right"&gt;&lt;xsl:value-of select="//fo:block[@role='html:h1']"/&gt;&lt;/fo:block&gt;
     &lt;/fo:table-cell&gt;&lt;/fo:table-row&gt;&lt;/fo:table-body&gt;&lt;/fo:table&gt;
    &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;

  &lt;!-- Change the footer --&gt;
  &lt;xsl:template match="fo:static-content[@flow-name='page-footer']"&gt;
    &lt;xsl:copy&gt;
      &lt;xsl:apply-templates select="@*"/&gt;
      &lt;fo:block font-size="small" space-after="0.5in" space-after.conditionality="retain" text-align="center"&gt;Page &lt;fo:page-number/&gt; of &lt;fo:page-number-citation-last ref-id="x-page-sequence"/&gt;&lt;/fo:block&gt;
    &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;

  &lt;!-- Ignore some elements --&gt;
  &lt;xsl:template match="fo:block[@id='document-actions']" /&gt;
  &lt;xsl:template match="fo:block[@role='html:h1']" /&gt;

  &lt;!-- Add an ID to the whole page sequence, to be able to get the total number of pages --&gt;
  &lt;xsl:template match="fo:page-sequence"&gt;
    &lt;xsl:copy&gt;
      &lt;xsl:attribute name="id"&gt;&lt;xsl:text&gt;x-page-sequence&lt;/xsl:text&gt;&lt;/xsl:attribute&gt;
      &lt;xsl:apply-templates select="@*|node()"/&gt;
    &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</fopxsl>
    </property>
    <property>
      <style>#template('colorThemeInit.vm')
h3 {
  text-transform: uppercase;
  font-weight: normal;
  font-size: 1em;
}
hr {
  display: none;
}
.patient-info h2 {
  display: none;
}
.patient-info p {
  margin: 0 !important;
  padding: 0 !important;
  text-indent: 0 !important;
}
.no-selected {
  color: $theme.notificationErrorColor;
}
</style>
    </property>
    <property>
      <xhtmlxsl/>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>PhenoTips.PatientSheetCode</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>972515de-46fe-48d5-85b6-4d4dc5a696f5</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#template('colorThemeInit.vm')
/** ----------------------------------------------------------- */
/** Default style fixes **/
#mainContentArea, #mainEditArea {
    background-color: #F9F9F9;
    border: 1px solid #FFFFFF;
    box-shadow: 0 0 8px rgba(0, 0, 0, 0.2);
    margin: 2em 5%;
    padding: 0.5em 10px;
    text-shadow: 1px 1px 0 #FFFFFF;
}
.bottombuttons {
   margin: 3em -10px -3em;
}
#document-head {
  border-bottom: .4em solid $theme.buttonPrimaryBackgroundColor;
  margin: -2.7em -12px 0;
}
#document-head #document-title {
  display: inline-block;
}
#document-head h1 {
    background-color: $theme.buttonPrimaryBackgroundColor;
    border-bottom: 0 none;
    border-radius: 8px 8px 0 0;
    box-shadow: 0 0 8px rgba(0, 0, 0, 0.2);
    color: $theme.buttonPrimaryTextColor;
    display: inline-block;
    font-size: 1.2em;
    letter-spacing: 2px;
    margin: 0 0 -0.4em;
    padding: 0.4em 3em;
    text-shadow: 0 0 1px $theme.buttonPrimaryTextColor;
    text-transform: uppercase;
}
#document-head #document-authors {
  color: $theme.textPrimaryColor;
  display: inline-block;
  font-size: .87em;
  margin-left: 1em;
  padding-top: .6em;
  vertical-align: top;
}
#document-head #document-authors .sep {
  margin: 0 .5em;
}
#document-head #document-authors .document-author {
  color: $theme.textColor;
  font-weight: bold;
}
#xwikicontent {
  overflow: visible;
}
#table-of-contents {
    width: 31%;
}
.xwiki-form-listclass {
    display: inline-block;
}
.xwiki-form-listclass input[type="radio"][value=""], option[value=""] {
  display: none;
}
.buttonwrapper, .button {
  text-shadow: none;
}
hr {
  border-bottom: 1px solid $theme.pageContentBackgroundColor;
  border-left: 0 none;
  border-right: 0 none;
  border-top: 1px solid $theme.borderColor;
  clear: both;
}
input[type=text], textarea {
  border-color: $theme.pageContentBackgroundColor;
  width: 100%;
  border-radius: 4px;
  box-shadow: 0 1px 2px #aaa inset;
}
textarea {
  width: 98%;
}
input[type=text]:focus, textarea:focus {
  border-color: $theme.linkColor;
}
.fullScreenEditLinkContainer {
  display: none !important;
}
.errormessage {
  background-color: $theme.highlightColor;
}
.suggestItems .suggestValue {
  color: $theme.textColor;
}
.suggestItem .related-terms, .suggestItem .browse-related-terms {
  font-size: 100%;
  font-weight: bold;
  float: right;
  margin: 0;
  color: $theme.buttonPrimaryTextColor;
  background-color: $theme.buttonPrimaryBackgroundColor;
  border-radius: 2px;
}
.suggestItem .related-terms a, .suggestItem .browse-related-terms a {
  color: $theme.buttonPrimaryTextColor;
  display: inline-block;
  padding: 2px .5em;
}
/** ----------------------------------------------------------- */
/** ----------------------------------------------------------- */
/** Layout **/
.invisible {
  display: none !important;
}
.clear {
  display: block;
  float: none;
  clear: both;
}
.twothird-width {
  width: 66%;
  float: left;
}
.half-width {
  width: 48.5%;
  margin-right: 1%;
  float: left;
}
.half-width+.half-width {
  margin-left: 2%;
  margin-right: 0;
}
.third-width {
  width: 32%;
  float: left;
  margin-right: 1%;
}
/** ----------------------------------------------------------- */
/** Specific form elements **/
.hint {
  color: $theme.textSecondaryColor;
  font-size: 70%;
  padding: 0;
  margin: 0;
  font-style: normal;
}
.chapter {
  border: 1px solid $theme.pageContentBackgroundColor;
  border-radius: 0 0 10px 10px;
  box-shadow: 0 0 6px $theme.borderColor inset;
  ##margin: 1em 0;
  margin: 3.5em 0 1em;
  padding: 5px 10px;
  position: relative;
}
h2 a.action-edit {
  display: inline-block;
  width: 16px;
  height: 16px;
  text-indent: 40px;
  background: transparent url("$xwiki.getSkinFile('edit-s-gray.png')") center center no-repeat;
  visibility: hidden;
  overflow: hidden;
  margin: 0 .5em;
}
.chapter:hover a.action-edit {
  visibility: visible;
}
h1, h2, h3, h4 {
  text-shadow: 1px 1px 0 $theme.pageContentBackgroundColor;
}
.chapter h2 {
  ##color: $theme.linkColor;
  ##font-size: 1.5em;##1.2em;
  ####text-transform: uppercase;
  ##font-family: Georgia, serif;
  ##border-bottom: 1px solid $theme.linkColor; ##$theme.borderColor;
  ####border-left: .2em solid $theme.linkColor; ##$theme.borderColor;
  ####padding-left: .2em;
  ####text-shadow: 0 0 1px $theme.textSecondaryColor;
  ####border-radius: 0 0 0 .4em; ##.4em 0 0 0;
  ##cursor: pointer;
  ##margin-top: 0;
  border-bottom: 1px solid $theme.linkColor;
  ####color: $theme.linkColor;
  border-bottom: 1px solid $theme.titleColor;
  cursor: pointer;
  font-family: Georgia,serif;
  font-size: 1.5em;
  margin: -1.5em -10px 0;
  padding-left: 10px;

}
.chapter h2+.hint {
  margin: 1em 0;
}
.chapter h3 {
  font-size: 1.2em;
  text-transform: uppercase;
  margin: 1em 0;
  padding: 0 20px 0 0;
}
.chapter .phenotype-group,
.chapter .negative_phenotype-group {
  padding: 0 1em;
}
.chapter .phenotype-group h3,
.chapter .negative_phenotype-group h3 {
  overflow: visible;
  text-transform: uppercase;
  font-size: 1.1em;
  cursor: pointer;
  margin-left: -1em;
  margin-bottom: .3em;
}
.editbody .chapter .custom-entries {
  margin-top: .5em;
  padding-top: .5em;
  padding-left: .8em;
  border-top: 1px dotted $theme.borderColor;
}
.browse-phenotype-categories {
  margin: .5em .75% 0em !important;
  padding-right: .75%;
}
.current-phenotype-selection {
  padding: 0 !important;
  background-color: #FFFFFF;
  border: 1px solid #FFFFFF;
  border-radius: 4px;
  box-shadow: 0 1px 8px #DDDDDD inset;
  float: right;
  margin-left: 0 !important;
  margin-right: 0 !important;
  margin-top: 0.5em;
}
#current-phenotype-selection {
  margin: 0 !important;
  padding: 0 !important;
}
.current-phenotype-selection &gt; h3 {
    background: none repeat scroll 0 0 #333333;
    border: 0 none;
    border-radius: 4px 4px 0 0;
    color: #FFFFFF;
    margin: 0 !important;
    padding: 0.4em 1em;
    text-shadow: none;
}
.current-phenotype-selection h3 {
  margin-left: 1em;
  margin-right: 1em;
}
.current-phenotype-selection.half-width {
  width: 47.5%;
}
#current-phenotype-selection .summary-group {
  margin: 1em;
}
#current-phenotype-selection .summary-item {
  padding-left: 18px;
  margin-left: 1em;
  margin-bottom: .5em;
}
#current-phenotype-selection .summary-item .no, .value-checked.no-selected {
  color: $theme.notificationErrorColor;
}
#current-phenotype-selection .summary-item .no:before {
  content: "NO ";
}
#current-phenotype-selection .summary-item label {
  width: auto;
  margin-right: 1em;
}
#current-phenotype-selection .summary-item .tools {
  color: $theme.textPrimaryColor;
  font-size: 0.8em;
}
#current-phenotype-selection .summary-item .tools .tool:hover {
  color: $theme.linkColor;
  cursor: pointer;
}
.fieldset .displayed-value p {
  line-height: 1.4em;
  margin: 0;
}
.fieldset .displayed-value {
  margin: 0 0 0.5em;
}
label.selected, label.subterm-selected {
  background-color: $theme.backgroundSecondaryColor;
  background-image: none;
  font-weight: bold;
  padding-left: 4px;
  margin-left: -4px;
  border-radius: 2px;
}
label.subterm-selected {
  background-image: url("$xwiki.getSkinFile('icons/silk/shading.gif')");
  background-position: 14px center;
  background-repeat: no-repeat;
}
label.subterm-selected input[type="checkbox"] {
  opacity: .2;
}
label.selected input[type="checkbox"] {
  opacity: 1;
}
/** ----------------------------------------------------------- */
/** Patient info zone **/
.patient-info .fieldset {
  margin: .3em 0 !important;
}
.editbody .patient-info .family_study {
  margin-top: 1.2em ! important;
}
.patient-info .side {
  padding-top: .3em;
}
.editbody .patient-info label.section {
  font-weight: bold;
}
.viewbody .patient-info .label, .viewbody .patient-info label {
  color: $theme.linkColor;
  font-weight: bold;
  display: inline-block;
  width: 33%;
}
.viewbody .family_study .label {
  display: inline;
}
.viewbody .family_study .half-width {
  width: 33%;
}
.viewbody .family_study .half-width * {
  margin: 0 !important;
}
/** ----------------------------------------------------------- */
/** Quick search box &amp; suggest */
.emphasized-box {
  background: $theme.backgroundSecondaryColor;
  border: 1px solid $theme.backgroundSecondaryColor;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.2), inset 0 0 50px rgba(0, 0, 0, 0.15);
}
.quick-search-box {
  border: 0 none;
  z-index: 2000;
  background: $theme.buttonPrimaryBackgroundColor;
}
.quick-search-box fieldset {
  border: 1px solid $theme.backgroundSecondaryColor;
  padding: .5em .8em;
}
.quick-search-box table {
  margin: 0;
  width: 100%;
}
.quick-search-box table td {
  border: 0 none;
  padding: 0;
}
.quick-search-box table td.input{
  min-width: 60%;
}
.quick-search-box table label{
  color: $theme.buttonPrimaryTextColor;
  text-shadow: none;
  text-transform: uppercase;
  font-weight: bold;
}
.quick-search-box input {
  background-image: url("$xwiki.getSkinFile('icons/xwiki/search.png')");
  background-position: right center;
  background-repeat: no-repeat;
}
.quick-search-box input:focus {
  color: $theme.textColor;
  font-style: normal;
}
/** ----------------------------------------------------------- */
/** PubMed search box &amp; suggest */
.pubmed-search-box {
  width: 42.5% !important;
  position: absolute;
  top: auto;
  bottom: -1.4em !important;
  margin-right: -46% !important;
}
.pubmed-search-box fieldset {
  border: 1px solid $theme.backgroundSecondaryColor;
  padding: .5em .8em;
}
#pubmed-search-history ul {
  max-height: 5em;
  overflow: auto;
  font-size: .8em;
}
#pubmed-search-history h4 {
  margin-bottom: 0;
}
#pubmed-search-history ul li {
  padding-left: 20px;
  background-image: url("$xwiki.getSkinFile('icons/silk/page.gif')");
  background-position: left 2px;
  background-repeat: no-repeat;
}
#pubmed-search-history ul li input{
  display: none;
}
/** ----------------------------------------------------------- */
/** Clinical info zone **/
/** view mode **/
.viewbody .clinical-info .displayed-value {
  padding-left: 8px;
  margin-left: 8px;
  border-left: 2px solid $theme.borderColor;
}
.value-checked, .viewbody .clinical-info label.section {
  padding-left: 18px;
  background: transparent none left 40% no-repeat;
}
.viewbody .subsection {
  margin-left: 18px;
}
.viewbody .subsection .value-checked {
  background-image: url("$xwiki.getSkinFile('icons/silk/bullet_blue.gif')");
}
/** edit mode **/
.editbody .clinical-info label.section {
  line-height: 1.4em;
}
.editbody .clinical-info .phenotypes-main label.section:before {
  content: "\25bc";
  display: inline-block;
  color: $theme.textSecondaryColor;
  font-size: .75em;
  top: -0.5em;
  text-shadow: 0 0 5px $theme.textSecondaryColor;
  opacity: .3;
}
.chapter div .expand-tools, .textual-expand-tools {
  margin-top: -3.5em;
  margin-right: 0;
}
<<<<<<< .merge_file_DQ08xz
.chapter .expand-tools, .chapter .chapter-inner .expand-tools, .textual-expand-tools {
  ####display: block;
  ##float: right;
  ####margin-top: -1.5em;
  ##margin-top: -3.5em;
  ####margin-left: -14px;
  ##font-size: .8em;
  ##color: $theme.textPrimaryColor;
=======
.chapter .expand-tools {
>>>>>>> .merge_file_VAyNfA
  color: $theme.textPrimaryColor;;
  float: right;
  font-size: 0.8em;
  margin-right: -10px;
  margin-top: -2em;
}
.chapter .browser .expand-tools, .chapter .textual-area .textual-expand-tools {
  margin-right: 0;
  margin-top: -3em;
}
.expand-tools .tool:hover, .textual-expand-tools .tool:hover {
  color: $theme.linkColor;
  cursor: pointer;
}
.chapter.collapsed .expand-tools .inner-expand-tools,
.chapter.collapsed .expand-tools .hide,
.chapter.collapsed &gt; *,
.chapter.collapsed table,
.chapter .expand-tools .show {
  display: none;
}
.chapter.collapsed .expand-tools, .chapter.collapsed .expand-tools .show {
  display: inline
}
.chapter.collapsed &gt; h2 {
  display: block;
}
.chapter.collapsed #quick-search-box {
  display: block;
}
.selector-panels {
  position: relative;
}
.browser.collapsed .expand-tools .inner-expand-tools,
.browser.collapsed .expand-tools .hide,
.browser.collapsed .phenotype {
  display: none;
}
.browser.collapsed {
  position: absolute;
  top: 0;
  left: 0;
  border: 0 none;
}
.browser.collapsed + .current-phenotype-selection {
}
.browser.collapsed .browser-title {
  text-transform: none;
  font-size: 80%;
  color: $theme.textPrimaryColor;
  border: 0 none;
  margin: 0;
  padding: 0;
}
.browser.collapsed .browser-title:after {
  content: " Â»";
}
.browser.collapsed .browser-title:hover{
  cursor: pointer;
  color: $theme.linkColor;
}

.textual-area.collapsed .textual-title{
  text-transform: none;
  font-size: 80%;
  color: $theme.textPrimaryColor;
  border: 0 none;
  margin: 0;
  padding: 0;
}
.textual-area.collapsed .textual-title:after {
  content: " Â»";
}
.textual-area.collapsed .textual-title:hover{
  cursor: pointer;
  color: $theme.linkColor;
}

.textual-area.collapsed .textual-expand-tools .inner-expand-tools,
.textual-area.collapsed .textual-expand-tools .textual-hide,
.textual-area.collapsed .textual-box {
  display: none;
}

.phenotype-info .chapter-toc {
  float: right;
  height: 0;
  margin: -5px -10px 0;
  overflow: visible;
  text-align: right;
  position: relative;
  z-index: 1950;
}
.phenotype-info .chapter-toc ul {
  list-style-type: none;
  background: $theme.pageBackgroundColor;
  border: 1px solid $theme.borderColor;
  border-radius: 4px 0 4px 4px;
  list-style-type: none;
  margin: 0;
  padding: 0.3em 1em;
  font-size: .8em;
}
.phenotype-info h3 .expand-tool {
  vertical-align: top;
  width: 1em;
  font-size: 1em;
}
.phenotype-group.collapsed *,
.negative_phenotype-group.collapsed * {
  display: none;
}
.phenotype-group.collapsed h3,
.negative_phenotype-group.collapsed h3 {
  display: block;
}
.phenotype-group.collapsed h3 *,
.negative_phenotype-group.collapsed h3 * {
  display: inline;
}
.phenotypes-main {
  position: relative;
}
.phenotypes-main .hint {
  margin-left: 20px;
}
.subsection {
  margin-left: 1.3em;
}
.subsection .phenotypes-main br {
  display: none;
}
.subsection .phenotypes-main br:last-child {
  display: block;
  clear: left;
}
.subsection .phenotypes-main {
  display: block;
}
.subsection .phenotypes-main label {
  float: left;
  margin: 0 1% 0 0;
  padding: 0 8px;
  width: auto;
  font-weight: normal !important;
}
.subsection .phenotypes-main label.section {
  clear: both;
  display: block;
  float: none;
}
/** -------------------------------------------- **/
/** Suggestions **/
.accepted-suggestions li .delete-tool, .clear-tool {
  background-color: $theme.buttonPrimaryBackgroundColor;
  color: $theme.buttonPrimaryTextColor;
  border-radius: 3px;
  padding: 2px;
}
/** -------------------------------------------- **/
/** Negative phenotypes **/

.negative_phenotype-group h3 {
  color: $theme.notificationErrorColor;
}
.negative_phenotype-group h3 em {
  font-weight: bold;
}
.negative_phenotype-group .infomessage {
  margin-left: -4px;
}
.negative_phenotype-group .phenotypes-main .hint {
  margin-left: 0;
}
.negative_phenotype-group .label-other {
  display: none;
}
.negative_phenotype-group .selected .value, .viewbody .negative_phenotype-group .value-checked , .viewbody .negative_phenotype-group .section {
  text-decoration: line-through;
  color: $theme.notificationErrorColor;
}
/** -------------------------------------------- **/
/** "Unaffected" zone **/
.unaffected label {
  display: inline;
  font-weight: bold;
}
/** --------------------------------------------- **/
/** Charts **/
.chart-wrapper {
  box-shadow: 0 0 6px $theme.borderColor;
  display:inline-block;
  width:32%;
  margin-left:1%;
}
.term-entry {
  display: block;
  width: auto;
}

.enable-columns .predefined-entries {
 -moz-column-count: 2;
 -webkit-column-count: 2;
 column-count: 2;
}
.enable-columns .predefined-entries .subsection {
  -webkit-column-break-before:avoid;
  -moz-column-break-before:avoid;
  column-break-before:avoid;
  webkit-column-break-inside:avoid;
  -moz-column-break-inside:avoid;
  column-break-inside:avoid;
  display: table;
}

.ethnicity label, .ethnicity .label {
  font-size: 100% !important;
  color: #000 !important;
  font-weight: bold !important;
}</code>
    </property>
    <property>
      <name>Patient sheet UI</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>PhenoTips.PatientSheetCode</name>
    <number>1</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>ccd8a586-777c-4597-98e9-2303833adacb</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#template('colorThemeInit.vm')
table.extradata-list {
    width: 100%;
}
.extradata-list td, .extradata-list th {
    border: 1px solid $theme.backgroundSecondaryColor;
    border-left: 1px solid $theme.pageContentBackgroundColor;
    border-right: 1px solid $theme.pageContentBackgroundColor;
}
.extradata-list th.col-label {
    font-weight: normal;
    font-variant: small-caps;
}
.extradata th.col-label, .viewbody td {
    text-align: center;
}
.viewbody td.comments, .editbody th.comments {
    text-align: left;
    border-right: 0 none;
}
.extradata-list th.row-count {
    background: transparent;
}
.extradata-list th.row-count,
.extradata-list td.start,
.extradata-list td.end {
    text-align: right;
}
.extradata-list td.start,
.extradata-list td.end,
.extradata-list td.band {
    min-width: 6em;
}
.extradata-list th.comments {
    min-width: 20em;
}
.extradata-list .xwiki-form-listclass {
    display: block;
    white-space: nowrap;
}
.extradata-list th.actions {
  width: 24px;
}
.extradata-list th.actions .buttonwrapper {
    display: block;
    height: 2.3em;
    position: relative;
    margin: 0;
}
.extradata-list th.actions .add-data-button {
    position: absolute;
    right: 0;
}
.list-actions {
  position: relative;
  width: 99%;
}
.list-actions .buttonwrapper {
  text-align: left;
  margin: 0 !important;
}
table.withLabel td, table.withLabel th {
  border: 0 none;
}
table.withLabel tr:first-child th {
  display: none;
}
.extradata-list .bmi, .extradata-list .hc_percentile {
  min-width: 4em;
}
.extradata-list .normal {
  color: $theme.notificationSuccessColor;
}
.extradata-list .extreme-below-normal, .extradata-list .extreme-above-normal {
  color: $theme.notificationErrorColor;
}
.extradata-list .below-normal, .extradata-list .above-normal {
  color: $theme.notificationWarningColor;
}
.extradata-list .extreme-below-normal:before, .extradata-list .extreme-above-normal:before,
.extradata-list .below-normal:before, .extradata-list .above-normal:before {
  border-radius: 50%;
  color: $theme.pageContentBackgroundColor;
  display: inline-block;
  height: 1.4em;
  margin-right: 0.5em;
  text-align: center;
  text-shadow: none;
  width: 1.4em;
}
.extradata-list .extreme-below-normal:before, .extradata-list .extreme-above-normal:before {
  background-color: $theme.notificationErrorColor;
  content: "!!";
}
.extradata-list .below-normal:before, .extradata-list .above-normal:before {
  background-color: $theme.notificationWarningColor;
  content: "!";
}
form .extradata-list tr:hover td {
  background-color: $theme.highlightColor;
}
#extradata-list-PhenoTips\.MeasurementsClass {
  border-collapse: separate;
  border-spacing: 0 0;
}
#extradata-list-PhenoTips\.MeasurementsClass td {
  text-align: left;
}
#extradata-list-PhenoTips\.MeasurementsClass .displayed-value {
  white-space: nowrap;
}
#extradata-list-PhenoTips\.MeasurementsClass table {
  width: 100% !important;
}
#extradata-list-PhenoTips\.MeasurementsClass td.date label.hint,
#extradata-list-PhenoTips\.MeasurementsClass td.age label.hint {
  font-size: 1em;
  color: $theme.textColor;
  font-weight: bold;
}
#extradata-list-PhenoTips\.MeasurementsClass td.date input {
  width: 10em;
  margin: 0 0 0 .7em;
}
#extradata-list-PhenoTips\.MeasurementsClass td.age .displayed-value {
  display: inline;
}
#extradata-list-PhenoTips\.MeasurementsClass td.actions a.delete{
  margin: 0;
  background-image: none;
  width: 1em;
  height: auto;
  float: right;
  text-indent: 0;
  text-align: center;
  color: $theme.buttonPrimaryTextColor;
  text-decoration: none !important;
}
.ncbi-search-box.collapsed h3 {
  color: $theme.linkColor;
}
.growth-charts-section.collapsed #charts,
.growth-charts-section.collapsed .expand-tools .hide,
.growth-charts-section .expand-tools .show {
  display: none;
}
.growth-charts-section.collapsed .expand-tools .show {
  display: inline;
}

.extradata-list .head-group label {
  font-weight: bold;
}
.extradata-list .icon {
  width: 20px;
  background: transparent none center center no-repeat;
}
.extradata-list .head-group .icon {
  background-image: url("$xwiki.getSkinFile('icons/datamodel/calendar.png')");
}
.extradata-list .general-group .icon {
  background-image: url("$xwiki.getSkinFile('body-icon-s.png')");
  opacity: .4;
}
.extradata-list .face-group .icon {
  background-image: url("$xwiki.getSkinFile('head-icon-s.png')");
  opacity: .4;
}
.extradata-list .ratios-group .icon {
  background-image: url("$xwiki.getSkinFile('ratios-icon-s.png')");
  opacity: .4;
}
.extradata-list .eyes-group .icon {
  background-image: url("$xwiki.getSkinFile('eye.png')");
}
.extradata-list .organs-group .icon {
  background-image: url("$xwiki.getSkinFile('body-icon-left-s.png')");
  opacity: .4;
}
.extradata-list .left-side-group .icon {
  background-image: url("$xwiki.getSkinFile('body-icon-left-s.png')");
  opacity: .4;
}
.extradata-list .right-side-group .icon {
  background-image: url("$xwiki.getSkinFile('body-icon-right-s.png')");
  opacity: .4;
}

.extradata-list .file {
  width: 160px;
}
.extradata-list .file .attachment-list .attachment-item, .extradata-list .file .attachment-list .attachment-item input {
  display: none;
}
.extradata-list .file .attachment-list .attachment-item.selected {
  display: block;
  width: 100%;
}
.extradata-list .file .attachment-list .attachment-item.image {
  width: 150px !important;
}
.extradata-list .file .attachment-list .attachment-item.selected label {
  padding: 3px 0 3px 20px;
}
.extradata-list .file .attachment-list .attachment-item.image label {
  padding: 0 !important;
}

.extradata-list .file .attachment-list .attachment-item .attachment-preview {
    width: 140px;
}

.extradata-list .file p img {
  max-width: 480px !important;
  max-height: 480px !important;
}


.extradata-list .file .attachment-list .attachment-item .view {
  background-color: $theme.pageContentBackgroundColor;
  bottom: 0;
  padding: 5px;
}

.extradata-list .relative_type, .extradata-list .relative_of {
  width: 50%;
  text-align: left;
}
.extradata-list .relative_type label, .extradata-list .relative_of label {
  width: auto;
}
</code>
    </property>
    <property>
      <name>Extra data table ui</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>PhenoTips.PatientSheetCode</name>
    <number>2</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>a92ecd55-7896-45b8-878a-a7e2228a740d</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#template('colorThemeInit.vm')
/*--------------------------------------------------------------*/
/** Box style */
.ncbi-search-box {
  margin-top: 2em;
}
.ncbi-search-box h3 {
  ##padding: 0 20px 0 0;
  cursor: pointer;
}
.ncbi-search-box.collapsed h3 {
  color: $theme.linkColor;
}
.ncbi-search-box.collapsed .ncbi-search-box-content,
.ncbi-search-box.collapsed .expand-tools .hide,
.ncbi-search-box .expand-tools .show {
  display: none;
}
.ncbi-search-box.collapsed .expand-tools .show {
  display: inline;
}
/*--------------------------------------------------------------*/
/** Search terms from phenotypes */
.default-search-terms-container {
  margin: .5em 0;
  padding: .5em 1em;
  border: 1px dotted $theme.borderColor;
  background-color: $theme.highlightColor;
}
.search-term {
  margin: 0 1.5em 0 0;
  cursor: pointer;
}
.search-term:hover, .search-term.disabled:hover {
  opacity: .7;
}
.search-term.disabled {
  opacity: .5;
  text-decoration: line-through;
}
.search-term.not_symptom {
  color: #C00;
}
.search-term.not_symptom:before {
  content: "NO ";
}
/** ----------------------------------------------------------- */
/** PubMed &amp; OMIM suggestions */
.background-suggestions li {
  margin: .7em 0;
  font-size: .85em;
  line-height: 1.2em;
}
.background-suggestions .journal {
  font-style: italic;
}
.background-suggestions .locus {
  display: block;
}
.background-suggestions .title {
  font-size: 1.25em;
}
#pubmed-search-results ul li {
  background-image: url("$xwiki.getSkinFile('icons/silk/page.gif')");
  padding-left: 20px;
  background-position: left 2px;
  background-repeat: no-repeat;
}
#omim-search-results ul li label input {
  vertical-align: middle;
}
.background-search h4 {
  font-size: 1.2em;
  margin: 0;
  padding: 0 20px 0 0;
}
.background-search {
  margin-top: 1em;
  background: transparent none right top no-repeat;
}
.background-search.loading, .plainmessage.loading {
  background-image: url("$xwiki.getSkinFile('icons/xwiki/spinner.gif')");
}

.background-search h3 {
  font-weight: bold !important;
  margin-top: 0;
}
.diffDiagnosis-search {
  background-color: $theme.highlightColor;;
  border: 10px solid $theme.highlightColor;;
  border-radius: 4px 4px 4px 4px;
  margin-left: -10px;
  margin-right: -10px;
}
#diffDiagnosis-search-results ul li {
  margin: 0;
}
#diffDiagnosis-search-results ul .id {
  display: none;
}
.background-suggestions ul {
  list-style-type: none;
  margin: 0;
  padding-left: 0.8em;
  -moz-column-count: 2;
  -moz-column-gap: 1em;
  -webkit-column-count: 2;
  -webkit-column-gap: 1em;
  column-count: 2;
  column-gap: 1em;
}</code>
    </property>
    <property>
      <name>Instant search style</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>PhenoTips.PatientSheetCode</name>
    <number>3</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>6b031d72-7733-4ce5-905f-b999ec0c3165</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#template('colorThemeInit.vm')
.phenotype-details {
  background-color: #F9F9F9;
  background-position: left center;
  background-repeat: no-repeat;
  border-radius: 0 .5em .5em .5em;
  border: 1px solid #FFF;
  color: $theme.textSecondaryColor;
  font-size: 87.5%;
  margin-left: 20px;
  padding: .5em 20px;
  position: relative;
  width: 80%;
}
.phenotype-details.collapsed {
  background-position: 99% .25em;
  background-image: url("$xwiki.getSkinFile('edit-s-gray.png')");
  cursor: pointer;
  padding-left: 16px;
}
.phenotype-details .comments-preview {
  display: block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  max-height: 1.2em;
}

.phenotype-details input[type="text"] {
  padding: 0;
  width: 50%;
  color: $theme.textSecondaryColor;
  font-size: 87.5%;
  box-shadow: none !important;
  background: transparent !important;
  border-color: transparent !important;
}
.phenotype-details .action-done {
  cursor: pointer;
  font-size: 2em;
  position: absolute;
  right: 0.25em;
  top: 0;
}
.phenotype-details .action-done:hover {
  color: $theme.linkColor;
}
.phenotype-details.collapsed dt,
.phenotype-details.collapsed dd,
.phenotype-details.collapsed .action-done,
.phenotype-details.focused .preview {
  display: none;
}

.phenotype-details.collapsed .preview {
  display: block;
}

.phenotype-details.focused {
  background-image: none;
  box-shadow: 0 2px 5px #999;
}

.phenotype-details dt label {
  color: $theme.textColor;
}

.phenotype-details.focused input {
  color: $theme.textColor;
  box-shadow: 0 1px 2px #aaa inset !important;
  background: #FFF !important;
  border-color: #FFF !important;
}

.phenotype-details .attachment-list .attachment-item,
.phenotype-details .attachment-list .attachment-item input {
  display: none;
  margin: 0;
  padding: 0;
  box-shadow: none;
}
.phenotype-details .attachment-list .attachment-item.selected,
.phenotype-details .attachment-list .attachment-preview {
  display: block;
  width: 100%;
  max-height: inherit;
  height: auto;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}
.phenotype-details .attachment-list .attachment-item.image {
  max-width: 100%;
}
.phenotype-details .attachment-list .attachment-item.selected label {
  padding: 3px 0 3px 20px;
}
.phenotype-details .attachment-list .attachment-item.image label {
  padding: 0 !important;
}
.phenotype-details .attachment-item img {
  max-width: 100% !important;
  max-height: inherit !important;
}
.phenotype-details .attachment-list .attachment-item .view {
  background-color: $theme.pageContentBackgroundColor;
  bottom: 0;
  padding: 5px;
}
.phenotype-details .actions {
  float: right;
}</code>
    </property>
    <property>
      <name>Phenotype details</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>PhenoTips.PatientSheetCode</name>
    <number>4</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>7a348f6f-7b94-4630-b559-60c2fe83e6f8</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#template('colorThemeInit.vm')
.LV_validation_message {
  position: static !important;
}
.LV_valid {
  display: none;
}
input.LV_invalid_field {
  background-color: $theme.highlightColor;
  border: 1px solid $theme.notificationErrorColor;
  color: $theme.textColor !important;
}
</code>
    </property>
    <property>
      <name>Form Validation</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <content>{{include document="PhenoTips.ChartServiceMacros" /}}

{{velocity output=false}}
#macro (__label $propName $cssClass $text)
   #set($displayedText = "$!{text}")
   #if ($displayedText == '' &amp;&amp; "$!{propName}" != '')
     #set($displayedText = "$!{class.get($propName).prettyName}:")
   #end
   #if ($xcontext.action != 'edit')
     (% class="label $!{cssClass}" %)${displayedText}(%%)##
   #else
     #set($for = '')
     #if ("$!{propName}" != '')
       #set($for = "for='$!{class.name}_$!{obj.number}_$!{propName}'")
     #end
     {{html clean="false" wiki="false"}}&lt;label class="$!{cssClass}" $!{for}&gt;${displayedText}&lt;/label&gt;{{/html}}##
   #end
#end

#macro (__display $propName)
(% class="displayed-value"%)(((#if($xcontext.action == 'edit' || ($doc.display($propName) != ''))${doc.display($propName).replaceAll('^(\{\{html clean="false" wiki="false"}})?&lt;p&gt;|&lt;/p&gt;(\{\{/html}})?$', '$1$2')}#{else}-#{end})))##
#end

#macro (__displayIfNotEmpty $propName)
#if ($context.action == 'edit' || ($doc.display($propName) != ''))
#__label($propName '')
#__display($propName)
#end
#end

#macro (__hasDataToDisplay $propertyName $shouldDisplay)
  #if ($activeFields.contains($propertyName) &amp;&amp; ($xcontext.action == 'edit' || "$doc.display($propertyName)" != ''))
    #setVariable("$shouldDisplay", true)
  #end
#end

#macro (__hasBooleanDataToDisplay $propertyName $shouldDisplay)
  #if ($activeFields.contains($propertyName) &amp;&amp; ($xcontext.action == 'edit' || $obj.getProperty($propertyName).value == 1))
    #setVariable("$shouldDisplay", true)
  #end
#end

#macro (__display2Col $propName $label $groupCssClass $labelCssClass)
  (% class="fieldset ${propName} $!{groupCssClass}" %)(((
  (% class="half-width ${propName}" %)(((
    #__label(${propName} "section $!{labelCssClass}" "$!{label}")
  )))
  (% class="half-width ${propName}" %)(((
    #__display(${propName})
  )))
  )))##fieldset
#end

#macro (__displayIfNotEmpty2Col $propName $label $groupCssClass $labelCssClass)
#if ($context.action == 'edit' || $doc.display(${propName}) != '')
#__display2Col($propName $label "$!{groupCssClass}" "$!{labelCssClass}")
#end
#end

#macro(__markIfMandatory $propName)#if ("$!mandatoryFields.contains($propName)" != 'false')mandatory#{end}#end

#macro (__displayHalfWidth $propName $label $groupCssClass $labelCssClass)
  (% class="half-width $groupCssClass ${propName}" %)(((
    #__label(${propName} "hint $!{labelCssClass}" $label)
    #__display(${propName}, $obj)
  )))
#end

#macro (__displayFormatted $mode $propName $label $groupCssClass $labelCssClass)
#if ("$!activeFields.contains($propName)" != 'false' &amp;&amp; ($xcontext.action == 'edit' || $doc.display(${propName}) != ''))
  #set($_groupCssClass = "$!{groupCssClass} #__markIfMandatory($propName)")
  #if ($xcontext.action != 'edit')
    #if ($mode == 'half-width')
      #__displayHalfWidth($propName $label $_groupCssClass $labelCssClass)
    #else
      #__label($propName $labelCssClass $label) (% class="displayed-value"%)#if ("$!{doc.display($propName)}" == '')-#else${doc.display($propName).replaceAll('^(\{\{html clean="false" wiki="false"}})?&lt;p&gt;|&lt;/p&gt;(\{\{/html}})?$', '$1$2')}#end(%%)
    #end
  #else
    #if ($mode == 'half-width')
      #__displayHalfWidth($propName $label $_groupCssClass $labelCssClass)
    #elseif ($mode == '2-col')
      #__display2Col($propName $label $_groupCssClass $labelCssClass)
    #else
    (% class="$groupCssClass ${propName}" %)(((
      #__label($propName $labelCssClass $label)
      #__display($propName)
    )))
    #end
  #end## export
#end## field not configured as inactive, field not empty in view mode
#end

#macro (__qsBox $fieldName $cssClass)
#if ($context.action == 'edit')
(% id="quick-search-box"  class="group-other quick-search-box emphasized-box $!{cssClass}" %)(((
  {{html clean="false" wiki="false"}}
  &lt;fieldset&gt;
    ##&lt;h3 class="section"&gt;Quick phenotype search&lt;/h3&gt;
    &lt;table&gt;&lt;tbody&gt;&lt;tr&gt;
    &lt;td&gt;&lt;label for="quick-phenotype-search"&gt;Quick phenotype search:&lt;/label&gt;&lt;/td&gt;&lt;td class="input"&gt;
    &lt;input type='text' name='$!{fieldName}' class='suggested multi suggest-hpo quickSearch withTip generateYesNo' placeholder='Enter keywords and choose among suggested ontology terms' size='16' id='quick-phenotype-search'/&gt;&lt;/td&gt;
    &lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
  &lt;/fieldset&gt;
  {{/html}}
)))
#end
#end

#macro(__ncbiSBox $fieldName $cssClass)
#if ($xcontext.action == 'edit')
(% class="ncbi-search-box $!{cssClass}" %)(((
=== Instant OMIM search ===
(% class="expand-tools" %)(((
(% class="tool show" %)Show(%%) (% class="tool hide" %)Hide(%%)
)))
(% class="ncbi-search-box-content"%)(((
(% class="hint"%)The following terms are extracted from the phenotypic description and used automatically in searches. You can disable or re-enable their contribution in OMIM and PubMed search results by clicking on them.(%%)
{{html wiki=false clean=false}}&lt;input type="hidden" id="defaultSearchTermsInput" value="" /&gt;&lt;input type="hidden" id="defaultSearchTermIDsInput" value="" /&gt;{{/html}}
(% id="defaultSearchTerms" %)(((
)))
##(% class="hint"%)Include the following custom terms in your search:(%%)
## {{html wiki=false clean=false}}&lt;input type="text" id="customSearchTermsInput" value="" /&gt;{{/html}}
(% class="background-search omim-search hidden" %)(((
==== Matching disorders in OMIM ====
(% id="omim-search-results" class="background-suggestions" %)((()))
)))
##(% class="half-width background-search pubmed-search" %)(((
##==== Suggested reading on PubMed ====
##(% id="pubmed-search-results" class="background-suggestions" %)((()))
##)))
)))
)))
#end
#end

## =====================================================================
##
## "Tabelar" data associated with the patient report
##
##
#macro (__extradata_deleteTool $object $anchor)
  {{html clean="false"}}&lt;a class="action delete" href="$doc.getURL('objectremove', "classname=${object.xWikiClass.name}&amp;amp;classid=${object.number}&amp;amp;xredirect=$escapetool.url($doc.getURL('edit'))&amp;amp;form_token=$!{services.csrf.getToken()}#$!{anchor}")" title="Delete"&gt;âœ–&lt;/a&gt;{{/html}}##
#end

#macro (__extradata_addTool $classname $anchor $options)
  {{html clean="false"}}&lt;span class="buttonwrapper"&gt;&lt;label class="create-button-label"&gt;+&lt;/label&gt;&lt;a class="add button add-data-button" href="$doc.getURL('objectadd', "classname=${classname}&amp;amp;${classname}_$!{options.propertyName}=$!escapetool.url($!{options.propertyValue})&amp;amp;xredirect=$escapetool.url($doc.getURL('edit'))&amp;amp;propertyName=$!{options.propertyName}&amp;amp;propertyValue=$!escapetool.url($!{options.propertyValue})&amp;amp;form_token=$!{services.csrf.getToken()}#$!{anchor}")" title='New entry'&gt;New entry&lt;/a&gt;&lt;/span&gt;{{/html}}#end

#macro (__extradata_displayTable $dataClassName $options)
  #set($dataClass = $xwiki.getDocument($dataClassName).xWikiClass)
  #if ($dataClass)
    #set($dataObjects = $doc.getObjects($dataClassName, "$!{options.propertyName}", "$!{options.propertyValue}"))
    #if ($xcontext.action != 'edit' &amp;&amp; $dataObjects.size() == 0)
      (% class="hint" %)None specified
    #elseif ($xcontext.action == 'export')
      (% class="extradata-list#if ("$!{options.labels}" == 'true') withLabel#end#if ("$!{options.counter}" == 'true') withCounter#end" id="extradata-list-${dataClassName}#if("$!{options.propertyName}" != '')-$!{options.propertyValue}#end" %)
      #set ($disableLabels = true)
      #foreach ($o in $dataObjects)
        #foreach($prop in $dataClass.properties)#if ($prop.name != $options.propertyName)|= ${prop.prettyName}: |#if ($velocityCount &lt;= 2)=#end $doc.display($prop.getName(), $o)#if ($velocityCount %2 == 0)

        #end#end#end## foreach object

      #end## foreach object
    #else
      (% class="extradata-list#if ("$!{options.labels}" == 'true') withLabel#end#if ("$!{options.counter}" == 'true') withCounter#end" id="extradata-list-${dataClassName}#if("$!{options.propertyName}" != '')-$!{options.propertyValue}#end" %)
      #if ("$!{options.counter}" == 'true')|=(% class="col-label" %)# #end#foreach($prop in $dataClass.properties)|=(% class="col-label $prop.name#if ($prop.name == $options.propertyName) hidden#end" %)$prop.prettyName#end#if ($xcontext.action == 'edit')|=(% class="actions" %)
      #else

      #end
      #if ($xcontext.action == 'export')#set ($disableLabels = true)#end
      #foreach ($o in $dataObjects)
        #if ("$!{options.counter}" == 'true')|=(% class="row-count" %)${velocityCount}#end#foreach($prop in $dataClass.properties)|(% class="$prop.name#if ($prop.name == $options.propertyName) hidden#end" %)#if ("$!{options.labels}$!{disableLabels}" == 'true'){{html clean="false" wiki="false"}}&lt;label class="" &gt;${prop.prettyName}&lt;/label&gt;{{/html}}#end $doc.display($prop.getName(), $o).replaceAll('^(\{\{html clean="false" wiki="false"}})?&lt;p&gt;|&lt;/p&gt;(\{\{/html}})?$', '$1$2')#end#if ($xcontext.action == 'edit')|(% class="actions" %)#__extradata_deleteTool($o "extradata-${dataClassName}")#end

      #end## foreach object

      #if ($xcontext.action == 'edit')(% class="list-actions" %)(((#__extradata_addTool($dataClassName "extradata-${dataClassName}" $options))))
      #end
    #end## if xcontext.action
  #end## if dataclass
#end

#macro (__extradata_displayLastEntry $dataClassName $options)
  #set ($objects = $doc.getObjects($dataClassName))
  #if ($objects.size() &gt; 0)
    #set ($targetObj = $objects.get($mathtool.sub($objects.size(), 1)))
    #set($dataClass = $targetObj.xWikiClass)
    {{html wiki="true" clean="false"}}#foreach($prop in $dataClass.properties)&lt;td class="${prop.name}#if ($prop.name == $options.propertyName) hidden#end"&gt;#if ("$!{options.labels}" == 'true'){{html clean="false" wiki="false"}}&lt;label &gt;${prop.prettyName}:&lt;/label&gt;{{/html}}#end$doc.display($prop.getName(), $targetObj)&lt;/td&gt;#end#if ($context.action == 'edit')&lt;td class="actions"&gt;#__extradata_deleteTool($targetObj '')&lt;/td&gt;#end{{/html}}
  #end
#end

#macro (__measurements_displayCompact)
  #set($dataClass = $xwiki.getDocument('PhenoTips.MeasurementsClass').xWikiClass)
  #if ($dataClass)
    #set($dataObjects = $doc.getObjects('PhenoTips.MeasurementsClass'))
    #if ($dataObjects.size() == 0)
      (% class="hint" %)None specified
    #else
      (% class="extradata-list" %)
      #foreach ($o in $dataObjects)
        #foreach($prop in $dataClass.properties)
           #if (!$prop.name.endsWith('_evaluation') &amp;&amp; "$!o.getProperty($prop.getName()).value" != '')
             |= ${prop.prettyName}: | $doc.display($prop.getName(), $o) | $!doc.display("${prop.getName()}_evaluation", $o)
          #end
        #end
      #end## foreach object
    #end## if $dataObjects.size()
  #end## if dataclass
#end

## =====================================================================
##
## PHENOTYPE METADATA
##
##
#macro (__phenotypeMeta_displayEntry $targetObj)
    #set($dataClass = $targetObj.xWikiClass)
    #set($enabledProperties = ['age_of_onset', 'pace_of_progression', 'comments', 'supporting_images', 'supporting_documents'])
    #set($targetId = "phenotypeMeta__$!{class.name}_$!{obj.number}_$!{targetObj.getProperty('target_property_name').value}__$!{targetObj.getProperty('target_property_value').value}")
    {{html wiki="true" clean="false"}}##
    {{html wiki="false" clean="false"}}&lt;dl id="$targetId"&gt;{{/html}}##
      #foreach($prop in $dataClass.properties)##
        #if ($enabledProperties.contains($prop.name))#set($displayMode='')#else#set($displayMode=' hidden')#end##
        &lt;dt class="${prop.name}${displayMode}"&gt;&lt;label for=""&gt;${prop.prettyName}:&lt;/label&gt;&lt;/dt&gt;##
        &lt;dd class="${prop.name}${displayMode}"&gt;$doc.display($prop.getName(), $targetObj)&lt;/dd&gt;##
      #end##
    &lt;/dl&gt;##
    &lt;input type="hidden" name="delete-action" value="$doc.getURL('objectremove', "classname=${targetObj.xWikiClass.name}&amp;amp;classid=${targetObj.number}&amp;amp;form_token=$!{services.csrf.getToken()}")"/&gt;##
    {{/html}}
#end

#macro (__phenotypeMeta_displayLastEntry)
  #set($dataClassName = 'PhenoTips.PhenotypeMetaClass')
  #set ($objects = $doc.getObjects($dataClassName))
  #if ($objects.size() &gt; 0)
    #set ($targetObj = $objects.get($mathtool.sub($objects.size(), 1)))
    #__phenotypeMeta_displayEntry($targetObj $mode)
  #end
#end

#macro (__phenotypeMeta_displayAll)
  #set($dataClassName = 'PhenoTips.PhenotypeMetaClass')
  #set ($objects = $doc.getObjects($dataClassName))
  #if ($objects.size() &gt; 0)
    (% class="hidden" %)(((
    #foreach ($pmObj in $objects)
      #__phenotypeMeta_displayEntry($pmObj)
    #end
    )))
  #end
#end

## =====================================================================
##
## SECTIONS DISPLAY
##
##
#macro(__reportSection_display $sectionName)
  #set($cleanSectionName = $sectionName)
  #set($cleanSectionName = $cleanSectionName.replace('-', '_'))
  #evaluate("#__reportSection__${cleanSectionName}()")
#end

## =================================================================
## Patient information
##
#macro(__reportSection__patient_info)
(% class="clear patient-info chapter" %)(((
== Patient Information ==
  #if ("$!activeFields.contains('external_id')" != false &amp;&amp; "$!activeFields.contains('exam_date')" != false)
  (% class="fieldset" %)(((
    #__displayFormatted('half-width' 'external_id')
    #__displayFormatted('half-width' 'exam_date')
  )))##fieldset
  (% class="clear" %)((()))
  #else
  #__displayFormatted('2-col' 'external_id' '' '' '')
  #__displayFormatted('2-col' 'exam_date' '' '' '')
  #end## display exam id / date
  #if ("$!activeFields.contains('last_name')" != false &amp;&amp; "$!activeFields.contains('first_name')" != false &amp;&amp; ($xcontext.action == 'edit' || "$!{doc.display('last_name')}$!{doc.display('first_name')}" != ''))
  (% class="fieldset" %)(((
    #__label('last_name' 'section clear' 'Patient name:')
    #if ($xcontext.action == 'edit')
      #__displayFormatted('half-width' 'last_name')
      #__displayFormatted('half-width' 'first_name')
    #else
      (% class="displayed-value"%)${doc.display('last_name')}, ${doc.display('first_name')}(%%)##
    #end
  )))##fieldset
  #end## display first name / last name
  #__displayFormatted('2-col' 'date_of_birth' '' 'date' '')
  #__displayFormatted('2-col' 'gender' 'Sex:' 'gender' 'group-title')
  #__displayFormatted('2-col' 'health_card' '' '' '')
  #set ($targetClassName = 'PhenoTips.RelativeClass')
  #if ($config &amp;&amp; $config.getProperty('section__patient-info').value.contains($targetClassName) &amp;&amp; ($xcontext.action == 'edit' || $doc.getObject($targetClassName)))

    ----
    (% class="clear relatives-info" %)(((
    === Family study ===
    #__extradata_displayTable($targetClassName, {'counter' : false, 'labels' : true})
    )))
  #end
#if ("$!activeFields.contains('age_of_onset')" != 'false')
  #if($doc.display('age_of_onset') != '')

    ----
  #end
  #__displayIfNotEmpty('age_of_onset')
  (% class="clear" %)((()))
#end
#if ("$!activeFields.contains('indication_for_referral')" != 'false')
  #if($xcontext.action == 'edit' || ($doc.display('indication_for_referral') != ''))

    ----
  #end
  #__displayIfNotEmpty('indication_for_referral')
#end
)))##chapter
#end
##
## =================================================================
## Measurements
##
#macro(__reportSection__measurements)
#set ($targetClassName = 'PhenoTips.MeasurementsClass')
#if ($config &amp;&amp; $config.getProperty('section__measurements').value.contains($targetClassName) &amp;&amp; ($xcontext.action == 'edit' || $doc.getObject($targetClassName)))
(% class="clear measurement-info chapter" %)(((
== Measurements ==
#if ($xcontext.action != 'export')
#if ($xcontext.action == 'edit')
{{warning}}It is recommended to record **weight**, **height** and **head circumference** for all patients.{{/warning}}

#end
#__extradata_displayTable($targetClassName, {'counter' : false, 'labels' : true})
#if ($config.getProperty('section__measurements').value.contains('growth-charts'))
(% class="growth-charts-section" %)(((
=== Growth charts ===
(% class="expand-tools" %)(((
(% class="tool show" %)Show(%%) (% class="tool hide" %)Hide(%%)
)))
(% id="charts"%)(((
#set($chartOptions = {'targetClassName' : $targetClassName, 'obj': $obj, 'link': true})
#_measurementCharts($chartOptions)
)))##charts
)))
(% class="clear"%)((()))
#end
#else
#__measurements_displayCompact()
#end
)))##chapter
#end
#end
##
## =================================================================
## Phenotype information
##
#macro(__reportSection__phenotype_info)
  #__hasBooleanDataToDisplay('unaffected', $showUnaffected)
  #__hasDataToDisplay('phenotype' $showPhenotype)
  #__hasDataToDisplay('negative_phenotype' $showNegativePhenotype)
#if ($showUnaffected || $showPhenotype || $showNegativePhenotype)
#if ($showUnaffected)
  (% class="controlled-group complete-hide" %)(((
#end
#if ("$!activeFields.contains('phenotype')" != 'false')
  (% class="clear clinical-info phenotype-info chapter" %)(((
  #if ("$!activeFields.contains('unaffected')" != 'false')#set ($__qsBoxCssClass = 'controlled')#end
    (% class="group-title" %)
    == $!{class.get('phenotype').prettyName} ==
      #if ("$!activeFields.contains('unaffected')" != 'false')
        (% class="fieldset unaffected controller exclude" %)(((
        #if ($xcontext.action == 'edit')
          $doc.display('unaffected') #__label('unaffected' '' "$class.get('unaffected').prettyName")

          (% class="hint controlled" %)Or select observed phenotypes:(%%)
        #else
          #if ($doc.display('unaffected') == 'Yes')$class.get('unaffected').prettyName#end
        #end
        )))
        (% class="controlled" %) (((
      #end
      #__qsBox("$!{class.name}_$!{obj.number}_phenotype" "$!{__qsBoxCssClass}")
        #if ($context.action == 'edit')
          (% class="selector-panels"%)(((
          (% class="half-width selector-panel browser browse-phenotype-categories force-collapse"%)(((

          (% class="textual-area" %)(((
            (% class="textual-title"%)
              === **Textual Form** ===
              (% class="textual-box" %)(((
                {{html}}
                  &lt;textarea name="freetext-symptoms" id="textarea-ctakes"&gt;&lt;/textarea&gt;
                  &lt;span class="buttonctakes"&gt;&lt;input id="ctakes-input-button" type="button" value="Submit"/&gt;&lt;/span&gt;      
                {{/html}}
              )))
          )))
          (% class="browser-title"%)
          === **Browse categories** ===
(% class="background-search diffDiagnosis-search phenotype-group collapsible-group hidden" title="Phenotypes that are likely to help improve differential diagnosis"%)(((
=== You might want to check for... ===
(% class="hint" %)Phenotypes that are likely to help improve differential diagnosis
(% id="diffDiagnosis-search-results" class="background-suggestions" %)((()))
)))
        #end
          (% class="phenotype  #__markIfMandatory('phenotype')" %)(((
            $doc.display('phenotype')##
          )))
        #if ($xcontext.action == 'edit')
          #__phenotypeMeta_displayAll('edit')##
          )))## browse-phenotype-categories
          (% class="half-width selector-panel current-phenotype-selection"%)(((
          === **Current selection** ===
             (% id="current-phenotype-selection"%)(((
              {{html clean="false"}}&lt;input type="hidden" id="phenotype-meta-add-action" value="$doc.getURL('objectadd', "classname=PhenoTips.PhenotypeMetaClass&amp;amp;xredirect=$escapetool.url($doc.getURL('edit', 'xaction=lastmeta&amp;xpage=plain'))&amp;amp;form_token=$!{services.csrf.getToken()}")"/&gt;{{/html}}
             )))
          )))
          (% class="clear"%)((()))
          )))## selector-panels
        #end
      #if ("$!activeFields.contains('unaffected')" != 'false')
        )))## controlled (phenotype)
      #end
  )))## chapter
#end
#if ($showUnaffected)
  )))## controlled-group
#end
#end## section has content
#end
##
## =================================================================
## Prenatal information
##
#macro(__reportSection__prenatal_phenotype_info)
  #__hasDataToDisplay('prenatal_phenotype' $showPrenatalPhenotype)
  #__hasDataToDisplay('gestation' $showGestation)
  #__hasDataToDisplay('prenatal_comments' $showPrenatalComments)
#if ($showPrenatalPhenotype || $showGestation || $showPrenatalComments)
(% class="clear clinical-info prenatal_phenotype-info chapter #__markIfMandatory('prenatal_phenotype')" %)(((
== $!{class.get('prenatal_phenotype').prettyName} ==
#if ($showGestation)
  #__displayFormatted('2-col' 'gestation' '' '' '')
  (% class="clear" %)((()))
#end
#if ($showPrenatalPhenotype)
  #if ($showGestation)----
  #end
  $doc.display('prenatal_phenotype')
  (% class="clear" %)((()))
#end
#if ($showPrenatalComments)
  #if ($showGestation || $showPrenatalPhenotype)----
  #end
  (((#__displayIfNotEmpty('prenatal_comments'))))
#end
)))
##chapter
#end
#end
##
## =================================================================
## Family history
##
#macro(__reportSection__family_history)
  #__hasDataToDisplay('consanguinity' $showConsanguinity)
  #__hasDataToDisplay('miscarriages' $showMiscarriages)
  #__hasDataToDisplay('mode_of_inheritance' $showModeOfInheritance)
  #__hasDataToDisplay('pedigree' $showPedigree)
  #__hasBooleanDataToDisplay('proband', $showProband)
  #__hasDataToDisplay('family_of' $showFamilyOf)
  #__hasDataToDisplay('maternal_ethnicity' $showMaternalEthnicity)
  #__hasDataToDisplay('paternal_ethnicity' $showPaternalEthnicity)
  #__hasBooleanDataToDisplay('in_vitro', $showInVitro)
  #__hasDataToDisplay('family_comments' $showFamilyComments)
#if ($showConsanguinity || $showMiscarriages || $showModeOfInheritance || $showPedigree || $showProband || $showFamilyOf || $showMaternalEthnicity || $showPaternalEthnicity || $showInVitro || $showFamilyComments)
(% class="clear clinical-info family_history-info chapter #__markIfMandatory('family_history')" %)(((
== $!{class.get('family_history').prettyName} ==

(((
#if ($showProband || $showFamilyOf)
  #if ($xcontext.action == 'edit')
    (% class="controlled-group complete-hide" %)(((
      (% class="controller" %)(((
        $doc.display('proband') #__label('proband' 'section' "$class.get('proband').prettyName")
      )))
      (% class="controlled" %)(((
        #__displayFormatted('2-col' 'family_of' '' '' '')
      )))
    )))
  #else
    #if ($showProband)
      $class.get('proband').prettyName
    #else
      #__displayFormatted('2-col' 'family_of' '' '' '')
    #end
  #end
#end
#if ($showMaternalEthnicity || $showPaternalEthnicity)
  (% class="fieldset ethnicity" %)(((
    #__displayFormatted('half-width' 'maternal_ethnicity')
    #__displayFormatted('half-width' 'paternal_ethnicity')
  )))##fieldset
  (% class="clearfloats" %)((()))
#end
#if ($showInVitro)
  #if ($xcontext.action == 'edit')

    ----
    $doc.display('in_vitro') #__label('in_vitro' 'section' "$class.get('in_vitro').prettyName")
  #else

    ----
    $class.get('in_vitro').prettyName
  #end
#end
#if ($showConsanguinity || $showMiscarriages)

  ----
  #if ($showConsanguinity)
    ((($doc.display('consanguinity'))))
  #end
  #if ($showMiscarriages)
    ((($doc.display('miscarriages'))))
  #end
#end
#if ($showModeOfInheritance)

  #__displayIfNotEmpty('mode_of_inheritance')
#end
#if ($showFamilyComments)

  #__displayIfNotEmpty('family_comments')
#end
#*
#set ($pedigreeObj = $doc.getObject('PhenoTips.PedigreeClass'))
#if ($pedigreeObj)
  #set ($data = $!pedigreeObj.getProperty('data').value)
  #set ($image = $pedigreeObj.getProperty('image').value)
#end## pedigree obj exists
#if ($xcontext.action == 'edit' || "$!{doc.display('pedigree')}" != '' || "$!data" != '')

  === Pedigree ===

  #if ($xcontext.action == 'edit')
    #if ("$!data" != '')
      #set ($pAction = 'Edit pedigree')
    #else
      #set ($pAction = 'Draw pedigree')
    #end## pedigree data exists
    (% class="buttonwrapper" %)[[$!{pAction}&gt;&gt;||queryString="sheet=PhenoTips.PedigreeEditor" rel="__blank" class="button" id="pedigree-trigger"]]
  #end## action == edit
  #if ("$!image" != '')
    {{html clean="false"}}
      $!image
    {{/html}}
  #end
#end## action == edit || data
*#
)))
)))##chapter
#end## if &lt;should show this section&gt;
#end
##
## =================================================================
## Medical history
##
#macro(__reportSection__medical_history)
#if ("$!activeFields.contains('medical_developmental_history')" != 'false' &amp;&amp; ($xcontext.action == 'edit' || "$doc.display('medical_developmental_history')$doc.display('reports_history')" != ''))
(% class="clear clinical-info medical_history-info chapter #__markIfMandatory('medical_history')" %)(((
== $!{class.get('medical_developmental_history').prettyName} ==
(((
#__displayIfNotEmpty('medical_developmental_history')
#if ($xcontext.action != 'export' &amp;&amp; "$doc.display('reports_history')" != '')

=== Previous medical reports ===
$doc.display('reports_history')
#end
)))
)))##chapter
#end
#end
##
## =================================================================
## Diagnosis information
##
#macro(__reportSection__diagnosis_info)
#if ("$!activeFields.contains('omim_id')" != 'false' &amp;&amp; ($xcontext.action == 'edit' || "$doc.display('omim_id')$!doc.display('comments')" != ''))
(% class="clear chapter" %)(((
##(% class="diagnosis-info"%)(((
== Diagnosis ==
#__displayIfNotEmpty2Col('omim_id' '' '' '')
(% class="clear" %)(((#__displayIfNotEmpty('comments'))))
##)))
#__ncbiSBox("$!{class.name}_$!{obj.number}_phenotype" '')
(% class="clear" %)((()))
)))##chapter
#end
#end
##
## =================================================================
## Variants information
##
#macro(__reportSection__variant_info)
#set ($targetClassName = 'PhenoTips.VariantClass')
#if ($config &amp;&amp; $config.getProperty('section__variant-info').value.contains($targetClassName) &amp;&amp; ($xcontext.action == 'edit' || $doc.getObject($targetClassName)))
(% class="clear variant-info chapter" %)(((
== Variants ==
#__extradata_displayTable($targetClassName, {'counter' : true, 'labels' : false})
)))##chapter
#end
#set ($targetClassName = 'PhenoTips.InvestigationClass')
#if ($config &amp;&amp; $config.getProperty('section__variant-info').value.contains($targetClassName) &amp;&amp; ($xcontext.action == 'edit' || $doc.getObject($targetClassName)))
(% class="clear variant-info chapter" %)(((
== Investigations ==
(((
=== Genetic investigation ===
#__extradata_displayTable($targetClassName, {'counter' : true, 'labels' : false, 'propertyName' : 'type', 'propertyValue' : 'genetic'})
=== Molecular genetics ===
#__extradata_displayTable($targetClassName, {'counter' : true, 'labels' : false, 'propertyName' : 'type', 'propertyValue' : 'molecular'})
)))
)))##chapter
#end
#end
##
## =================================================================
## More information
#macro(__reportSection__other)
#if ($xcontext.action == 'edit' || ($xcontext.action != 'export' &amp;&amp; (!$doc.getObjects('PhenoTips.ExternalFileClass').isEmpty() || !$doc.getObjects('PhenoTips.ExternalImageClass').isEmpty())))
(% class="clear clinical-info other-info chapter" %)(((
== Additional files ==
(((
#set ($targetClassName = 'PhenoTips.ExternalFileClass')
#if (($xcontext.action == 'edit' || $doc.getObject($targetClassName)))
=== Documents ===
#__extradata_displayTable($targetClassName, {'counter' : true, 'labels' : false})
#end
#set ($targetClassName = 'PhenoTips.ExternalImageClass')
#if (($xcontext.action == 'edit' || $doc.getObject($targetClassName)))
=== Imaging ===
#__extradata_displayTable($targetClassName, {'counter' : true, 'labels' : false})
#end
)))
)))##chapter
#end## if action != export
#end
##
##
## =====================================================================
{{/velocity}}

{{velocity}}
#if ("$!{request.xaction}" == 'lastentry')  #set ($entryClassName = $request.dataClassName)
  #set ($options = {})
  #set ($discard = $options.put('propertyName', "$!{request.propertyName}"))
  #set ($discard = $options.put('propertyValue', "$!{request.propertyValue}"))
  #set ($discard = $options.put('labels', "$!{request.withLabel}"))
  #__extradata_displayLastEntry($request.dataClassName $options)
#elseif ("$!{request.xaction}" == 'lastmeta')
  #__phenotypeMeta_displayLastEntry()
#else
#if ($xcontext.action != 'export')
(% id="table-of-contents" %)(((
{{toc /}}

(% class="hide-toc" id="hide-toc" %)((([[Ã—&gt;&gt;#tmToC||title="Hide table of contents"]])))

(% class="hide-toc hide-toc-ghost" %)((([[Hide table of contents&gt;&gt;#tmToC||id="tmHideToC" class="document-action" title="Hide table of contents"]])))
)))
#end
##
$xwiki.jsx.use('PhenoTips.TouchscreenEvents', {'minify' : false})##
$xwiki.ssx.use('PhenoTips.YesNoNAPicker', {'colorTheme' : "$xwiki.getSpacePreference('colorTheme')"})##
$xwiki.jsx.use('PhenoTips.YesNoNAPicker', {'minify' : false})##
$xwiki.ssx.use('XWiki.DateTimePicker', {'colorTheme' : "$xwiki.getSpacePreference('colorTheme')"})##
$xwiki.jsx.use('XWiki.DateTimePicker')##
$xwiki.ssx.use('PhenoTips.Skin', {'colorTheme' : "$xwiki.getSpacePreference('colorTheme')"})##
$xwiki.ssx.use('PhenoTips.Widgets', {'colorTheme' : "$xwiki.getSpacePreference('colorTheme')"})##
$xwiki.jsx.use('PhenoTips.Widgets', {'minify' : false})##
$xwiki.ssx.use('PhenoTips.PatientSheetCode', {'colorTheme' : "$xwiki.getSpacePreference('colorTheme')"})##
$xwiki.jsx.use('PhenoTips.PatientSheetCode', {'minify' : false})##
$xwiki.jsfx.use('js/xwiki/actionbuttons/actionButtons.js', true)##
$xwiki.jsfx.use('js/xwiki/editors/autosave.js')##
$xwiki.ssfx.use('uicomponents/widgets/validation/livevalidation.css', true)##
$xwiki.jsfx.use('uicomponents/widgets/validation/livevalidation_prototype.js')##
##
##
#set($config = $xwiki.getDocument("${doc.space}.WebHome").getObject('PhenoTips.DBConfigurationClass'))
#if ($config)
#set($obj = $doc.getObject("$!{config.getProperty('patientClass').value}"))
#set($class = $obj.xWikiClass)
#set($discard = $doc.use($obj))
#set($activeFields = $!{config.getProperty('activeFields').value})
#set($mandatoryFields = $!{config.getProperty('mandatoryFields').value})
{{include document="PhenoTips.PatientSheetMenu" /}}

#if ($context.action == 'edit')
#set($previewenabled = false)
{{html clean="false" wiki="false"}}&lt;input type='hidden' id='prefix' value='$!{class.name}_$!{obj.number}_'/&gt;{{/html}}##

#end
#else

{{warning}}**Configuration missing**{{/warning}}
#end
#end
{{/velocity}}</content>
</xwikidoc>
