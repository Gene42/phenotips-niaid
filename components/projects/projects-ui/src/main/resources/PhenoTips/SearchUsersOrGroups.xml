<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/
-->

<xwikidoc version="1.1">
  <web>PhenoTips</web>
  <name>SearchUsersOrGroups</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1444515717000</creationDate>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1444667143000</date>
  <contentUpdateDate>1444667143000</contentUpdateDate>
  <version>1.1</version>
  <title>SearchUsersOrGroups</title>
  <parent>PhenoTips.WebHome</parent>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>{{velocity filter="indent"}}
$response.setContentType('application/json')
##
#macro (displayResult $result $addComma $type)
  #set ($reference = $services.model.resolveDocument($result, $wikiReference))
  ## Make sure we use relative references as much as possible. See XWIKI-10046.
  #set ($stringReference = $services.model.serialize($reference, 'compactwiki'))
{"value":"$escapetool.xml($reference.name)", "id":"$escapetool.xml($stringReference);$type"}##
  #if ($addComma)
  ,##
  #end
#end
##
#set ($results = [])
#if ($request.wiki == 'global')
  #set ($wikiReference = $services.model.createWikiReference($xcontext.mainWikiName))
#else
  #set ($wikiReference = $doc.documentReference.wikiReference)
#end
#set ($input = "$!request.input.toLowerCase()")
#if ($input.length() &gt; 0)
  ## Resolve the input as a user/group reference and use only the document name for matching.
  #set ($input = $services.model.resolveDocument($input).name)
#end
#set ($statement = "from doc.object(XWiki.XWikiUsers) as user where lower(doc.name) like :input or concat(concat(lower(user.first_name), ' '), lower(user.last_name)) like :input order by user.first_name, user.last_name")
#set ($query = $services.query.xwql($statement).setWiki($wikiReference.name).addFilter('unique'))
#set ($discard = $query.setOffset(0).setLimit(10).bindValue('input', "%$input%"))
#foreach ($result in $query.execute())
  #set ($discard = $results.add($result))
#end
#set ($usersRange = $results.size())
##
#set ($statement = 'from doc.object(XWiki.XWikiGroups) as groups where lower(doc.name) like :input and doc.fullName &lt;&gt; ''XWiki.XWikiGroupTemplate'' order by doc.name')
#set ($query = $services.query.xwql($statement).setWiki($wikiReference.name).addFilter('unique'))
#set ($discard = $query.setOffset(0).setLimit(10).bindValue('input', "%$input%"))
#set ($groups = [])
#foreach ($result in $query.execute())
  #set ($discard = $results.add($result))
#end
#set ($commaRange = $results.size() - 1)
##
{"matched":[##
#foreach ($result in $results)
  #if ($foreach.index &lt; $commaRange)
    #set ($addComma = true)
  #else
    #set ($addComma = false)
  #end
  #if ($foreach.index &lt; $usersRange)
    #set ($type = 'user')
  #else
    #set ($type = 'group')
  #end
  #displayResult($result, $addComma, $type)
#end
]}
{{/velocity}}
</content>
</xwikidoc>
