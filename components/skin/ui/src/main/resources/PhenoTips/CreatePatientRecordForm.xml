<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/
-->

<xwikidoc version="1.1">
  <web>PhenoTips</web>
  <name>CreatePatientRecordForm</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1401822210000</creationDate>
  <parent>PhenoTips.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1448474235000</date>
  <contentUpdateDate>1448318337000</contentUpdateDate>
  <version>1.1</version>
  <title>Form for creating new patient records</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity}}{{html clean=false}}
$xwiki.ssx.use('PhenoTips.Widgets')##
$xwiki.jsx.use('PhenoTips.Widgets')##
$xwiki.ssx.use('PhenoTips.CreatePatientRecordForm')##
$xwiki.jsx.use('PhenoTips.CreatePatientRecordForm')##
#if($hasCreatePage)
   &lt;form id="patient-creation-form" class="patient-creation-form" action="$xwiki.getURL('PhenoTips.CreateAndUpdatePatientRecord')" method="post"&gt;&lt;div&gt;
      &lt;input type="hidden" name="form_token" value="$!{services.csrf.getToken()}" /&gt;
      &lt;input type="hidden" name="doCreate" value="1" /&gt;
      ##
      $xwiki.ssx.use('PhenoTips.ProjectBindingClass')##
      $xwiki.jsx.use('PhenoTips.ProjectBindingClass')##
      &lt;input type="hidden" id="numberOfProjects" value="$services.projects.getProjectsCurrentUserCanContributeTo().size()" /&gt;
      ##
      #if ($xwiki.exists('PhenoTips.StudyBindingClass'))
         $xwiki.jsx.use('PhenoTips.StudyBindingClass')##
         $xwiki.ssx.use('PhenoTips.StudyBindingClass')##
         &lt;input type="hidden" id="numberOfTemplates" value="$services.templates.getAllTemplates().size()" /&gt;
      #end
      ##
      ## Extensions displayed before the content
      #foreach ($e in $services.uix.getExtensions('org.phenotips.newPatientForm'))
        &lt;input type="hidden" name="$!e.parameters.name" value="$!e.parameters.value" /&gt;
      #end
      &lt;label for="create-patient-record"&gt;&lt;span class="fa fa-plus-circle"&gt; &lt;/span&gt;&lt;input type="submit" id="create-patient-record" title="$services.localization.render('phenotips.globalHeader.createPatient')" value="$services.localization.render('phenotips.globalHeader.createPatient')"/&gt;&lt;/label&gt;
   &lt;/div&gt;&lt;/form&gt;
#end
{{/html}}{{/velocity}}</content>
  <object>
    <name>PhenoTips.CreatePatientRecordForm</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>4a443a3a-0f92-471c-a251-a52ded8f604b</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var PhenoTips = (function (PhenoTips) {
  var widgets = PhenoTips.widgets = PhenoTips.widgets || {};
  widgets.SelectProjectAndTemplate = Class.create({

    initialize : function ()
    {
       __this = this;
       projectSectionId = 'projectsSection';
       templatesSectionId = 'templatesSection';
       sectionCreated = {
          projectSectionId : false,
          templatesSectionId : false};

       __this.newPatientForm = $('patient-creation-form');
       if (!__this.newPatientForm) {
          return;
       }

       __this.numberOfProjects = parseInt($('numberOfProjects').value);
       __this.numberOfTemplates = parseInt($('numberOfTemplates').value);
       if (__this.numberOfProjects == 0 &amp;&amp; __this.numberOfTemplates == 0) {
          // Nothing to choose
          return;
       }

       __this.newPatientForm.observe('submit', function (event) {
          event.stop();
          __this._currentMode = __this._MODES.CREATE;
          __this._createSelectionPopup();
          __this.modalBox.showDialog();
          __this._updateProjectTemplateSelectionSection();
          __this._updatePopupByMode();
       });

       __this._initializeProjectTemplateReassignmentTool();
    },

    _MODES : {
       CREATE : 1, // for creating a new patient
       UPDATE : 2  // for updating template or projects for existing patient
    },

    _areAllSectionsCreated : function() {
       return sectionCreated[projectSectionId] &amp;&amp; sectionCreated[templatesSectionId];
    },

    _createSection: function(section, documentName)
    {
       var parameters = {};
       if (__this._currentMode == __this._MODES.UPDATE) {
          parameters.patientSpace = XWiki.currentDocument.space;
          parameters.patientId    = XWiki.currentDocument.page;
       }

       var docRef = XWiki.resource.get(documentName, XWiki.EntityType.DOCUMENT);
       new Ajax.Request(new XWiki.Document(docRef.name, docRef.space).getURL('get'), {
          parameters: parameters,
          onCreate : function() {
             section.update('&lt;img src="$xwiki.getSkinFile('icons/xwiki/ajax-loader-large.gif')"/&gt;');
          },
          onSuccess : function(response) {
             section.update(response.responseText);
             sectionCreated[section.id] = true;
             if (__this._areAllSectionsCreated()) {
                document.fire("projects:projectselection:popupcreated");
             }
          },
          onFailure : function(response) {
             var failureReason = response.responseText || response.statusText;
             if (response.statusText == '' /* No response */ || response.status == 12031 /* In IE */) {
                failureReason = "$services.localization.render('phenotips.chooseProjectTemplate.failure.noResponse')";
             }
             var failureMessage = "$services.localization.render('phenotips.chooseProjectTemplate.failureMessage')";
             __this._messages.update(new Element('div', {'class' : 'errormessage'}).update(failureMessage + ' ' + failureReason));
          },
          on0 : function (response) {
             response.request.options.onFailure(response);
          }
       });
    },

    _createSelectionPopup: function()
    {
       var selectionForm = $('selectPTForm');
       if (selectionForm != null) {
          // Form already exists
          return;
       }

       selectionForm = new Element('form', {id: 'selectPTForm', 'action' : __this.newPatientForm.action, 'class' : 'xform'});
       var formDataWrapper = new Element('div', {id: 'formDataWrapper'});
       selectionForm.insert(formDataWrapper);

       var projectsSection = new Element('div', {id : projectSectionId});
       formDataWrapper.insert(projectsSection);
       var templatesSection = new Element('div', {id : templatesSectionId});
       formDataWrapper.insert(templatesSection);
       __this._messages = new Element('div', {id : 'manager-messages'});
       formDataWrapper.insert(__this._messages);

       __this.newPatientForm.select('input[type="hidden"]').each(function(item) {
          formDataWrapper.insert(new Element('input', {type : item.type, name: item.name, value: item.value}));
       });

       formDataWrapper.insert(new Element('input', {name: 'projectsSelected', id: 'projectsSelected', type : 'hidden'}));
       formDataWrapper.insert(new Element('input', {name: 'templateSelected', id: 'templateSelected', type : 'hidden'}));

       formDataWrapper.insert(new Element('p'));

       var submitButton = new Element('input', {id : 'submitButton', type : 'submit', 'class' : 'button'});
       formDataWrapper.insert(submitButton);
       var cancelText = "$services.localization.render('phenotips.chooseProjectTemplate.cancelButton')";
       var cancelButton = new Element('input', {id : 'cancelButton', type : 'button', value : cancelText, 'class' : 'button secondary'});
       formDataWrapper.insert(' ').insert(cancelButton);
       __this.modalBox = new PhenoTips.widgets.ModalPopup(selectionForm, false, {'verticalPosition': 'top', 'removeOnClose': false});
       cancelButton.observe('click', function(event) {
          __this.modalBox.closeDialog();
       });
    },

    _updateProjectTemplateSelectionSection : function() {
       var formDataWrapper = $('formDataWrapper');
       if (formDataWrapper == null) {
          return;
       }

       var projectsSection = $(projectSectionId);
       formDataWrapper.insert(__this._createSection(projectsSection, 'PhenoTips.ProjectBindingSheet'));

       var templatesSection = $(templatesSectionId);
       formDataWrapper.insert(__this._createSection(templatesSection, 'PhenoTips.StudyBindingSheet'));
    },

    _updatePopupByMode : function() {
       var submitText;
       var submitFunction;
       if (__this._currentMode == __this._MODES.CREATE) {
          submitText =  "$services.localization.render('phenotips.chooseProjectTemplate.createButton')";
          submitFunction = __this._submitCreateForm;
       }
       else if (__this._currentMode == __this._MODES.UPDATE) {
          submitText =  "$services.localization.render('phenotips.chooseProjectTemplate.saveButton')";
          submitFunction = __this._updateProjectTemplateSelection;

          // Simulate project checkboxes clicking
          document.fire("projects:projectselection:popupupdated");
       }
       else {
          return;
       }

       var submitButton = $('submitButton');
       submitButton.value = submitText;
       submitButton.stopObserving('click');
       submitButton.observe('click', submitFunction);
    },

    _getProjectTemplateSelection : function() {
       var projectsSelected = '';
       var projectsSection = $('projectsSection');
       if (projectsSection) {
          $('projectsSection').select(":input").map(function(item) {
             if (item.checked) {
                if (projectsSelected.length>0) {
                   projectsSelected += ",";
                }
                projectsSelected += item.name;
             }
          });
       }

       var templateSelected = '';
       var templatesSelect = $('templatesSelect');
       if (templatesSelect) {
          var templates = $('templatesSelect').select("option").map(function(item) {
             if (item.selected) {
                templateSelected = item.value;
             }
          });
       }

       return {projectsSelected : projectsSelected,
               templateSelected : templateSelected};
    },

    _submitCreateForm : function(event) {
       event.stop();
       var selection = __this._getProjectTemplateSelection();
       $('projectsSelected').value = selection.projectsSelected;
       $('templateSelected').value = selection.templateSelected;
       $('selectPTForm').submit();
    },

    _updateProjectTemplateSelection : function(event) {
       event.stop();
       var trigger = event.findElement();
       var selection = __this._getProjectTemplateSelection();

       new Ajax.Request(__this.newPatientForm.action, {
          parameters: { patientId: XWiki.currentDocument.page,
                        projects : selection.projectsSelected,
                        template : selection.templateSelected
                      },
          method: 'PUT',
          onCreate: function() {
             trigger.disabled = true;
             trigger.addClassName('loading');
          },
          onSuccess: function(response) {
             __this._refreshExtensions();
             __this.modalBox.closeDialog();
          },
          onFailure : function(response) {
             var failureReason = response.responseText || response.statusText;
             if (response.statusText == '' /* No response */ || response.status == 12031 /* In IE */) {
                failureReason = "$services.localization.render('phenotips.chooseProjectTemplate.failure.noResponse')";
             }
             var failureMessage = "$services.localization.render('phenotips.chooseProjectTemplate.failureMessage')";
             __this._messages.update(new Element('div', {'class' : 'errormessage'}).update(failureMessage + ' ' + failureReason));
          },
          on0 : function (response) {
             response.request.options.onFailure(response);
          },
          onComplete: function(response) {
            trigger.removeClassName('loading');
            trigger.disabled = false;
          }
       });
    },

    _initializeProjectTemplateReassignmentTool : function() {
       var ptAssignmentTool = $('pt-assignment-config');
       if (!ptAssignmentTool) {
         return;
       }

       ptAssignmentTool.observe('click', function (event) {
          event.stop();
          __this._currentMode = __this._MODES.UPDATE;
          __this._createSelectionPopup();
          __this.modalBox.showDialog();
          __this._updateProjectTemplateSelectionSection();
          __this._updatePopupByMode();
       });
    },

    _refreshExtensions: function() {
       new Ajax.Request(XWiki.currentDocument.getURL('get', 'sheet=PhenoTips.ProjectAssignmentSheet'), {
          onSuccess: function(response) {
             $('before-patient-data').replace(response.responseText);
             __this._initializeProjectTemplateReassignmentTool();
          }
       });
    }
  });
  return PhenoTips;

}(PhenoTips || {}));

document.observe("xwiki:dom:loaded", function() {
  new PhenoTips.widgets.SelectProjectAndTemplate();
});</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.CreatePatientRecordForm</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>b50a6d81-350e-4568-b991-950098cf98b1</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>.tp-assignment-config {
  width: 48%;
  float: left;
}
.tp-assignment-config a.button {
  font-size: 1em;
  font-weight: normal;
  text-transform: none;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.CreatePatientRecordForm</name>
    <number>0</number>
    <className>XWiki.UIExtensionClass</className>
    <guid>48f24db0-ad94-47de-8a15-dac5af1f369c</guid>
    <class>
      <name>XWiki.UIExtensionClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <content>
        <disabled>0</disabled>
        <name>content</name>
        <number>3</number>
        <prettyName>Extension Content</prettyName>
        <rows>10</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <extensionPointId>
        <disabled>0</disabled>
        <name>extensionPointId</name>
        <number>1</number>
        <prettyName>Extension Point ID</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </extensionPointId>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>2</number>
        <prettyName>Extension ID</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parameters>
        <disabled>0</disabled>
        <name>parameters</name>
        <number>4</number>
        <prettyName>Extension Parameters</prettyName>
        <rows>10</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </parameters>
      <scope>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>scope</name>
        <number>5</number>
        <prettyName>Extension Scope</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>wiki=Current Wiki|user=Current User|global=Global</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </scope>
    </class>
    <property>
      <content>{{velocity output=false}}
$xwiki.jsx.use('PhenoTips.CreatePatientRecordForm')
$xwiki.ssx.use('PhenoTips.CreatePatientRecordForm')
{{/velocity}}

{{velocity}}
(% class="tp-assignment-config" %)
#set ($projects = $services.projects.getProjectsCurrentUserCanContributeTo())
#if ($xcontext.action != 'export' &amp;&amp; $projects.size() &gt; 0)
Projects: ##
  #set ($projects = $services.projects.getProjectsForPatient($doc.getName()))
  #if ($projects == '' || $projects.size() == 0)
(% class="hint" %)None(%%)
  #else
    #set ($projectsString = '')
    #foreach ($project in $projects)
      #set ($projectsString = "${projectsString}(% class='buttonwrapper' %)[[{{icon name='copy' /}} $project.getName()&gt;&gt;$project.getFullName()||rel='__blank' class='button secondary']](%%)")
      #if ($foreach.count&lt;$projects.size())
         #set ($projectsString = "${projectsString}##")
      #end
    #end
    $projectsString
  #end
#end
#set ($templates = $services.templates.getAllTemplates())
#if ($xcontext.action != 'export' &amp;&amp; $templates.size() &gt; 0)
Template: ##
  #set ($template = $services.projects.getTemplateForPatient($doc.getName()))
  #if ("$!template" == '')
(% class="hint" %)None(%%)
  #else
(% class='buttonwrapper' %)[[{{icon name='copy' /}} ${template.getName()}&gt;&gt;$template.getId()||rel='__blank' class='button secondary']](%%)
  #end
#end
#if ($xcontext.action != 'export' &amp;&amp; $templates.size() + $projects.size() &gt; 0)
#set ($faction = $doc.getURL('save', "form_token=${services.csrf.token}&amp;amp;xredirect=$escapetool.url($doc.getURL($xcontext.action))"))
(% class='buttonwrapper' %)##
[[ {{icon name="edit" title="$services.localization.render('phenotips.templateBindingClass.changeTemplateButton.title')" /}}##
{{html clean=false}}&lt;input type="hidden" name="faction" value="$faction"/&gt;{{/html}}##
&gt;&gt;path:$doc.getURL('get', "sheet='PhenoTips.CreatePatientRecordForm'&amp;faction=$!{faction}")||class="button" rel="__blank" id="pt-assignment-config" class="$xcontext.action"]]
(%%)
(%%)
#end
##</content>
    </property>
    <property>
      <extensionPointId>org.phenotips.patientSheet.before</extensionPointId>
    </property>
    <property>
      <name>org.phenotips.patientSheet.ProjectTemplateBinding</name>
    </property>
    <property>
      <parameters>order=1</parameters>
    </property>
    <property>
      <scope>wiki</scope>
    </property>
  </object>
</xwikidoc>
