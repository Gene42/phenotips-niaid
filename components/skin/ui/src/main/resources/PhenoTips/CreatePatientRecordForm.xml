<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/
-->

<xwikidoc version="1.1">
  <web>PhenoTips</web>
  <name>CreatePatientRecordForm</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1401822210000</creationDate>
  <parent>PhenoTips.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1448474235000</date>
  <contentUpdateDate>1448318337000</contentUpdateDate>
  <version>1.1</version>
  <title>Form for creating new patient records</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity}}{{html clean=false}}
$xwiki.ssx.use('PhenoTips.Widgets')##
$xwiki.jsx.use('PhenoTips.Widgets')##
$xwiki.ssx.use('PhenoTips.CreatePatientRecordForm')##
$xwiki.jsx.use('PhenoTips.CreatePatientRecordForm')##
#if($hasCreatePage)
   &lt;form id="patient-creation-form" class="patient-creation-form" action="$xwiki.getURL('PhenoTips.CreatePatientRecord')" method="post"&gt;&lt;div&gt;
      &lt;input type="hidden" name="form_token" value="$!{services.csrf.getToken()}" /&gt;
      &lt;input type="hidden" name="doCreate" value="1" /&gt;
      ##
      $xwiki.ssx.use('PhenoTips.ProjectBindingClass')##
      $xwiki.jsx.use('PhenoTips.ProjectBindingClass')##
      &lt;input type="hidden" id="numberOfProjects" value="$services.projects.getAllProjectsAsContributor().size()" /&gt;
      ##
      #if ($xwiki.exists('PhenoTips.StudyBindingClass'))
         ## Is there more than one sheet option?
         ## Check out all the groups this user is part of
         #set ($studiesVisibilityPreference = $xwiki.getDocument('XWiki.XWikiPreferences').getObject('XWiki.ConfigurationClass', 'property', 'study-visibility-option', false).getProperty('value').value)
         #if ($studiesVisibilityPreference == 'unrestricted')
            #set ($studyClassName = 'PhenoTips.StudyClass')
            #set ($studyTemplateName = 'PhenoTips.StudyTemplate')
            #set ($query = $services.query.xwql("from doc.object(${studyClassName}) as std where doc.fullName &lt;&gt; :template").bindValue('template', $studyTemplateName))
            #set ($studyDocs = $xwiki.wrapDocs($query.execute()))
            #set ($studies = $collectionstool.sortedSet)
            #foreach ($study in $studyDocs)
               #set ($discard = $studies.add($services.model.serialize($study.documentReference, 'default')))
            #end
         #else
            #set ($toProcess = $collectionstool.queue)
            #set ($discard = $toProcess.add($xcontext.userReference.toString()))
            #set ($groups = [])
            #set ($studies = $collectionstool.sortedSet)
            #foreach ($iteration in [0..1000])
               #if ($toProcess.empty)
                  #break
               #end
               #set ($item = $toProcess.poll())
               #foreach ($group in $xwiki.wrapDocs($xwiki.rightsmanager.getAllGroupsNamesForMember($item)))
                  #set ($groupObj = $group.getObject('PhenoTips.PhenoTipsGroupClass'))
                  #if (!$groupObj &amp;&amp; $group.documentReference.name.endsWith(' Administrators'))
                     #set ($groupObj = $xwiki.getDocument($services.model.resolveDocument($stringtool.removeEnd($group.documentReference.name, ' Administrators'), $group.documentReference.parent)).getObject('PhenoTips.PhenoTipsGroupClass'))
                  #end
                  #if ($groupObj &amp;&amp; !$groups.contains($group.documentReference.toString()))
                     #set ($discard = $toProcess.add($group.documentReference.toString()))
                     #set ($discard = $groups.add($escapetool.sql($group.documentReference.toString())))
                     #if ($groupObj.getProperty('studies').value.isEmpty() == false)
                        #set ($discard = $studies.addAll($groupObj.getProperty('studies').value))
                     #end
                  #end
               #end
            #end
         #end
         $xwiki.jsx.use('PhenoTips.StudyBindingClass')##
         $xwiki.ssx.use('PhenoTips.StudyBindingClass')##
         &lt;input type="hidden" id="numberOfTemplates" value="$studies.size()" /&gt;
      #end
      ##
      ## Extensions displayed before the content
      #foreach ($e in $services.uix.getExtensions('org.phenotips.newPatientForm'))
        &lt;input type="hidden" name="$!e.parameters.name" value="$!e.parameters.value" /&gt;
      #end
      &lt;label for="create-patient-record"&gt;&lt;span class="fa fa-plus-circle"&gt; &lt;/span&gt;&lt;input type="submit" id="create-patient-record" title="$services.localization.render('phenotips.globalHeader.createPatient')" value="$services.localization.render('phenotips.globalHeader.createPatient')"/&gt;&lt;/label&gt;
   &lt;/div&gt;&lt;/form&gt;
#end
{{/html}}{{/velocity}}</content>
  <object>
    <name>PhenoTips.CreatePatientRecordForm</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>4a443a3a-0f92-471c-a251-a52ded8f604b</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var PhenoTips = (function (PhenoTips) {
  var widgets = PhenoTips.widgets = PhenoTips.widgets || {};
  widgets.SelectProjectAndTemplate = Class.create({

    initialize : function ()
    {
       __this = this;
       projectSectionId = 'projectsSection';
       templatesSectionId = 'templatesSection';
       sectionCreated = {
          projectSectionId : false,
          templatesSectionId : false};

       __this.newPatientForm = $('patient-creation-form');
       if (!__this.newPatientForm) {
          return;
       }

       __this.numberOfProjects = parseInt($('numberOfProjects').value);
       __this.numberOfTemplates = parseInt($('numberOfTemplates').value);
       if (__this.numberOfProjects == 0 &amp;&amp; __this.numberOfTemplates &lt; 2) {
          // Nothing to choose
          return;
       }

       __this.newPatientForm.observe('submit', function (event) {
          event.stop();
          __this._createSelectionPopup();
       });
    },

    _areAllSectionsCreated : function() {
       return sectionCreated[projectSectionId] &amp;&amp; sectionCreated[templatesSectionId];
    },

    _createSection: function(sectionId, documentName)
    {
       var section = new Element('div', {id : sectionId});
       var docRef = XWiki.resource.get(documentName, XWiki.EntityType.DOCUMENT);
       new Ajax.Request(new XWiki.Document(docRef.name, docRef.space).getURL('get'), {
          onCreate : function() {
             section.update('&lt;img src="$xwiki.getSkinFile('icons/xwiki/ajax-loader-large.gif')"/&gt;');
          },
          onSuccess : function(response) {
             section.update(response.responseText);
             sectionCreated[sectionId] = true;
             if (__this._areAllSectionsCreated()) {
                document.fire("xwiki:dom:updated");
             }
          },
          onFailure : function(response) {
             var failureReason = response.responseText || response.statusText;
             if (response.statusText == '' /* No response */ || response.status == 12031 /* In IE */) {
                failureReason = "$services.localization.render('phenotips.chooseProjectStudy.failure.noResponse')";
             }
             var failureMessage = "$services.localization.render('phenotips.chooseProjectStudy.failureMessage')";
             __this._messages.update(new Element('div', {'class' : 'errormessage'}).update(failureMessage + ' ' + failureReason));
          },
          on0 : function (response) {
             response.request.options.onFailure(response);
          }
       });
       return section;
    },

    _createSelectionPopup: function()
    {
       var selectionForm = new Element('form', {'action' : __this.newPatientForm.action, 'class' : 'xform'});
       var formDataWrapper = new Element('div');
       selectionForm.insert(formDataWrapper);

       if (__this.numberOfProjects &gt; 0) {
          formDataWrapper.insert(__this._createSection(projectSectionId, 'PhenoTips.ProjectBindingSheet'));
       }

       if (__this.numberOfTemplates &gt; 0) {
          formDataWrapper.insert(__this._createSection(templatesSectionId, 'PhenoTips.StudyBindingSheet'));
       }

       __this.newPatientForm.select('input[type="hidden"]').each(function(item) {
          formDataWrapper.insert(new Element('input', {type : item.type, name: item.name, value: item.value}));
       });

       formDataWrapper.insert(new Element('p'));

       var submitText = "$services.localization.render('phenotips.chooseProjectStudy.createButton')"
       var submitButton = new Element('input', {type : 'submit', value : submitText, 'class' : 'button'});
       formDataWrapper.insert(submitButton);
       var cancelText = "$services.localization.render('phenotips.chooseProjectStudy.cancelButton')";
       var cancelButton = new Element('input', {type : 'button', value : cancelText, 'class' : 'button secondary'});
       formDataWrapper.insert(' ').insert(cancelButton);
       var modalBox = new PhenoTips.widgets.ModalPopup(selectionForm, false, {'verticalPosition': 'top', 'removeOnClose': false});
       cancelButton.observe('click', function(event) {
          modalBox.closeDialog();
       });
       modalBox.showDialog();
    }
  });
  return PhenoTips;

}(PhenoTips || {}));

document.observe("xwiki:dom:loaded", function() {
  new PhenoTips.widgets.SelectProjectAndTemplate();
});</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
