<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/
-->

<xwikidoc version="1.1">
  <web>PhenoTips</web>
  <name>GeneNameService</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1401822211000</creationDate>
  <parent>PhenoTips.GeneClass</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1401822211000</date>
  <contentUpdateDate>1401822211000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity}}
#if ($xcontext.action == 'get')
  $response.setContentType('application/json')##
#end
#if ("$!{request.outputSyntax}" == 'plain')
  {{content syntax="plain/1.0"}}
#else
  {{html wiki="false" clean="false"}}
#end
#set ($max = 10)
#if ("$!request.max" != '')
  #set ($max = $mathtool.toInteger($request.max))
#end
#if ($request.getParameterValues('g'))
  #set ($results = {})
  #foreach ($i in $request.getParameterValues('g'))
    #if ("$!i" != '')
      #set ($term = $services.vocabularies.hgnc.getTerm($i))
      #if ($term)
        #set ($result = {
          'symbol' : $term.symbol,
          'external_ids' : {'genecards_id' :  $term.symbol}
        })
        #if ($term.alias_symbol)
          #set ($result.alias_symbol = $term.alias_symbol)
        #end
        #if ($term.prev_symbol)
          #set ($result.prev_symbol = $term.prev_symbol)
        #end
        #if ($term.gene_family)
          #set ($result.gene_family = $term.gene_family)
        #end
        #foreach ($externalTerm in ['omim_id', 'entrez_id', 'refseq_accession', 'ensembl_gene_id'])
          #if ($term.get($externalTerm))
            #set ($discard = $result.external_ids.put($externalTerm, $term.get($externalTerm)))
          #end
        #end
        #set ($discard = $results.put($i, $result))
      #end
    #end
  #end
  #if ($results.isEmpty())
    {"error": "Gene not found."}
  #else
    $jsontool.serialize({"response": $results})
  #end
#elseif ("$!request.q" != '')
  #set ($terms = $services.vocabularies.hgnc.search("${request.q}", $max, "", ""))
  #set ($result = {'numReturned' : $terms.size(), 'docs': []})
  #foreach ($term in $terms)
    #set ($discard = $result.docs.add({'symbol' : $term.symbol}))
  #end
  $jsontool.serialize($result)
#end
#if ("$!{request.outputSyntax}" == 'plain')
  {{/content}}
#else
  {{/html}}
#end
{{/velocity}}</content>
</xwikidoc>
