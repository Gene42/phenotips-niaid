<?xml version="1.0" encoding="UTF-8"?>

<!--
 * This file is subject to the terms and conditions defined in file LICENSE,
 * which is part of this source code package.
 *
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
-->

<xwikidoc version="1.1">
  <web>PhenoTips</web>
  <name>PhenotypeExactOnsetCode</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1478186948000</creationDate>
  <parent>PhenoTips.PhenotypeMetaClass</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1478187262000</date>
  <contentUpdateDate>1478187244000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content/>
  <object>
    <name>PhenoTips.PhenotypeExactOnsetCode</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>7051f8ba-1001-4640-ace8-69d3afe0a9e8</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var PhenoTips = (function(PhenoTips) {
  // Start PhenoTips augmentation
  var widgets = PhenoTips.widgets = PhenoTips.widgets || {};

  widgets.DurationField = Class.create({
    pieces : {
      y : 'years',
      m : 'months',
      w : 'weeks',
      d : 'days',
      n : '([0-9]*)',
      s : '\\s*'
    },
    initialize : function(element) {
      if (!element) {
        return;
      }
      var sep = this.pieces.s;
      this.subgroups = {
        y  : this._regexpifyDurationUnit('y', true),
        m  : this._regexpifyDurationUnit('m', true),
        w  : this._regexpifyDurationUnit('w', true),
        d  : this._regexpifyDurationUnit('d', true)
      };
      this.regexp = new RegExp("^((" + this.subgroups.y + sep + this.subgroups.m + ")|" + this.subgroups.w + ")" + sep + this.subgroups.d + "$");
      this.element = element;
      var _this = this;
      ['keyup', 'input', 'duration:change'].each(function(ev) {
        element.observe(ev, function(event) {
          if (_this.regexp.match(element.value)) {
            element.removeClassName('error');
          } else {
            element.addClassName('error');
          }
        });
      });
      ['blur', 'duration:change'].each(function(ev) {
        element.observe(ev, function(event) {
          element.value = _this.format(element.value);
          element.title = _this.getValue(element.value);
          Element.fire(element, 'duration:format');
        });
      });

      // Set up validation
      this._validate = this._validate.bind(this);
      this.element.__validation = this.element.__validation || new LiveValidation(this.element, {validMessage: '', wait: 500});
      this.element.__validation.add(this._validate);

      element.value = _this.format(element.value);
      element.title = _this.getValue(element.value);
      element.__durationField = this;
    },
    _regexpifyDurationUnit : function(unit, makeOptional) {
      return "(" + this.pieces.s + this.pieces.n + this.pieces.s + this._regexpifyWord(this.pieces[unit] || "") + this.pieces.s + ")" + (makeOptional ? '?' : '');
    },
    _regexpifyWord : function(word) {
      return word.replace(/(.)/g, "$1?").replace("?", "");
    },
    match : function(text) {
      return (text || "").match(this.regexp);
    },
    getValue : function(text) {
      if (this.match(text)) {
        var result = 0;
        var _this = this;
        var item;
        [['y', 12], ['m', 1], ['w', 0.23], ['d', 0.03286]].each(function(unit) {
          item = text.match(new RegExp(this._regexpifyDurationUnit(unit[0], false)));
          if (item) {
            result += item[2] * unit[1];
          }
        }.bind(this));
        return result;
      } else {
        return -1;
      }
    },
    format : function(text) {
      if (this.match(text)) {
        var result = text;
        var _this = this;
        ['y', 'm', 'w', 'd'].each(function(unit) {
          result = result.replace(new RegExp(this._regexpifyDurationUnit(unit, false)), "$2" + this.pieces[unit][0]);
        }.bind(this));
        return result.replace(this.pieces.sep, "", "g");
      } else {
        return text;
      }
    },
    _validate: function() {
      if (this.regexp.match(this.element.value)) {
        return true;
      } else {
        Validate.fail("$services.localization.render('phenotips.widgets.durationField.invalid')");
      }
    }
  });

  var init = function(event) {
    ((event &amp;&amp; event.memo.elements) || [$('body')]).each(function(element) {
      element.select('input[type="text"].pt-duration').each(function(item) {
        if (!item.__durationField) {
          new PhenoTips.widgets.DurationField(item);
        }
      });
    });
    return true;
  };

  (XWiki.domIsLoaded &amp;&amp; init()) || document.observe("xwiki:dom:loaded", init);
  document.observe("xwiki:dom:updated", init);

  // End PhenoTips augmentation.
  return PhenoTips;
}(PhenoTips || {}));</code>
    </property>
    <property>
      <name>durationField.js</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.PhenotypeExactOnsetCode</name>
    <number>1</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>433e32ee-f64c-4f6c-b612-97e68a3eeb56</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var PhenoTips = (function(PhenoTips) {
  // Start PhenoTips augmentation
  var widgets = PhenoTips.widgets = PhenoTips.widgets || {};

  widgets.DateWhileAlive = Class.create({
    initialize: function(el) {
      // DOM element pointers
      this.el = el;
      this._patientDobEl = $(document.documentElement).down('input[name$=date_of_birth]');
      this._patientDodEl = $(document.documentElement).down('input[name$=date_of_death]');

      // Bind methods
      this._handleChange = this._handleChange.bind(this);
      this._isDateWhileAlive = this._isDateWhileAlive.bind(this);

      // Set up validation
      this.el.__validation = this.el.__validation || new LiveValidation(this.el, {validMessage: ''});
      this.el.__validation.add(this._isDateWhileAlive);

      // Attach handlers
      // FuzzyDatePicker components fire "xwiki:date:changed", this might need to change to work with
      // a different datepicker component.
      var eventName = "xwiki:date:changed";
      this.el.observe(eventName, this._handleChange);
      this._patientDobEl.observe(eventName, this._handleChange);
      this._patientDodEl.observe(eventName, this._handleChange);

      // Init the target DOM element
      this.el.__dateWhileAlive = this;
    },

    // Currently only works with fuzzy date pickers
    _isDateWhileAlive: function() {
      var bdayParts = this._patientDobEl &amp;&amp; this._patientDobEl.__datePicker &amp;&amp; this._patientDobEl.__datePicker.dateParts;
      var ddayParts = this._patientDodEl &amp;&amp; this._patientDodEl.__datePicker &amp;&amp; this._patientDodEl.__datePicker.dateParts;
      var thisDateParts = this.el &amp;&amp; this.el.__datePicker &amp;&amp; this.el.__datePicker.dateParts;

      if (bdayParts &amp;&amp; thisDateParts &amp;&amp; PhenoTips.widgets.FuzzyDatePicker.isDateAfter(thisDateParts, bdayParts)) {
        Validate.fail("$services.localization.render('phenotips.widgets.dateWhileAlive.dateBeforeBirth')");
      } else if (ddayParts &amp;&amp; thisDateParts &amp;&amp; PhenoTips.widgets.FuzzyDatePicker.isDateAfter(ddayParts, thisDateParts)) {
        Validate.fail("$services.localization.render('phenotips.widgets.dateWhileAlive.dateAfterDeath')");
      } else {
        return true;
      }
    },

    _handleChange: function() {
      this.el.__validation.validate();
    },
  });

  var init = function(event) {
    ((event &amp;&amp; event.memo.elements) || [$('body')]).each(function(element) {
      element.select('input[type="text"].pt-date-while-alive').each(function(item) {
        if (!item.__dateWhileAlive) {
          new PhenoTips.widgets.DateWhileAlive(item);
        }
      });
    });
    return true;
  };

  (XWiki.domIsLoaded &amp;&amp; init()) || document.observe("xwiki:dom:loaded", init);
  document.observe("xwiki:dom:updated", init);

  // End PhenoTips augmentation.
  return PhenoTips;
}(PhenoTips || {}));</code>
    </property>
    <property>
      <name>dateWhileAlive.js</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.PhenotypeExactOnsetCode</name>
    <number>2</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>d4d5ff99-219a-4520-a4e2-32c009483fdf</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var PhenoTips = (function(PhenoTips) {
  // Start PhenoTips augmentation
  var widgets = PhenoTips.widgets = PhenoTips.widgets || {};

  widgets.AgeCalculatedFromDate = Class.create({
    initialize: function(el) {
      // DOM element pointers
      this.el = el; // Assumed to be a duration widget field
      this.linkedDateEl = $(el.readAttribute("data-linked-date"));
      if (!this.linkedDateEl) {
        console &amp;&amp; console.error("Linked date element not found");
      }
      this._patientDobEl = $(document.documentElement).down('input[name$=date_of_birth]');

      // Bind methods
      this._handlePatientDobChange = this._handlePatientDobChange.bind(this);
      this._handleDateChange = this._handleDateChange.bind(this);

      // Attach handlers
      this._patientDobEl.observe('xwiki:date:changed', this._handlePatientDobChange);
      this.linkedDateEl.observe('xwiki:date:changed', this._handleDateChange);
      this.linkedDateEl.observe('datepicker:init', this._handleDateChange);

      // If the datepicker has already been initialized, set the initial state
      if (this.linkedDateEl.__datePicker) {
        this._handleDateChange();
      }

      // Save in the DOM
      this.el.__ageCalculatedFromDate = this;
    },

    _handlePatientDobChange: function() {
      if (this.el.readOnly) {
        this.el.value = this.getCalculatedAge();
        this.el.fire("duration:change");
      }
    },

    _handleDateChange: function() {
      if (this.linkedDateEl.alt.length &amp;&amp;
          !this.linkedDateEl.hasClassName('LV_invalid_field') &amp;&amp;
          this._patientDobEl.alt.length) {
        this.el.readOnly = true;
        this.el.value = this.getCalculatedAge();
        this.el.fire("duration:change");
      } else if (this.el.readOnly) {
        this.el.readOnly = false;
        this.el.value = '';
        this.el.fire("duration:change");
      }
    },

    getCalculatedAge: function() {
      var cls = widgets.AgeCalculatedFromDate;

      var thisDateExact = cls.getExactDate(this.linkedDateEl);
      var dobExact = cls.getExactDate(this._patientDobEl);
      // We can't do anything unless there is some date set on both
      // Fuzzy date picker behaviour is to have an exact date set even when not
      // all date components are present.
      // This could also be adapted to support other datepickers, but currently
      // only supports fuzzy date picker.
      if (thisDateExact &amp;&amp; dobExact) {
        var dobParts = cls.getEnteredDateComponents(this._patientDobEl);
        var thisDateParts = cls.getEnteredDateComponents(this.linkedDateEl);
        if (!cls.areComponentsFullDate(dobParts) || !cls.areComponentsFullDate(thisDateParts)) {
          // We'll need to compare components
          return cls.getCalculatedAgeFromPartialDateAndDob(dobParts, thisDateParts);
        } else {
          // We can use the exact dates directly
          return cls.getCalculatedAgeFromExactDateAndDob(dobExact, thisDateExact);
        }
      } else {
        return undefined;
      }

      return ageStr;
    },
  });

  // Class (non-instance) methods
  Object.extend(widgets.AgeCalculatedFromDate, {
    getEnteredDateComponents: function(el) {
      return (el &amp;&amp; el.__datePicker &amp;&amp; el.__datePicker.dateParts) || undefined;
    },

    areComponentsFullDate: function(partialDate) {
      return partialDate &amp;&amp; partialDate.year &amp;&amp; partialDate.month &amp;&amp; partialDate.day;
    },

    getExactDate: function(el) {
      if (!el.alt) {
        return undefined;
      } else {
        var date = new Date(el.alt);

        if (el.hasClassName('fuzzy-date')) {
          return date.toUTC();
        } else {
          return date;
        }
      }
    },

    getCalculatedAgeFromExactDateAndDob: function(bday, thisDate) {
      var age = new TimePeriod(bday, thisDate);
      var dateDisplayParts = {
        y: age.years,
        m: age.months,
        d: age.days,
      };
      var ageStr = "";
      Object.keys(dateDisplayParts).each(function(k) {
        if (dateDisplayParts[k] &gt; 0) ageStr += dateDisplayParts[k] + k;
      });

      return ageStr;
    },

    getCalculatedAgeFromPartialDateAndDob: function(dobParts, dateParts) {
      var dobMonths = +dobParts.year * 12;
      var dateMonths = +dateParts.year * 12;
      if (dobParts.month &amp;&amp; dateParts.month) {
        dobMonths += +dobParts.month;
        dateMonths += +dateParts.month;
      }

      var diff = dateMonths - dobMonths;
      if (diff &lt; 0) {
        console &amp;&amp; console.error('Calculated age should not be negative');
      }
      var ageStr = '';
      if (Math.floor(diff / 12) &gt; 0) {
        ageStr += Math.floor(diff / 12) + 'y';
      }
      if (diff % 12 &gt; 0) {
        ageStr += (diff % 12) + 'm';
      }

      return ageStr;
    },
  });

  var init = function(event) {
    ((event &amp;&amp; event.memo.elements) || [$('body')]).each(function(element) {
      element.select('input[type="text"].pt-age-calculated-from-date').each(function(item) {
        if (!item.__ageCalculatedFromDate) {
          new PhenoTips.widgets.AgeCalculatedFromDate(item);
        }
      });
    });
    return true;
  };

  (XWiki.domIsLoaded &amp;&amp; init()) || document.observe("xwiki:dom:loaded", init);
  document.observe("xwiki:dom:updated", init);

  // End PhenoTips augmentation.
  return PhenoTips;
}(PhenoTips || {}));</code>
    </property>
    <property>
      <name>ageCalculatedFromDate.js</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.PhenotypeExactOnsetCode</name>
    <number>3</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>950f686f-ef0d-4d3f-9d6a-a3d40523915b</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var PhenoTips = (function(PhenoTips) {
  // Start PhenoTips augmentation
  var widgets = PhenoTips.widgets = PhenoTips.widgets || {};

  widgets.AgeOfOnset = Class.create({
    // The age until which the specified HPO term applies
    ageMonthsToHpoTerm: [
      [0.92008, "HP:0003623"],
      [12, "HP:0003593"],
      [5*12, "HP:0011463"],
      [15*12, "HP:0003621"],
      [40*12, "HP:0011462"],
      [60*12, "HP:0003596"],
      [Number.MAX_SAFE_INTEGER, "HP:0003584"],
    ],
    initialize: function(el) {
      this.el = el;

      // Try to find the corresponding HPO branch among DOM siblings. Go up a
      // maximum of 2 nesting levels.
      var siblingsRef = el;
      var hpoBranch;
      for (var i = 0; i &lt; 3; i++) {
        hpoBranch = Prototype.Selector.find(siblingsRef.siblings(), '.hpo-branch');
        if (hpoBranch) {
          break;
        } else {
          siblingsRef = siblingsRef.up();
        }
      }
      if (hpoBranch) {
        this._hpoBranch = hpoBranch;
      } else {
        console &amp;&amp; console.error('Linked HPO branch not found');
        return;
      }

      this._handleAgeChange = this._handleAgeChange.bind(this);

      // Attach handlers
      el.observe('duration:format', this._handleAgeChange);
      el.observe('duration:change', this._handleAgeChange);

      // If the age has already been initialized, set the initial state
      if (this.el.__ageCalculatedFromDate) {
        this._handleAgeChange();
      }

      el.__ageOfOnset = this;
    },

    _handleAgeChange: function() {
      var ageMonths = this.el.title;

      var termToSelect;
      for (var i = 0; i &lt; this.ageMonthsToHpoTerm.length; i++) {
        if (ageMonths &lt; this.ageMonthsToHpoTerm[i][0]) {
          termToSelect = this.ageMonthsToHpoTerm[i][1];
          break;
        }
      }

      this._hpoBranch.select("input[type=radio]").each(function(radioEl) {
        if (!ageMonths || ageMonths == "0") {
          radioEl.disabled = false;
        } else {
          if (radioEl.value == termToSelect) {
            // Expand the section containing this option in case it's collapsed
            if (radioEl.up(1) &amp;&amp; radioEl.up(1).hasClassName('collapsed')) {
              radioEl.up(1).previous('.expand-tool').click();
            }
            radioEl.disabled = false;
            radioEl.checked = true;
            radioEl.fire('value:change');
          } else {
            radioEl.checked = false;
            radioEl.disabled = true;
          }
        }
      });
    },
  });

  var init = function(event) {
    ((event &amp;&amp; event.memo.elements) || [$('body')]).each(function(element) {
      element.select('input[type="text"].pt-age-of-onset').each(function(item) {
        if (!item.__ageOfOnset) {
          new PhenoTips.widgets.AgeOfOnset(item);
        }
      });
    });
    return true;
  };

  (XWiki.domIsLoaded &amp;&amp; init()) || document.observe("xwiki:dom:loaded", init);
  document.observe("xwiki:dom:updated", init);

  // End PhenoTips augmentation.
  return PhenoTips;
}(PhenoTips || {}));</code>
    </property>
    <property>
      <name>ageOfOnset.js</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
