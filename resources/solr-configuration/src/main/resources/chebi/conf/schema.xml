<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--
 For more information, on how to customize this file, please see
 http://wiki.apache.org/solr/SchemaXml

 PERFORMANCE NOTE: this schema includes many optional features and should not
 be used for benchmarking.  To improve performance one could
  - set stored="false" for all fields possible (esp large fields) when you
    only need to search on the field but don't need to return the original
    value.
  - set indexed="false" if you don't need to search on the field, but only
    return the field as a result of searching on other indexed fields.
  - remove all unneeded copyField statements
  - for best index size and searching performance, set "index" to false
    for all general text fields, use copyField to copy them to the
    catchall "text" field, and use that for searching.
  - For maximum indexing performance, use the StreamingUpdateSolrServer
    java client.
  - Remember to run the JVM in server mode, and use a higher logging level
    that avoids logging every request
-->

<schema name="chebi" version="1.5">
  <types>
    <!-- The StrField type is not analyzed, but indexed/stored verbatim. -->
    <fieldType name="string" class="solr.StrField" sortMissingLast="true" />

    <!-- A text field that only splits on whitespace for exact matching of words -->
    <fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
      </analyzer>
    </fieldType>

    <!-- A general text field: it tokenizes with StandardTokenizer,
         removes stop words from case-insensitive "stopwords.txt,
         protects keywords defined in "protwords.txt", down cases,
         and stems words using the possessive (remove 's) and the
         Porter English stemmer. -->
    <fieldType name="text_general" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" />
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.EnglishPossessiveFilterFactory"/>
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" />
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.EnglishPossessiveFilterFactory"/>
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
    </fieldType>
<!--    Could be tried out: -->
<!--    <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="1"/> -->
<!--    <filter class="solr.EnglishMinimalStemFilterFactory"/> -->

    <!-- Just like text_general except it reverses the characters of
         each token, to enable more efficient leading wildcard queries. -->
    <fieldType name="text_general_rev" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" />
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.ReversedWildcardFilterFactory" withOriginal="true"
           maxPosAsterisk="3" maxPosQuestion="2" maxFractionAsterisk="0.33"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" />
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- Uses the double metaphone filter for error-tolerant search -->
    <fieldtype name="phonetic" stored="false" indexed="true" class="solr.TextField" >
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.DoubleMetaphoneFilterFactory" inject="false"/>
      </analyzer>
    </fieldtype>

    <!-- Field for exact matching of the terms in the query, without stemming
         or other disruptive text processing filters applied to it.
         It is also used to construct a spellcheck index from. It does basic
         tokenization and lowercasing, since it's only used as a source of
         valid words. -->
    <fieldType name="text_spell" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
        <filter class="solr.StandardFilterFactory"/>
        <filter class="solr.LowerCaseFilterFactory" />
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
        <filter class="solr.StandardFilterFactory"/>
        <filter class="solr.LowerCaseFilterFactory" />
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
    </fieldType>

    <fieldtype name="exact_match" class="solr.TextField" positionIncrementGap="1000">
      <analyzer type="index">
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="^(.*)$" replacement="SOLR_START_MARKER $1 SOLR_END_MARKER" />
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <filter class="solr.LowerCaseFilterFactory" />
      </analyzer>
      <analyzer type="query">
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="^(.*)$" replacement="SOLR_START_MARKER $1 SOLR_END_MARKER" />
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <filter class="solr.LowerCaseFilterFactory" />
      </analyzer>
    </fieldtype>

    <fieldtype name="prefix_match" class="solr.TextField" positionIncrementGap="1000">
      <analyzer type="index">
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="^(.*)$" replacement="SOLR_START_MARKER $1" />
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <filter class="solr.LowerCaseFilterFactory" />
      </analyzer>
      <analyzer type="query">
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="^(.*)$" replacement="SOLR_START_MARKER $1*" />
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <filter class="solr.LowerCaseFilterFactory" />
      </analyzer>
    </fieldtype>

    <!-- Since fields of this type are by default not stored or indexed,
         any data added to them will be ignored outright.  -->
    <fieldtype name="ignored" stored="false" indexed="false" multiValued="true" class="solr.StrField" />
  </types>

  <fields>
    <field name="version" type="string" indexed="true" stored="true" />
    <field name="id" type="string" indexed="true" stored="true" required="true" />
    <field name="alt_id" type="string" indexed="true" stored="true" multiValued="true" />
    <field name="name" type="text_general" indexed="true" stored="true"/>
    <field name="nameSpell" type="text_spell" indexed="true" stored="false"/>
    <field name="nameExact" type="exact_match" indexed="true" stored="false" omitNorms="true"/>
    <field name="namePrefix" type="prefix_match" indexed="true" stored="false" omitNorms="true"/>
    <field name="nameSort" type="string" indexed="true" stored="false"/>
    <field name="synonym" type="text_general" indexed="true" stored="true" multiValued="true"/>
    <field name="synonymSpell" type="text_spell" indexed="true" stored="false" multiValued="true"/>
    <field name="synonymExact" type="exact_match" indexed="true" stored="false" multiValued="true"  omitNorms="true"/>
    <field name="synonymPrefix" type="prefix_match" indexed="true" stored="false" multiValued="true"  omitNorms="true"/>
    <field name="def" type="text_general" indexed="true" stored="true"/>
    <field name="comment" type="text_general" indexed="true" stored="true"/>
    <field name="xref" type="text_ws" indexed="true" stored="true" multiValued="true"/>
    <field name="is_a" type="text_ws" indexed="true" stored="true" multiValued="true"/>
    <field name="term_category" type="string" indexed="true" stored="true" multiValued="true"/>

    <!-- Catchall field, containing all other searchable text fields (implemented
         via copyField further on in this schema).  -->
    <field name="text" type="text_general" indexed="true" stored="false" multiValued="true"/>
    <field name="phonetic" type="phonetic" indexed="true" stored="false" multiValued="true"/>
    <field name="textSpell" type="text_spell" indexed="true" stored="false" multiValued="true"/>

    <!-- Catchall text field that indexes tokens both normally and in reverse for efficient
         leading wildcard queries. -->
    <field name="text_rev" type="text_general_rev" indexed="true" stored="false" multiValued="true"/>

    <dynamicField name="*" type="ignored" multiValued="true" />
  </fields>

  <!-- Field to use to determine and enforce document uniqueness.
       Unless this field is marked with required="false", it will be a required field
    -->
  <uniqueKey>id</uniqueKey>

  <copyField source="name" dest="nameSort"/>
  <copyField source="name" dest="nameSpell"/>
  <copyField source="name" dest="nameExact"/>
  <copyField source="name" dest="namePrefix"/>
  <copyField source="synonym" dest="synonymSpell"/>
  <copyField source="synonym" dest="synonymExact"/>
  <copyField source="synonym" dest="synonymPrefix"/>
  <copyField source="*" dest="text"/>
  <copyField source="*" dest="phonetic"/>
  <copyField source="*" dest="textSpell"/>
</schema>
