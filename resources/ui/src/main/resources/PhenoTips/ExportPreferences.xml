<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.1">
  <web>PhenoTips</web>
  <name>ExportPreferences</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1401822206000</creationDate>
  <parent>PhenoTips.Export</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1401822206000</date>
  <contentUpdateDate>1401822206000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{include document="PhenoTips.DatabaseFilters" /}}

{{velocity output=false}}
#macro(__export__displayFieldList $xclassName $targetFieldName $customValues $ignored $codeFields $valueList)
  {{html clean="false"}}
    #set($xclass = $xwiki.getDocument($xclassName).getxWikiClass())
    &lt;ul class="field-list"&gt;
      #foreach($customVal in $customValues.keySet())
        &lt;li&gt;
          &lt;label for="${targetFieldName}_${customVal}"&gt;
            &lt;input type="checkbox" name="${targetFieldName}" id="${targetFieldName}_${customVal}" value="$customVal"#if ($valueList.contains($customVal) || true) checked="checked"#end/&gt;
            ${customValues.get($customVal)}
          &lt;/label&gt;
        &lt;/li&gt;
      #end
      #foreach ($field in $xclass.properties)
        #if (($activeFields.size() == 0 || $activeFields.contains(${field.name})) &amp;&amp; !$ignored.fields.contains(${field.name}) &amp;&amp; !$ignored.types.contains(${field.type}))
        &lt;li&gt;
          &lt;label for="${targetFieldName}_${field.name}"&gt;
          &lt;input type="checkbox" name="${targetFieldName}" id="${targetFieldName}_${field.name}" value="${field.name}" #if($valueList.contains(${field.name}) || true) checked="checked" #end /&gt;
          ${field.prettyName}
        &lt;/li&gt;
        #if ($codeFields.contains(${field.name}))
        &lt;li&gt;
          &lt;label for="${targetFieldName}_${field.name}_code"&gt;
          &lt;input type="checkbox" name="${targetFieldName}" id="${targetFieldName}_${field.name}_code" value="${field.name}_code" #if($valueList.contains("${field.name}_code")) checked="checked" #end /&gt;
          ${field.prettyName} (ontology term ID)
        &lt;/li&gt;
        &lt;li&gt;
          &lt;label for="${targetFieldName}_${field.name}_combined"&gt;
          &lt;input type="checkbox" name="${targetFieldName}" id="${targetFieldName}_${field.name}_combined" value="${field.name}_combined" #if($valueList.contains("${field.name}_combined")) checked="checked" #end /&gt;
          ${field.prettyName} (ontology term ID and term name)
        &lt;/li&gt;
        #end
        #if ($metaFields.contains(${field.name}))
        &lt;li&gt;
          &lt;label for="${targetFieldName}_${field.name}_code_meta"&gt;
          &lt;input type="checkbox" name="${targetFieldName}" id="${targetFieldName}_${field.name}_code_meta" value="${field.name}_code_meta" #if($valueList.contains("${field.name}_code_meta")) checked="checked" #end /&gt;
          ${field.prettyName} (ontology term and metadata IDs)
        &lt;/li&gt;
        &lt;li&gt;
          &lt;label for="${targetFieldName}_${field.name}_meta"&gt;
          &lt;input type="checkbox" name="${targetFieldName}" id="${targetFieldName}_${field.name}_meta" value="${field.name}_meta" #if($valueList.contains("${field.name}_meta") || true) checked="checked" #end /&gt;
          ${field.prettyName} (ontology term and metadata names)
        &lt;/li&gt;
        #end
        #end
      #end
    &lt;/ul&gt;
    &lt;input type="hidden" name="${targetFieldName}" value="" /&gt;
  {{/html}}
#end
{{/velocity}}

{{velocity}}
{{html clean="false" filter="indent"}}&lt;form class="xform" action="$xwiki.getURL('PhenoTips.Export', 'get', "space=data&amp;outputSyntax=plain")" method="post"&gt;&lt;div&gt;{{/html}}
(% class="section filters"%)(((
=== (% class="step" %)1(%%) Filter records you wish to export ===

#__filters_display('export-filters')

{{info}}**(% id="filter-match-count"%) (%%)** matching records {{/info}}
)))##section filters

(% class="section columns"%)(((
=== (% class="step" %)2(%%) Select the fields to be exported ===

#set($ignored = {
  'fields' : ['reports_history', 'pedigree', 'extended_negative_phenotype'],
  'types'  : []
})
#set($customValues = {
       'doc.name' : "Report identifier",
       'referrer' : "Referrer (report creator)",
       'creationDate' : "Report creation date",
       'author' : "Last modified by",
       'date' : "Last modification date"
})
#set($codeFields = ['phenotype', 'negative_phenotype', 'prenatal_phenotype', 'omim_id'])
#set($metaFields = ['phenotype'])
#set($selectedValues = ['phenotype'])
#__export__displayFieldList( "PhenoTips.PatientClass" 'columns' $customValues $ignored $codeFields $selectedValues)
)))##section columns

(% class="buttons"%)(((
{{html clean="false"}}&lt;input type="hidden" name="space" value="$!request.space"/&gt;&lt;input type="hidden" name="outputSyntax" value="plain"/&gt;&lt;span class="buttonwrapper"&gt;&lt;input type="submit" value="Export" class="button" id="export_submit"/&gt;&lt;/span&gt; &lt;span class="buttonwrapper"&gt;&lt;input type="button" value="Cancel" class="button secondary" id="export_cancel"/&gt;&lt;/span&gt;{{/html}}
{{html clean="false"}}&lt;/div&gt;&lt;/form&gt;{{/html}}
)))
{{/velocity}}</content>
</xwikidoc>
